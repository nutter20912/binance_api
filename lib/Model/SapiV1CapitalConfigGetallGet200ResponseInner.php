<?php
/**
 * SapiV1CapitalConfigGetallGet200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1CapitalConfigGetallGet200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1CapitalConfigGetallGet200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_capital_config_getall_get_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coin' => 'string',
        'deposit_all_enable' => 'bool',
        'free' => 'string',
        'freeze' => 'string',
        'ipoable' => 'string',
        'ipoing' => 'string',
        'is_legal_money' => 'bool',
        'locked' => 'string',
        'name' => 'string',
        'network_list' => '\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner[]',
        'storage' => 'string',
        'trading' => 'bool',
        'withdraw_all_enable' => 'bool',
        'withdrawing' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coin' => null,
        'deposit_all_enable' => null,
        'free' => null,
        'freeze' => null,
        'ipoable' => null,
        'ipoing' => null,
        'is_legal_money' => null,
        'locked' => null,
        'name' => null,
        'network_list' => null,
        'storage' => null,
        'trading' => null,
        'withdraw_all_enable' => null,
        'withdrawing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'coin' => false,
		'deposit_all_enable' => false,
		'free' => false,
		'freeze' => false,
		'ipoable' => false,
		'ipoing' => false,
		'is_legal_money' => false,
		'locked' => false,
		'name' => false,
		'network_list' => false,
		'storage' => false,
		'trading' => false,
		'withdraw_all_enable' => false,
		'withdrawing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin' => 'coin',
        'deposit_all_enable' => 'depositAllEnable',
        'free' => 'free',
        'freeze' => 'freeze',
        'ipoable' => 'ipoable',
        'ipoing' => 'ipoing',
        'is_legal_money' => 'isLegalMoney',
        'locked' => 'locked',
        'name' => 'name',
        'network_list' => 'networkList',
        'storage' => 'storage',
        'trading' => 'trading',
        'withdraw_all_enable' => 'withdrawAllEnable',
        'withdrawing' => 'withdrawing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coin' => 'setCoin',
        'deposit_all_enable' => 'setDepositAllEnable',
        'free' => 'setFree',
        'freeze' => 'setFreeze',
        'ipoable' => 'setIpoable',
        'ipoing' => 'setIpoing',
        'is_legal_money' => 'setIsLegalMoney',
        'locked' => 'setLocked',
        'name' => 'setName',
        'network_list' => 'setNetworkList',
        'storage' => 'setStorage',
        'trading' => 'setTrading',
        'withdraw_all_enable' => 'setWithdrawAllEnable',
        'withdrawing' => 'setWithdrawing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coin' => 'getCoin',
        'deposit_all_enable' => 'getDepositAllEnable',
        'free' => 'getFree',
        'freeze' => 'getFreeze',
        'ipoable' => 'getIpoable',
        'ipoing' => 'getIpoing',
        'is_legal_money' => 'getIsLegalMoney',
        'locked' => 'getLocked',
        'name' => 'getName',
        'network_list' => 'getNetworkList',
        'storage' => 'getStorage',
        'trading' => 'getTrading',
        'withdraw_all_enable' => 'getWithdrawAllEnable',
        'withdrawing' => 'getWithdrawing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('deposit_all_enable', $data ?? [], null);
        $this->setIfExists('free', $data ?? [], null);
        $this->setIfExists('freeze', $data ?? [], null);
        $this->setIfExists('ipoable', $data ?? [], null);
        $this->setIfExists('ipoing', $data ?? [], null);
        $this->setIfExists('is_legal_money', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('network_list', $data ?? [], null);
        $this->setIfExists('storage', $data ?? [], null);
        $this->setIfExists('trading', $data ?? [], null);
        $this->setIfExists('withdraw_all_enable', $data ?? [], null);
        $this->setIfExists('withdrawing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['deposit_all_enable'] === null) {
            $invalidProperties[] = "'deposit_all_enable' can't be null";
        }
        if ($this->container['free'] === null) {
            $invalidProperties[] = "'free' can't be null";
        }
        if ($this->container['freeze'] === null) {
            $invalidProperties[] = "'freeze' can't be null";
        }
        if ($this->container['ipoable'] === null) {
            $invalidProperties[] = "'ipoable' can't be null";
        }
        if ($this->container['ipoing'] === null) {
            $invalidProperties[] = "'ipoing' can't be null";
        }
        if ($this->container['is_legal_money'] === null) {
            $invalidProperties[] = "'is_legal_money' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['network_list'] === null) {
            $invalidProperties[] = "'network_list' can't be null";
        }
        if ($this->container['storage'] === null) {
            $invalidProperties[] = "'storage' can't be null";
        }
        if ($this->container['trading'] === null) {
            $invalidProperties[] = "'trading' can't be null";
        }
        if ($this->container['withdraw_all_enable'] === null) {
            $invalidProperties[] = "'withdraw_all_enable' can't be null";
        }
        if ($this->container['withdrawing'] === null) {
            $invalidProperties[] = "'withdrawing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets deposit_all_enable
     *
     * @return bool
     */
    public function getDepositAllEnable()
    {
        return $this->container['deposit_all_enable'];
    }

    /**
     * Sets deposit_all_enable
     *
     * @param bool $deposit_all_enable deposit_all_enable
     *
     * @return self
     */
    public function setDepositAllEnable($deposit_all_enable)
    {
        if (is_null($deposit_all_enable)) {
            throw new \InvalidArgumentException('non-nullable deposit_all_enable cannot be null');
        }
        $this->container['deposit_all_enable'] = $deposit_all_enable;

        return $this;
    }

    /**
     * Gets free
     *
     * @return string
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param string $free free
     *
     * @return self
     */
    public function setFree($free)
    {
        if (is_null($free)) {
            throw new \InvalidArgumentException('non-nullable free cannot be null');
        }
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets freeze
     *
     * @return string
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze
     *
     * @param string $freeze freeze
     *
     * @return self
     */
    public function setFreeze($freeze)
    {
        if (is_null($freeze)) {
            throw new \InvalidArgumentException('non-nullable freeze cannot be null');
        }
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets ipoable
     *
     * @return string
     */
    public function getIpoable()
    {
        return $this->container['ipoable'];
    }

    /**
     * Sets ipoable
     *
     * @param string $ipoable ipoable
     *
     * @return self
     */
    public function setIpoable($ipoable)
    {
        if (is_null($ipoable)) {
            throw new \InvalidArgumentException('non-nullable ipoable cannot be null');
        }
        $this->container['ipoable'] = $ipoable;

        return $this;
    }

    /**
     * Gets ipoing
     *
     * @return string
     */
    public function getIpoing()
    {
        return $this->container['ipoing'];
    }

    /**
     * Sets ipoing
     *
     * @param string $ipoing ipoing
     *
     * @return self
     */
    public function setIpoing($ipoing)
    {
        if (is_null($ipoing)) {
            throw new \InvalidArgumentException('non-nullable ipoing cannot be null');
        }
        $this->container['ipoing'] = $ipoing;

        return $this;
    }

    /**
     * Gets is_legal_money
     *
     * @return bool
     */
    public function getIsLegalMoney()
    {
        return $this->container['is_legal_money'];
    }

    /**
     * Sets is_legal_money
     *
     * @param bool $is_legal_money is_legal_money
     *
     * @return self
     */
    public function setIsLegalMoney($is_legal_money)
    {
        if (is_null($is_legal_money)) {
            throw new \InvalidArgumentException('non-nullable is_legal_money cannot be null');
        }
        $this->container['is_legal_money'] = $is_legal_money;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network_list
     *
     * @return \OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner[]
     */
    public function getNetworkList()
    {
        return $this->container['network_list'];
    }

    /**
     * Sets network_list
     *
     * @param \OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner[] $network_list network_list
     *
     * @return self
     */
    public function setNetworkList($network_list)
    {
        if (is_null($network_list)) {
            throw new \InvalidArgumentException('non-nullable network_list cannot be null');
        }
        $this->container['network_list'] = $network_list;

        return $this;
    }

    /**
     * Gets storage
     *
     * @return string
     */
    public function getStorage()
    {
        return $this->container['storage'];
    }

    /**
     * Sets storage
     *
     * @param string $storage storage
     *
     * @return self
     */
    public function setStorage($storage)
    {
        if (is_null($storage)) {
            throw new \InvalidArgumentException('non-nullable storage cannot be null');
        }
        $this->container['storage'] = $storage;

        return $this;
    }

    /**
     * Gets trading
     *
     * @return bool
     */
    public function getTrading()
    {
        return $this->container['trading'];
    }

    /**
     * Sets trading
     *
     * @param bool $trading trading
     *
     * @return self
     */
    public function setTrading($trading)
    {
        if (is_null($trading)) {
            throw new \InvalidArgumentException('non-nullable trading cannot be null');
        }
        $this->container['trading'] = $trading;

        return $this;
    }

    /**
     * Gets withdraw_all_enable
     *
     * @return bool
     */
    public function getWithdrawAllEnable()
    {
        return $this->container['withdraw_all_enable'];
    }

    /**
     * Sets withdraw_all_enable
     *
     * @param bool $withdraw_all_enable withdraw_all_enable
     *
     * @return self
     */
    public function setWithdrawAllEnable($withdraw_all_enable)
    {
        if (is_null($withdraw_all_enable)) {
            throw new \InvalidArgumentException('non-nullable withdraw_all_enable cannot be null');
        }
        $this->container['withdraw_all_enable'] = $withdraw_all_enable;

        return $this;
    }

    /**
     * Gets withdrawing
     *
     * @return string
     */
    public function getWithdrawing()
    {
        return $this->container['withdrawing'];
    }

    /**
     * Sets withdrawing
     *
     * @param string $withdrawing withdrawing
     *
     * @return self
     */
    public function setWithdrawing($withdrawing)
    {
        if (is_null($withdrawing)) {
            throw new \InvalidArgumentException('non-nullable withdrawing cannot be null');
        }
        $this->container['withdrawing'] = $withdrawing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


