<?php
/**
 * SapiV1FuturesLoanLiquidationHistoryGet200ResponseRowsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1FuturesLoanLiquidationHistoryGet200ResponseRowsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1FuturesLoanLiquidationHistoryGet200ResponseRowsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_futures_loan_liquidationHistory_get_200_response_rows_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collateral_amount_for_liquidation' => 'string',
        'collateral_coin' => 'string',
        'force_liquidation_start_time' => 'int',
        'coin' => 'string',
        'rest_collateral_amount_after_liquidation' => 'string',
        'rest_loan_amount' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'collateral_amount_for_liquidation' => null,
        'collateral_coin' => null,
        'force_liquidation_start_time' => 'int64',
        'coin' => null,
        'rest_collateral_amount_after_liquidation' => null,
        'rest_loan_amount' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'collateral_amount_for_liquidation' => false,
		'collateral_coin' => false,
		'force_liquidation_start_time' => false,
		'coin' => false,
		'rest_collateral_amount_after_liquidation' => false,
		'rest_loan_amount' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collateral_amount_for_liquidation' => 'collateralAmountForLiquidation',
        'collateral_coin' => 'collateralCoin',
        'force_liquidation_start_time' => 'forceLiquidationStartTime',
        'coin' => 'coin',
        'rest_collateral_amount_after_liquidation' => 'restCollateralAmountAfterLiquidation',
        'rest_loan_amount' => 'restLoanAmount',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collateral_amount_for_liquidation' => 'setCollateralAmountForLiquidation',
        'collateral_coin' => 'setCollateralCoin',
        'force_liquidation_start_time' => 'setForceLiquidationStartTime',
        'coin' => 'setCoin',
        'rest_collateral_amount_after_liquidation' => 'setRestCollateralAmountAfterLiquidation',
        'rest_loan_amount' => 'setRestLoanAmount',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collateral_amount_for_liquidation' => 'getCollateralAmountForLiquidation',
        'collateral_coin' => 'getCollateralCoin',
        'force_liquidation_start_time' => 'getForceLiquidationStartTime',
        'coin' => 'getCoin',
        'rest_collateral_amount_after_liquidation' => 'getRestCollateralAmountAfterLiquidation',
        'rest_loan_amount' => 'getRestLoanAmount',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('collateral_amount_for_liquidation', $data ?? [], null);
        $this->setIfExists('collateral_coin', $data ?? [], null);
        $this->setIfExists('force_liquidation_start_time', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('rest_collateral_amount_after_liquidation', $data ?? [], null);
        $this->setIfExists('rest_loan_amount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['collateral_amount_for_liquidation'] === null) {
            $invalidProperties[] = "'collateral_amount_for_liquidation' can't be null";
        }
        if ($this->container['collateral_coin'] === null) {
            $invalidProperties[] = "'collateral_coin' can't be null";
        }
        if ($this->container['force_liquidation_start_time'] === null) {
            $invalidProperties[] = "'force_liquidation_start_time' can't be null";
        }
        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['rest_collateral_amount_after_liquidation'] === null) {
            $invalidProperties[] = "'rest_collateral_amount_after_liquidation' can't be null";
        }
        if ($this->container['rest_loan_amount'] === null) {
            $invalidProperties[] = "'rest_loan_amount' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collateral_amount_for_liquidation
     *
     * @return string
     */
    public function getCollateralAmountForLiquidation()
    {
        return $this->container['collateral_amount_for_liquidation'];
    }

    /**
     * Sets collateral_amount_for_liquidation
     *
     * @param string $collateral_amount_for_liquidation collateral_amount_for_liquidation
     *
     * @return self
     */
    public function setCollateralAmountForLiquidation($collateral_amount_for_liquidation)
    {
        if (is_null($collateral_amount_for_liquidation)) {
            throw new \InvalidArgumentException('non-nullable collateral_amount_for_liquidation cannot be null');
        }
        $this->container['collateral_amount_for_liquidation'] = $collateral_amount_for_liquidation;

        return $this;
    }

    /**
     * Gets collateral_coin
     *
     * @return string
     */
    public function getCollateralCoin()
    {
        return $this->container['collateral_coin'];
    }

    /**
     * Sets collateral_coin
     *
     * @param string $collateral_coin collateral_coin
     *
     * @return self
     */
    public function setCollateralCoin($collateral_coin)
    {
        if (is_null($collateral_coin)) {
            throw new \InvalidArgumentException('non-nullable collateral_coin cannot be null');
        }
        $this->container['collateral_coin'] = $collateral_coin;

        return $this;
    }

    /**
     * Gets force_liquidation_start_time
     *
     * @return int
     */
    public function getForceLiquidationStartTime()
    {
        return $this->container['force_liquidation_start_time'];
    }

    /**
     * Sets force_liquidation_start_time
     *
     * @param int $force_liquidation_start_time force_liquidation_start_time
     *
     * @return self
     */
    public function setForceLiquidationStartTime($force_liquidation_start_time)
    {
        if (is_null($force_liquidation_start_time)) {
            throw new \InvalidArgumentException('non-nullable force_liquidation_start_time cannot be null');
        }
        $this->container['force_liquidation_start_time'] = $force_liquidation_start_time;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets rest_collateral_amount_after_liquidation
     *
     * @return string
     */
    public function getRestCollateralAmountAfterLiquidation()
    {
        return $this->container['rest_collateral_amount_after_liquidation'];
    }

    /**
     * Sets rest_collateral_amount_after_liquidation
     *
     * @param string $rest_collateral_amount_after_liquidation rest_collateral_amount_after_liquidation
     *
     * @return self
     */
    public function setRestCollateralAmountAfterLiquidation($rest_collateral_amount_after_liquidation)
    {
        if (is_null($rest_collateral_amount_after_liquidation)) {
            throw new \InvalidArgumentException('non-nullable rest_collateral_amount_after_liquidation cannot be null');
        }
        $this->container['rest_collateral_amount_after_liquidation'] = $rest_collateral_amount_after_liquidation;

        return $this;
    }

    /**
     * Gets rest_loan_amount
     *
     * @return string
     */
    public function getRestLoanAmount()
    {
        return $this->container['rest_loan_amount'];
    }

    /**
     * Sets rest_loan_amount
     *
     * @param string $rest_loan_amount rest_loan_amount
     *
     * @return self
     */
    public function setRestLoanAmount($rest_loan_amount)
    {
        if (is_null($rest_loan_amount)) {
            throw new \InvalidArgumentException('non-nullable rest_loan_amount cannot be null');
        }
        $this->container['rest_loan_amount'] = $rest_loan_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


