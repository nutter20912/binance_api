<?php
/**
 * Account
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maker_commission' => 'int',
        'taker_commission' => 'int',
        'buyer_commission' => 'int',
        'seller_commission' => 'int',
        'can_trade' => 'bool',
        'can_withdraw' => 'bool',
        'can_deposit' => 'bool',
        'brokered' => 'bool',
        'update_time' => 'int',
        'account_type' => 'string',
        'balances' => '\OpenAPI\Client\Model\AccountBalancesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'maker_commission' => 'int64',
        'taker_commission' => 'int64',
        'buyer_commission' => 'int64',
        'seller_commission' => 'int64',
        'can_trade' => null,
        'can_withdraw' => null,
        'can_deposit' => null,
        'brokered' => null,
        'update_time' => 'int64',
        'account_type' => null,
        'balances' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'maker_commission' => false,
		'taker_commission' => false,
		'buyer_commission' => false,
		'seller_commission' => false,
		'can_trade' => false,
		'can_withdraw' => false,
		'can_deposit' => false,
		'brokered' => false,
		'update_time' => false,
		'account_type' => false,
		'balances' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maker_commission' => 'makerCommission',
        'taker_commission' => 'takerCommission',
        'buyer_commission' => 'buyerCommission',
        'seller_commission' => 'sellerCommission',
        'can_trade' => 'canTrade',
        'can_withdraw' => 'canWithdraw',
        'can_deposit' => 'canDeposit',
        'brokered' => 'brokered',
        'update_time' => 'updateTime',
        'account_type' => 'accountType',
        'balances' => 'balances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maker_commission' => 'setMakerCommission',
        'taker_commission' => 'setTakerCommission',
        'buyer_commission' => 'setBuyerCommission',
        'seller_commission' => 'setSellerCommission',
        'can_trade' => 'setCanTrade',
        'can_withdraw' => 'setCanWithdraw',
        'can_deposit' => 'setCanDeposit',
        'brokered' => 'setBrokered',
        'update_time' => 'setUpdateTime',
        'account_type' => 'setAccountType',
        'balances' => 'setBalances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maker_commission' => 'getMakerCommission',
        'taker_commission' => 'getTakerCommission',
        'buyer_commission' => 'getBuyerCommission',
        'seller_commission' => 'getSellerCommission',
        'can_trade' => 'getCanTrade',
        'can_withdraw' => 'getCanWithdraw',
        'can_deposit' => 'getCanDeposit',
        'brokered' => 'getBrokered',
        'update_time' => 'getUpdateTime',
        'account_type' => 'getAccountType',
        'balances' => 'getBalances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('maker_commission', $data ?? [], null);
        $this->setIfExists('taker_commission', $data ?? [], null);
        $this->setIfExists('buyer_commission', $data ?? [], null);
        $this->setIfExists('seller_commission', $data ?? [], null);
        $this->setIfExists('can_trade', $data ?? [], null);
        $this->setIfExists('can_withdraw', $data ?? [], null);
        $this->setIfExists('can_deposit', $data ?? [], null);
        $this->setIfExists('brokered', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('balances', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['maker_commission'] === null) {
            $invalidProperties[] = "'maker_commission' can't be null";
        }
        if ($this->container['taker_commission'] === null) {
            $invalidProperties[] = "'taker_commission' can't be null";
        }
        if ($this->container['buyer_commission'] === null) {
            $invalidProperties[] = "'buyer_commission' can't be null";
        }
        if ($this->container['seller_commission'] === null) {
            $invalidProperties[] = "'seller_commission' can't be null";
        }
        if ($this->container['can_trade'] === null) {
            $invalidProperties[] = "'can_trade' can't be null";
        }
        if ($this->container['can_withdraw'] === null) {
            $invalidProperties[] = "'can_withdraw' can't be null";
        }
        if ($this->container['can_deposit'] === null) {
            $invalidProperties[] = "'can_deposit' can't be null";
        }
        if ($this->container['brokered'] === null) {
            $invalidProperties[] = "'brokered' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['account_type'] === null) {
            $invalidProperties[] = "'account_type' can't be null";
        }
        if ($this->container['balances'] === null) {
            $invalidProperties[] = "'balances' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maker_commission
     *
     * @return int
     */
    public function getMakerCommission()
    {
        return $this->container['maker_commission'];
    }

    /**
     * Sets maker_commission
     *
     * @param int $maker_commission maker_commission
     *
     * @return self
     */
    public function setMakerCommission($maker_commission)
    {
        if (is_null($maker_commission)) {
            throw new \InvalidArgumentException('non-nullable maker_commission cannot be null');
        }
        $this->container['maker_commission'] = $maker_commission;

        return $this;
    }

    /**
     * Gets taker_commission
     *
     * @return int
     */
    public function getTakerCommission()
    {
        return $this->container['taker_commission'];
    }

    /**
     * Sets taker_commission
     *
     * @param int $taker_commission taker_commission
     *
     * @return self
     */
    public function setTakerCommission($taker_commission)
    {
        if (is_null($taker_commission)) {
            throw new \InvalidArgumentException('non-nullable taker_commission cannot be null');
        }
        $this->container['taker_commission'] = $taker_commission;

        return $this;
    }

    /**
     * Gets buyer_commission
     *
     * @return int
     */
    public function getBuyerCommission()
    {
        return $this->container['buyer_commission'];
    }

    /**
     * Sets buyer_commission
     *
     * @param int $buyer_commission buyer_commission
     *
     * @return self
     */
    public function setBuyerCommission($buyer_commission)
    {
        if (is_null($buyer_commission)) {
            throw new \InvalidArgumentException('non-nullable buyer_commission cannot be null');
        }
        $this->container['buyer_commission'] = $buyer_commission;

        return $this;
    }

    /**
     * Gets seller_commission
     *
     * @return int
     */
    public function getSellerCommission()
    {
        return $this->container['seller_commission'];
    }

    /**
     * Sets seller_commission
     *
     * @param int $seller_commission seller_commission
     *
     * @return self
     */
    public function setSellerCommission($seller_commission)
    {
        if (is_null($seller_commission)) {
            throw new \InvalidArgumentException('non-nullable seller_commission cannot be null');
        }
        $this->container['seller_commission'] = $seller_commission;

        return $this;
    }

    /**
     * Gets can_trade
     *
     * @return bool
     */
    public function getCanTrade()
    {
        return $this->container['can_trade'];
    }

    /**
     * Sets can_trade
     *
     * @param bool $can_trade can_trade
     *
     * @return self
     */
    public function setCanTrade($can_trade)
    {
        if (is_null($can_trade)) {
            throw new \InvalidArgumentException('non-nullable can_trade cannot be null');
        }
        $this->container['can_trade'] = $can_trade;

        return $this;
    }

    /**
     * Gets can_withdraw
     *
     * @return bool
     */
    public function getCanWithdraw()
    {
        return $this->container['can_withdraw'];
    }

    /**
     * Sets can_withdraw
     *
     * @param bool $can_withdraw can_withdraw
     *
     * @return self
     */
    public function setCanWithdraw($can_withdraw)
    {
        if (is_null($can_withdraw)) {
            throw new \InvalidArgumentException('non-nullable can_withdraw cannot be null');
        }
        $this->container['can_withdraw'] = $can_withdraw;

        return $this;
    }

    /**
     * Gets can_deposit
     *
     * @return bool
     */
    public function getCanDeposit()
    {
        return $this->container['can_deposit'];
    }

    /**
     * Sets can_deposit
     *
     * @param bool $can_deposit can_deposit
     *
     * @return self
     */
    public function setCanDeposit($can_deposit)
    {
        if (is_null($can_deposit)) {
            throw new \InvalidArgumentException('non-nullable can_deposit cannot be null');
        }
        $this->container['can_deposit'] = $can_deposit;

        return $this;
    }

    /**
     * Gets brokered
     *
     * @return bool
     */
    public function getBrokered()
    {
        return $this->container['brokered'];
    }

    /**
     * Sets brokered
     *
     * @param bool $brokered brokered
     *
     * @return self
     */
    public function setBrokered($brokered)
    {
        if (is_null($brokered)) {
            throw new \InvalidArgumentException('non-nullable brokered cannot be null');
        }
        $this->container['brokered'] = $brokered;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \OpenAPI\Client\Model\AccountBalancesInner[]
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \OpenAPI\Client\Model\AccountBalancesInner[] $balances balances
     *
     * @return self
     */
    public function setBalances($balances)
    {
        if (is_null($balances)) {
            throw new \InvalidArgumentException('non-nullable balances cannot be null');
        }
        $this->container['balances'] = $balances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


