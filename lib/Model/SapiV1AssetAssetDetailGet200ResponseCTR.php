<?php
/**
 * SapiV1AssetAssetDetailGet200ResponseCTR
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1AssetAssetDetailGet200ResponseCTR Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1AssetAssetDetailGet200ResponseCTR implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_asset_assetDetail_get_200_response_CTR';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'min_withdraw_amount' => 'string',
        'deposit_status' => 'bool',
        'withdraw_fee' => 'int',
        'withdraw_status' => 'bool',
        'deposit_tip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'min_withdraw_amount' => null,
        'deposit_status' => null,
        'withdraw_fee' => 'int64',
        'withdraw_status' => null,
        'deposit_tip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'min_withdraw_amount' => false,
		'deposit_status' => false,
		'withdraw_fee' => false,
		'withdraw_status' => false,
		'deposit_tip' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_withdraw_amount' => 'minWithdrawAmount',
        'deposit_status' => 'depositStatus',
        'withdraw_fee' => 'withdrawFee',
        'withdraw_status' => 'withdrawStatus',
        'deposit_tip' => 'depositTip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_withdraw_amount' => 'setMinWithdrawAmount',
        'deposit_status' => 'setDepositStatus',
        'withdraw_fee' => 'setWithdrawFee',
        'withdraw_status' => 'setWithdrawStatus',
        'deposit_tip' => 'setDepositTip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_withdraw_amount' => 'getMinWithdrawAmount',
        'deposit_status' => 'getDepositStatus',
        'withdraw_fee' => 'getWithdrawFee',
        'withdraw_status' => 'getWithdrawStatus',
        'deposit_tip' => 'getDepositTip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('min_withdraw_amount', $data ?? [], null);
        $this->setIfExists('deposit_status', $data ?? [], null);
        $this->setIfExists('withdraw_fee', $data ?? [], null);
        $this->setIfExists('withdraw_status', $data ?? [], null);
        $this->setIfExists('deposit_tip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['min_withdraw_amount'] === null) {
            $invalidProperties[] = "'min_withdraw_amount' can't be null";
        }
        if ($this->container['deposit_status'] === null) {
            $invalidProperties[] = "'deposit_status' can't be null";
        }
        if ($this->container['withdraw_fee'] === null) {
            $invalidProperties[] = "'withdraw_fee' can't be null";
        }
        if ($this->container['withdraw_status'] === null) {
            $invalidProperties[] = "'withdraw_status' can't be null";
        }
        if ($this->container['deposit_tip'] === null) {
            $invalidProperties[] = "'deposit_tip' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_withdraw_amount
     *
     * @return string
     */
    public function getMinWithdrawAmount()
    {
        return $this->container['min_withdraw_amount'];
    }

    /**
     * Sets min_withdraw_amount
     *
     * @param string $min_withdraw_amount min_withdraw_amount
     *
     * @return self
     */
    public function setMinWithdrawAmount($min_withdraw_amount)
    {
        if (is_null($min_withdraw_amount)) {
            throw new \InvalidArgumentException('non-nullable min_withdraw_amount cannot be null');
        }
        $this->container['min_withdraw_amount'] = $min_withdraw_amount;

        return $this;
    }

    /**
     * Gets deposit_status
     *
     * @return bool
     */
    public function getDepositStatus()
    {
        return $this->container['deposit_status'];
    }

    /**
     * Sets deposit_status
     *
     * @param bool $deposit_status deposit status (false if ALL of networks' are false)
     *
     * @return self
     */
    public function setDepositStatus($deposit_status)
    {
        if (is_null($deposit_status)) {
            throw new \InvalidArgumentException('non-nullable deposit_status cannot be null');
        }
        $this->container['deposit_status'] = $deposit_status;

        return $this;
    }

    /**
     * Gets withdraw_fee
     *
     * @return int
     */
    public function getWithdrawFee()
    {
        return $this->container['withdraw_fee'];
    }

    /**
     * Sets withdraw_fee
     *
     * @param int $withdraw_fee withdraw_fee
     *
     * @return self
     */
    public function setWithdrawFee($withdraw_fee)
    {
        if (is_null($withdraw_fee)) {
            throw new \InvalidArgumentException('non-nullable withdraw_fee cannot be null');
        }
        $this->container['withdraw_fee'] = $withdraw_fee;

        return $this;
    }

    /**
     * Gets withdraw_status
     *
     * @return bool
     */
    public function getWithdrawStatus()
    {
        return $this->container['withdraw_status'];
    }

    /**
     * Sets withdraw_status
     *
     * @param bool $withdraw_status withdrawStatus status (false if ALL of networks' are false)
     *
     * @return self
     */
    public function setWithdrawStatus($withdraw_status)
    {
        if (is_null($withdraw_status)) {
            throw new \InvalidArgumentException('non-nullable withdraw_status cannot be null');
        }
        $this->container['withdraw_status'] = $withdraw_status;

        return $this;
    }

    /**
     * Gets deposit_tip
     *
     * @return string
     */
    public function getDepositTip()
    {
        return $this->container['deposit_tip'];
    }

    /**
     * Sets deposit_tip
     *
     * @param string $deposit_tip deposit_tip
     *
     * @return self
     */
    public function setDepositTip($deposit_tip)
    {
        if (is_null($deposit_tip)) {
            throw new \InvalidArgumentException('non-nullable deposit_tip cannot be null');
        }
        $this->container['deposit_tip'] = $deposit_tip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


