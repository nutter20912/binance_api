<?php
/**
 * SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1AlgoFuturesOpenOrdersGet200ResponseOrdersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_algo_futures_openOrders_get_200_response_orders_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'algo_id' => 'int',
        'symbol' => 'string',
        'side' => 'string',
        'position_side' => 'string',
        'total_qty' => 'string',
        'executed_qty' => 'string',
        'executed_amt' => 'string',
        'avg_price' => 'string',
        'client_algo_id' => 'string',
        'book_time' => 'int',
        'end_time' => 'int',
        'algo_status' => 'string',
        'algo_type' => 'string',
        'urgency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'algo_id' => 'int64',
        'symbol' => null,
        'side' => null,
        'position_side' => null,
        'total_qty' => null,
        'executed_qty' => null,
        'executed_amt' => null,
        'avg_price' => null,
        'client_algo_id' => null,
        'book_time' => 'int64',
        'end_time' => 'int64',
        'algo_status' => null,
        'algo_type' => null,
        'urgency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'algo_id' => false,
		'symbol' => false,
		'side' => false,
		'position_side' => false,
		'total_qty' => false,
		'executed_qty' => false,
		'executed_amt' => false,
		'avg_price' => false,
		'client_algo_id' => false,
		'book_time' => false,
		'end_time' => false,
		'algo_status' => false,
		'algo_type' => false,
		'urgency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'algo_id' => 'algoId',
        'symbol' => 'symbol',
        'side' => 'side',
        'position_side' => 'positionSide',
        'total_qty' => 'totalQty',
        'executed_qty' => 'executedQty',
        'executed_amt' => 'executedAmt',
        'avg_price' => 'avgPrice',
        'client_algo_id' => 'clientAlgoId',
        'book_time' => 'bookTime',
        'end_time' => 'endTime',
        'algo_status' => 'algoStatus',
        'algo_type' => 'algoType',
        'urgency' => 'urgency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'algo_id' => 'setAlgoId',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'position_side' => 'setPositionSide',
        'total_qty' => 'setTotalQty',
        'executed_qty' => 'setExecutedQty',
        'executed_amt' => 'setExecutedAmt',
        'avg_price' => 'setAvgPrice',
        'client_algo_id' => 'setClientAlgoId',
        'book_time' => 'setBookTime',
        'end_time' => 'setEndTime',
        'algo_status' => 'setAlgoStatus',
        'algo_type' => 'setAlgoType',
        'urgency' => 'setUrgency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'algo_id' => 'getAlgoId',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'position_side' => 'getPositionSide',
        'total_qty' => 'getTotalQty',
        'executed_qty' => 'getExecutedQty',
        'executed_amt' => 'getExecutedAmt',
        'avg_price' => 'getAvgPrice',
        'client_algo_id' => 'getClientAlgoId',
        'book_time' => 'getBookTime',
        'end_time' => 'getEndTime',
        'algo_status' => 'getAlgoStatus',
        'algo_type' => 'getAlgoType',
        'urgency' => 'getUrgency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('algo_id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('position_side', $data ?? [], null);
        $this->setIfExists('total_qty', $data ?? [], null);
        $this->setIfExists('executed_qty', $data ?? [], null);
        $this->setIfExists('executed_amt', $data ?? [], null);
        $this->setIfExists('avg_price', $data ?? [], null);
        $this->setIfExists('client_algo_id', $data ?? [], null);
        $this->setIfExists('book_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('algo_status', $data ?? [], null);
        $this->setIfExists('algo_type', $data ?? [], null);
        $this->setIfExists('urgency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['algo_id'] === null) {
            $invalidProperties[] = "'algo_id' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['side'] === null) {
            $invalidProperties[] = "'side' can't be null";
        }
        if ($this->container['position_side'] === null) {
            $invalidProperties[] = "'position_side' can't be null";
        }
        if ($this->container['total_qty'] === null) {
            $invalidProperties[] = "'total_qty' can't be null";
        }
        if ($this->container['executed_qty'] === null) {
            $invalidProperties[] = "'executed_qty' can't be null";
        }
        if ($this->container['executed_amt'] === null) {
            $invalidProperties[] = "'executed_amt' can't be null";
        }
        if ($this->container['avg_price'] === null) {
            $invalidProperties[] = "'avg_price' can't be null";
        }
        if ($this->container['client_algo_id'] === null) {
            $invalidProperties[] = "'client_algo_id' can't be null";
        }
        if ($this->container['book_time'] === null) {
            $invalidProperties[] = "'book_time' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['algo_status'] === null) {
            $invalidProperties[] = "'algo_status' can't be null";
        }
        if ($this->container['algo_type'] === null) {
            $invalidProperties[] = "'algo_type' can't be null";
        }
        if ($this->container['urgency'] === null) {
            $invalidProperties[] = "'urgency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets algo_id
     *
     * @return int
     */
    public function getAlgoId()
    {
        return $this->container['algo_id'];
    }

    /**
     * Sets algo_id
     *
     * @param int $algo_id algo_id
     *
     * @return self
     */
    public function setAlgoId($algo_id)
    {
        if (is_null($algo_id)) {
            throw new \InvalidArgumentException('non-nullable algo_id cannot be null');
        }
        $this->container['algo_id'] = $algo_id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side side
     *
     * @return self
     */
    public function setSide($side)
    {
        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets position_side
     *
     * @return string
     */
    public function getPositionSide()
    {
        return $this->container['position_side'];
    }

    /**
     * Sets position_side
     *
     * @param string $position_side position_side
     *
     * @return self
     */
    public function setPositionSide($position_side)
    {
        if (is_null($position_side)) {
            throw new \InvalidArgumentException('non-nullable position_side cannot be null');
        }
        $this->container['position_side'] = $position_side;

        return $this;
    }

    /**
     * Gets total_qty
     *
     * @return string
     */
    public function getTotalQty()
    {
        return $this->container['total_qty'];
    }

    /**
     * Sets total_qty
     *
     * @param string $total_qty total_qty
     *
     * @return self
     */
    public function setTotalQty($total_qty)
    {
        if (is_null($total_qty)) {
            throw new \InvalidArgumentException('non-nullable total_qty cannot be null');
        }
        $this->container['total_qty'] = $total_qty;

        return $this;
    }

    /**
     * Gets executed_qty
     *
     * @return string
     */
    public function getExecutedQty()
    {
        return $this->container['executed_qty'];
    }

    /**
     * Sets executed_qty
     *
     * @param string $executed_qty executed_qty
     *
     * @return self
     */
    public function setExecutedQty($executed_qty)
    {
        if (is_null($executed_qty)) {
            throw new \InvalidArgumentException('non-nullable executed_qty cannot be null');
        }
        $this->container['executed_qty'] = $executed_qty;

        return $this;
    }

    /**
     * Gets executed_amt
     *
     * @return string
     */
    public function getExecutedAmt()
    {
        return $this->container['executed_amt'];
    }

    /**
     * Sets executed_amt
     *
     * @param string $executed_amt executed_amt
     *
     * @return self
     */
    public function setExecutedAmt($executed_amt)
    {
        if (is_null($executed_amt)) {
            throw new \InvalidArgumentException('non-nullable executed_amt cannot be null');
        }
        $this->container['executed_amt'] = $executed_amt;

        return $this;
    }

    /**
     * Gets avg_price
     *
     * @return string
     */
    public function getAvgPrice()
    {
        return $this->container['avg_price'];
    }

    /**
     * Sets avg_price
     *
     * @param string $avg_price avg_price
     *
     * @return self
     */
    public function setAvgPrice($avg_price)
    {
        if (is_null($avg_price)) {
            throw new \InvalidArgumentException('non-nullable avg_price cannot be null');
        }
        $this->container['avg_price'] = $avg_price;

        return $this;
    }

    /**
     * Gets client_algo_id
     *
     * @return string
     */
    public function getClientAlgoId()
    {
        return $this->container['client_algo_id'];
    }

    /**
     * Sets client_algo_id
     *
     * @param string $client_algo_id client_algo_id
     *
     * @return self
     */
    public function setClientAlgoId($client_algo_id)
    {
        if (is_null($client_algo_id)) {
            throw new \InvalidArgumentException('non-nullable client_algo_id cannot be null');
        }
        $this->container['client_algo_id'] = $client_algo_id;

        return $this;
    }

    /**
     * Gets book_time
     *
     * @return int
     */
    public function getBookTime()
    {
        return $this->container['book_time'];
    }

    /**
     * Sets book_time
     *
     * @param int $book_time book_time
     *
     * @return self
     */
    public function setBookTime($book_time)
    {
        if (is_null($book_time)) {
            throw new \InvalidArgumentException('non-nullable book_time cannot be null');
        }
        $this->container['book_time'] = $book_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets algo_status
     *
     * @return string
     */
    public function getAlgoStatus()
    {
        return $this->container['algo_status'];
    }

    /**
     * Sets algo_status
     *
     * @param string $algo_status algo_status
     *
     * @return self
     */
    public function setAlgoStatus($algo_status)
    {
        if (is_null($algo_status)) {
            throw new \InvalidArgumentException('non-nullable algo_status cannot be null');
        }
        $this->container['algo_status'] = $algo_status;

        return $this;
    }

    /**
     * Gets algo_type
     *
     * @return string
     */
    public function getAlgoType()
    {
        return $this->container['algo_type'];
    }

    /**
     * Sets algo_type
     *
     * @param string $algo_type algo_type
     *
     * @return self
     */
    public function setAlgoType($algo_type)
    {
        if (is_null($algo_type)) {
            throw new \InvalidArgumentException('non-nullable algo_type cannot be null');
        }
        $this->container['algo_type'] = $algo_type;

        return $this;
    }

    /**
     * Gets urgency
     *
     * @return string
     */
    public function getUrgency()
    {
        return $this->container['urgency'];
    }

    /**
     * Sets urgency
     *
     * @param string $urgency urgency
     *
     * @return self
     */
    public function setUrgency($urgency)
    {
        if (is_null($urgency)) {
            throw new \InvalidArgumentException('non-nullable urgency cannot be null');
        }
        $this->container['urgency'] = $urgency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


