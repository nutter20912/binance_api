<?php
/**
 * SapiV1BswapSwapGet200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1BswapSwapGet200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1BswapSwapGet200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_bswap_swap_get_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'swap_id' => 'int',
        'swap_time' => 'int',
        'status' => 'int',
        'quote_asset' => 'string',
        'base_asset' => 'string',
        'quote_qty' => 'float',
        'base_qty' => 'float',
        'price' => 'float',
        'fee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'swap_id' => 'int64',
        'swap_time' => 'int64',
        'status' => 'int32',
        'quote_asset' => null,
        'base_asset' => null,
        'quote_qty' => 'double',
        'base_qty' => 'double',
        'price' => 'double',
        'fee' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'swap_id' => false,
		'swap_time' => false,
		'status' => false,
		'quote_asset' => false,
		'base_asset' => false,
		'quote_qty' => false,
		'base_qty' => false,
		'price' => false,
		'fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'swap_id' => 'swapId',
        'swap_time' => 'swapTime',
        'status' => 'status',
        'quote_asset' => 'quoteAsset',
        'base_asset' => 'baseAsset',
        'quote_qty' => 'quoteQty',
        'base_qty' => 'baseQty',
        'price' => 'price',
        'fee' => 'fee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'swap_id' => 'setSwapId',
        'swap_time' => 'setSwapTime',
        'status' => 'setStatus',
        'quote_asset' => 'setQuoteAsset',
        'base_asset' => 'setBaseAsset',
        'quote_qty' => 'setQuoteQty',
        'base_qty' => 'setBaseQty',
        'price' => 'setPrice',
        'fee' => 'setFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'swap_id' => 'getSwapId',
        'swap_time' => 'getSwapTime',
        'status' => 'getStatus',
        'quote_asset' => 'getQuoteAsset',
        'base_asset' => 'getBaseAsset',
        'quote_qty' => 'getQuoteQty',
        'base_qty' => 'getBaseQty',
        'price' => 'getPrice',
        'fee' => 'getFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('swap_id', $data ?? [], null);
        $this->setIfExists('swap_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('quote_asset', $data ?? [], null);
        $this->setIfExists('base_asset', $data ?? [], null);
        $this->setIfExists('quote_qty', $data ?? [], null);
        $this->setIfExists('base_qty', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['swap_id'] === null) {
            $invalidProperties[] = "'swap_id' can't be null";
        }
        if ($this->container['swap_time'] === null) {
            $invalidProperties[] = "'swap_time' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['quote_asset'] === null) {
            $invalidProperties[] = "'quote_asset' can't be null";
        }
        if ($this->container['base_asset'] === null) {
            $invalidProperties[] = "'base_asset' can't be null";
        }
        if ($this->container['quote_qty'] === null) {
            $invalidProperties[] = "'quote_qty' can't be null";
        }
        if ($this->container['base_qty'] === null) {
            $invalidProperties[] = "'base_qty' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets swap_id
     *
     * @return int
     */
    public function getSwapId()
    {
        return $this->container['swap_id'];
    }

    /**
     * Sets swap_id
     *
     * @param int $swap_id swap_id
     *
     * @return self
     */
    public function setSwapId($swap_id)
    {
        if (is_null($swap_id)) {
            throw new \InvalidArgumentException('non-nullable swap_id cannot be null');
        }
        $this->container['swap_id'] = $swap_id;

        return $this;
    }

    /**
     * Gets swap_time
     *
     * @return int
     */
    public function getSwapTime()
    {
        return $this->container['swap_time'];
    }

    /**
     * Sets swap_time
     *
     * @param int $swap_time swap_time
     *
     * @return self
     */
    public function setSwapTime($swap_time)
    {
        if (is_null($swap_time)) {
            throw new \InvalidArgumentException('non-nullable swap_time cannot be null');
        }
        $this->container['swap_time'] = $swap_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 0: pending, 1: success, 2: failed
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets quote_asset
     *
     * @return string
     */
    public function getQuoteAsset()
    {
        return $this->container['quote_asset'];
    }

    /**
     * Sets quote_asset
     *
     * @param string $quote_asset quote_asset
     *
     * @return self
     */
    public function setQuoteAsset($quote_asset)
    {
        if (is_null($quote_asset)) {
            throw new \InvalidArgumentException('non-nullable quote_asset cannot be null');
        }
        $this->container['quote_asset'] = $quote_asset;

        return $this;
    }

    /**
     * Gets base_asset
     *
     * @return string
     */
    public function getBaseAsset()
    {
        return $this->container['base_asset'];
    }

    /**
     * Sets base_asset
     *
     * @param string $base_asset base_asset
     *
     * @return self
     */
    public function setBaseAsset($base_asset)
    {
        if (is_null($base_asset)) {
            throw new \InvalidArgumentException('non-nullable base_asset cannot be null');
        }
        $this->container['base_asset'] = $base_asset;

        return $this;
    }

    /**
     * Gets quote_qty
     *
     * @return float
     */
    public function getQuoteQty()
    {
        return $this->container['quote_qty'];
    }

    /**
     * Sets quote_qty
     *
     * @param float $quote_qty quote_qty
     *
     * @return self
     */
    public function setQuoteQty($quote_qty)
    {
        if (is_null($quote_qty)) {
            throw new \InvalidArgumentException('non-nullable quote_qty cannot be null');
        }
        $this->container['quote_qty'] = $quote_qty;

        return $this;
    }

    /**
     * Gets base_qty
     *
     * @return float
     */
    public function getBaseQty()
    {
        return $this->container['base_qty'];
    }

    /**
     * Sets base_qty
     *
     * @param float $base_qty base_qty
     *
     * @return self
     */
    public function setBaseQty($base_qty)
    {
        if (is_null($base_qty)) {
            throw new \InvalidArgumentException('non-nullable base_qty cannot be null');
        }
        $this->container['base_qty'] = $base_qty;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


