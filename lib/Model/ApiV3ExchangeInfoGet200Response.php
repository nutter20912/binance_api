<?php
/**
 * ApiV3ExchangeInfoGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiV3ExchangeInfoGet200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiV3ExchangeInfoGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_v3_exchangeInfo_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timezone' => 'string',
        'server_time' => 'int',
        'rate_limits' => '\OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseRateLimitsInner[]',
        'exchange_filters' => 'object[]',
        'symbols' => '\OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseSymbolsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timezone' => null,
        'server_time' => 'int64',
        'rate_limits' => null,
        'exchange_filters' => null,
        'symbols' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timezone' => false,
		'server_time' => false,
		'rate_limits' => false,
		'exchange_filters' => false,
		'symbols' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'server_time' => 'serverTime',
        'rate_limits' => 'rateLimits',
        'exchange_filters' => 'exchangeFilters',
        'symbols' => 'symbols'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'server_time' => 'setServerTime',
        'rate_limits' => 'setRateLimits',
        'exchange_filters' => 'setExchangeFilters',
        'symbols' => 'setSymbols'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'server_time' => 'getServerTime',
        'rate_limits' => 'getRateLimits',
        'exchange_filters' => 'getExchangeFilters',
        'symbols' => 'getSymbols'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('server_time', $data ?? [], null);
        $this->setIfExists('rate_limits', $data ?? [], null);
        $this->setIfExists('exchange_filters', $data ?? [], null);
        $this->setIfExists('symbols', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['server_time'] === null) {
            $invalidProperties[] = "'server_time' can't be null";
        }
        if ($this->container['rate_limits'] === null) {
            $invalidProperties[] = "'rate_limits' can't be null";
        }
        if ($this->container['exchange_filters'] === null) {
            $invalidProperties[] = "'exchange_filters' can't be null";
        }
        if ($this->container['symbols'] === null) {
            $invalidProperties[] = "'symbols' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return int
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param int $server_time server_time
     *
     * @return self
     */
    public function setServerTime($server_time)
    {
        if (is_null($server_time)) {
            throw new \InvalidArgumentException('non-nullable server_time cannot be null');
        }
        $this->container['server_time'] = $server_time;

        return $this;
    }

    /**
     * Gets rate_limits
     *
     * @return \OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseRateLimitsInner[]
     */
    public function getRateLimits()
    {
        return $this->container['rate_limits'];
    }

    /**
     * Sets rate_limits
     *
     * @param \OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseRateLimitsInner[] $rate_limits rate_limits
     *
     * @return self
     */
    public function setRateLimits($rate_limits)
    {
        if (is_null($rate_limits)) {
            throw new \InvalidArgumentException('non-nullable rate_limits cannot be null');
        }
        $this->container['rate_limits'] = $rate_limits;

        return $this;
    }

    /**
     * Gets exchange_filters
     *
     * @return object[]
     */
    public function getExchangeFilters()
    {
        return $this->container['exchange_filters'];
    }

    /**
     * Sets exchange_filters
     *
     * @param object[] $exchange_filters exchange_filters
     *
     * @return self
     */
    public function setExchangeFilters($exchange_filters)
    {
        if (is_null($exchange_filters)) {
            throw new \InvalidArgumentException('non-nullable exchange_filters cannot be null');
        }
        $this->container['exchange_filters'] = $exchange_filters;

        return $this;
    }

    /**
     * Gets symbols
     *
     * @return \OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseSymbolsInner[]
     */
    public function getSymbols()
    {
        return $this->container['symbols'];
    }

    /**
     * Sets symbols
     *
     * @param \OpenAPI\Client\Model\ApiV3ExchangeInfoGet200ResponseSymbolsInner[] $symbols symbols
     *
     * @return self
     */
    public function setSymbols($symbols)
    {
        if (is_null($symbols)) {
            throw new \InvalidArgumentException('non-nullable symbols cannot be null');
        }
        $this->container['symbols'] = $symbols;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


