<?php
/**
 * SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVosInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVosInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVosInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subAccountCOINFuturesPositionRisk_deliveryPositionRiskVos_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_price' => 'string',
        'mark_price' => 'string',
        'leverage' => 'string',
        'isolated' => 'string',
        'isolated_wallet' => 'string',
        'isolated_margin' => 'string',
        'is_auto_add_margin' => 'string',
        'position_side' => 'string',
        'position_amount' => 'string',
        'symbol' => 'string',
        'unrealized_profit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_price' => null,
        'mark_price' => null,
        'leverage' => null,
        'isolated' => null,
        'isolated_wallet' => null,
        'isolated_margin' => null,
        'is_auto_add_margin' => null,
        'position_side' => null,
        'position_amount' => null,
        'symbol' => null,
        'unrealized_profit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_price' => false,
		'mark_price' => false,
		'leverage' => false,
		'isolated' => false,
		'isolated_wallet' => false,
		'isolated_margin' => false,
		'is_auto_add_margin' => false,
		'position_side' => false,
		'position_amount' => false,
		'symbol' => false,
		'unrealized_profit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_price' => 'entryPrice',
        'mark_price' => 'markPrice',
        'leverage' => 'leverage',
        'isolated' => 'isolated',
        'isolated_wallet' => 'isolatedWallet',
        'isolated_margin' => 'isolatedMargin',
        'is_auto_add_margin' => 'isAutoAddMargin',
        'position_side' => 'positionSide',
        'position_amount' => 'positionAmount',
        'symbol' => 'symbol',
        'unrealized_profit' => 'unrealizedProfit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_price' => 'setEntryPrice',
        'mark_price' => 'setMarkPrice',
        'leverage' => 'setLeverage',
        'isolated' => 'setIsolated',
        'isolated_wallet' => 'setIsolatedWallet',
        'isolated_margin' => 'setIsolatedMargin',
        'is_auto_add_margin' => 'setIsAutoAddMargin',
        'position_side' => 'setPositionSide',
        'position_amount' => 'setPositionAmount',
        'symbol' => 'setSymbol',
        'unrealized_profit' => 'setUnrealizedProfit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_price' => 'getEntryPrice',
        'mark_price' => 'getMarkPrice',
        'leverage' => 'getLeverage',
        'isolated' => 'getIsolated',
        'isolated_wallet' => 'getIsolatedWallet',
        'isolated_margin' => 'getIsolatedMargin',
        'is_auto_add_margin' => 'getIsAutoAddMargin',
        'position_side' => 'getPositionSide',
        'position_amount' => 'getPositionAmount',
        'symbol' => 'getSymbol',
        'unrealized_profit' => 'getUnrealizedProfit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_price', $data ?? [], null);
        $this->setIfExists('mark_price', $data ?? [], null);
        $this->setIfExists('leverage', $data ?? [], null);
        $this->setIfExists('isolated', $data ?? [], null);
        $this->setIfExists('isolated_wallet', $data ?? [], null);
        $this->setIfExists('isolated_margin', $data ?? [], null);
        $this->setIfExists('is_auto_add_margin', $data ?? [], null);
        $this->setIfExists('position_side', $data ?? [], null);
        $this->setIfExists('position_amount', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('unrealized_profit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entry_price'] === null) {
            $invalidProperties[] = "'entry_price' can't be null";
        }
        if ($this->container['mark_price'] === null) {
            $invalidProperties[] = "'mark_price' can't be null";
        }
        if ($this->container['leverage'] === null) {
            $invalidProperties[] = "'leverage' can't be null";
        }
        if ($this->container['isolated'] === null) {
            $invalidProperties[] = "'isolated' can't be null";
        }
        if ($this->container['isolated_wallet'] === null) {
            $invalidProperties[] = "'isolated_wallet' can't be null";
        }
        if ($this->container['isolated_margin'] === null) {
            $invalidProperties[] = "'isolated_margin' can't be null";
        }
        if ($this->container['is_auto_add_margin'] === null) {
            $invalidProperties[] = "'is_auto_add_margin' can't be null";
        }
        if ($this->container['position_side'] === null) {
            $invalidProperties[] = "'position_side' can't be null";
        }
        if ($this->container['position_amount'] === null) {
            $invalidProperties[] = "'position_amount' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['unrealized_profit'] === null) {
            $invalidProperties[] = "'unrealized_profit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_price
     *
     * @return string
     */
    public function getEntryPrice()
    {
        return $this->container['entry_price'];
    }

    /**
     * Sets entry_price
     *
     * @param string $entry_price entry_price
     *
     * @return self
     */
    public function setEntryPrice($entry_price)
    {
        if (is_null($entry_price)) {
            throw new \InvalidArgumentException('non-nullable entry_price cannot be null');
        }
        $this->container['entry_price'] = $entry_price;

        return $this;
    }

    /**
     * Gets mark_price
     *
     * @return string
     */
    public function getMarkPrice()
    {
        return $this->container['mark_price'];
    }

    /**
     * Sets mark_price
     *
     * @param string $mark_price mark_price
     *
     * @return self
     */
    public function setMarkPrice($mark_price)
    {
        if (is_null($mark_price)) {
            throw new \InvalidArgumentException('non-nullable mark_price cannot be null');
        }
        $this->container['mark_price'] = $mark_price;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string $leverage leverage
     *
     * @return self
     */
    public function setLeverage($leverage)
    {
        if (is_null($leverage)) {
            throw new \InvalidArgumentException('non-nullable leverage cannot be null');
        }
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets isolated
     *
     * @return string
     */
    public function getIsolated()
    {
        return $this->container['isolated'];
    }

    /**
     * Sets isolated
     *
     * @param string $isolated isolated
     *
     * @return self
     */
    public function setIsolated($isolated)
    {
        if (is_null($isolated)) {
            throw new \InvalidArgumentException('non-nullable isolated cannot be null');
        }
        $this->container['isolated'] = $isolated;

        return $this;
    }

    /**
     * Gets isolated_wallet
     *
     * @return string
     */
    public function getIsolatedWallet()
    {
        return $this->container['isolated_wallet'];
    }

    /**
     * Sets isolated_wallet
     *
     * @param string $isolated_wallet isolated_wallet
     *
     * @return self
     */
    public function setIsolatedWallet($isolated_wallet)
    {
        if (is_null($isolated_wallet)) {
            throw new \InvalidArgumentException('non-nullable isolated_wallet cannot be null');
        }
        $this->container['isolated_wallet'] = $isolated_wallet;

        return $this;
    }

    /**
     * Gets isolated_margin
     *
     * @return string
     */
    public function getIsolatedMargin()
    {
        return $this->container['isolated_margin'];
    }

    /**
     * Sets isolated_margin
     *
     * @param string $isolated_margin isolated_margin
     *
     * @return self
     */
    public function setIsolatedMargin($isolated_margin)
    {
        if (is_null($isolated_margin)) {
            throw new \InvalidArgumentException('non-nullable isolated_margin cannot be null');
        }
        $this->container['isolated_margin'] = $isolated_margin;

        return $this;
    }

    /**
     * Gets is_auto_add_margin
     *
     * @return string
     */
    public function getIsAutoAddMargin()
    {
        return $this->container['is_auto_add_margin'];
    }

    /**
     * Sets is_auto_add_margin
     *
     * @param string $is_auto_add_margin is_auto_add_margin
     *
     * @return self
     */
    public function setIsAutoAddMargin($is_auto_add_margin)
    {
        if (is_null($is_auto_add_margin)) {
            throw new \InvalidArgumentException('non-nullable is_auto_add_margin cannot be null');
        }
        $this->container['is_auto_add_margin'] = $is_auto_add_margin;

        return $this;
    }

    /**
     * Gets position_side
     *
     * @return string
     */
    public function getPositionSide()
    {
        return $this->container['position_side'];
    }

    /**
     * Sets position_side
     *
     * @param string $position_side position_side
     *
     * @return self
     */
    public function setPositionSide($position_side)
    {
        if (is_null($position_side)) {
            throw new \InvalidArgumentException('non-nullable position_side cannot be null');
        }
        $this->container['position_side'] = $position_side;

        return $this;
    }

    /**
     * Gets position_amount
     *
     * @return string
     */
    public function getPositionAmount()
    {
        return $this->container['position_amount'];
    }

    /**
     * Sets position_amount
     *
     * @param string $position_amount position_amount
     *
     * @return self
     */
    public function setPositionAmount($position_amount)
    {
        if (is_null($position_amount)) {
            throw new \InvalidArgumentException('non-nullable position_amount cannot be null');
        }
        $this->container['position_amount'] = $position_amount;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets unrealized_profit
     *
     * @return string
     */
    public function getUnrealizedProfit()
    {
        return $this->container['unrealized_profit'];
    }

    /**
     * Sets unrealized_profit
     *
     * @param string $unrealized_profit unrealized_profit
     *
     * @return self
     */
    public function setUnrealizedProfit($unrealized_profit)
    {
        if (is_null($unrealized_profit)) {
            throw new \InvalidArgumentException('non-nullable unrealized_profit cannot be null');
        }
        $this->container['unrealized_profit'] = $unrealized_profit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


