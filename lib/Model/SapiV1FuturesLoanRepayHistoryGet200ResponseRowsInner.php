<?php
/**
 * SapiV1FuturesLoanRepayHistoryGet200ResponseRowsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1FuturesLoanRepayHistoryGet200ResponseRowsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1FuturesLoanRepayHistoryGet200ResponseRowsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_futures_loan_repay_history_get_200_response_rows_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coin' => 'string',
        'amount' => 'string',
        'collateral_coin' => 'string',
        'repay_type' => 'string',
        'released_collateral' => 'string',
        'price' => 'string',
        'repay_collateral' => 'string',
        'confirmed_time' => 'int',
        'update_time' => 'int',
        'status' => 'string',
        'repay_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coin' => null,
        'amount' => null,
        'collateral_coin' => null,
        'repay_type' => null,
        'released_collateral' => null,
        'price' => null,
        'repay_collateral' => null,
        'confirmed_time' => 'int64',
        'update_time' => 'int64',
        'status' => null,
        'repay_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'coin' => false,
		'amount' => false,
		'collateral_coin' => false,
		'repay_type' => false,
		'released_collateral' => false,
		'price' => false,
		'repay_collateral' => false,
		'confirmed_time' => false,
		'update_time' => false,
		'status' => false,
		'repay_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin' => 'coin',
        'amount' => 'amount',
        'collateral_coin' => 'collateralCoin',
        'repay_type' => 'repayType',
        'released_collateral' => 'releasedCollateral',
        'price' => 'price',
        'repay_collateral' => 'repayCollateral',
        'confirmed_time' => 'confirmedTime',
        'update_time' => 'updateTime',
        'status' => 'status',
        'repay_id' => 'repayId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coin' => 'setCoin',
        'amount' => 'setAmount',
        'collateral_coin' => 'setCollateralCoin',
        'repay_type' => 'setRepayType',
        'released_collateral' => 'setReleasedCollateral',
        'price' => 'setPrice',
        'repay_collateral' => 'setRepayCollateral',
        'confirmed_time' => 'setConfirmedTime',
        'update_time' => 'setUpdateTime',
        'status' => 'setStatus',
        'repay_id' => 'setRepayId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coin' => 'getCoin',
        'amount' => 'getAmount',
        'collateral_coin' => 'getCollateralCoin',
        'repay_type' => 'getRepayType',
        'released_collateral' => 'getReleasedCollateral',
        'price' => 'getPrice',
        'repay_collateral' => 'getRepayCollateral',
        'confirmed_time' => 'getConfirmedTime',
        'update_time' => 'getUpdateTime',
        'status' => 'getStatus',
        'repay_id' => 'getRepayId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('collateral_coin', $data ?? [], null);
        $this->setIfExists('repay_type', $data ?? [], null);
        $this->setIfExists('released_collateral', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('repay_collateral', $data ?? [], null);
        $this->setIfExists('confirmed_time', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('repay_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['collateral_coin'] === null) {
            $invalidProperties[] = "'collateral_coin' can't be null";
        }
        if ($this->container['repay_type'] === null) {
            $invalidProperties[] = "'repay_type' can't be null";
        }
        if ($this->container['released_collateral'] === null) {
            $invalidProperties[] = "'released_collateral' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['repay_collateral'] === null) {
            $invalidProperties[] = "'repay_collateral' can't be null";
        }
        if ($this->container['confirmed_time'] === null) {
            $invalidProperties[] = "'confirmed_time' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['repay_id'] === null) {
            $invalidProperties[] = "'repay_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets collateral_coin
     *
     * @return string
     */
    public function getCollateralCoin()
    {
        return $this->container['collateral_coin'];
    }

    /**
     * Sets collateral_coin
     *
     * @param string $collateral_coin collateral_coin
     *
     * @return self
     */
    public function setCollateralCoin($collateral_coin)
    {
        if (is_null($collateral_coin)) {
            throw new \InvalidArgumentException('non-nullable collateral_coin cannot be null');
        }
        $this->container['collateral_coin'] = $collateral_coin;

        return $this;
    }

    /**
     * Gets repay_type
     *
     * @return string
     */
    public function getRepayType()
    {
        return $this->container['repay_type'];
    }

    /**
     * Sets repay_type
     *
     * @param string $repay_type repay_type
     *
     * @return self
     */
    public function setRepayType($repay_type)
    {
        if (is_null($repay_type)) {
            throw new \InvalidArgumentException('non-nullable repay_type cannot be null');
        }
        $this->container['repay_type'] = $repay_type;

        return $this;
    }

    /**
     * Gets released_collateral
     *
     * @return string
     */
    public function getReleasedCollateral()
    {
        return $this->container['released_collateral'];
    }

    /**
     * Sets released_collateral
     *
     * @param string $released_collateral released_collateral
     *
     * @return self
     */
    public function setReleasedCollateral($released_collateral)
    {
        if (is_null($released_collateral)) {
            throw new \InvalidArgumentException('non-nullable released_collateral cannot be null');
        }
        $this->container['released_collateral'] = $released_collateral;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets repay_collateral
     *
     * @return string
     */
    public function getRepayCollateral()
    {
        return $this->container['repay_collateral'];
    }

    /**
     * Sets repay_collateral
     *
     * @param string $repay_collateral repay_collateral
     *
     * @return self
     */
    public function setRepayCollateral($repay_collateral)
    {
        if (is_null($repay_collateral)) {
            throw new \InvalidArgumentException('non-nullable repay_collateral cannot be null');
        }
        $this->container['repay_collateral'] = $repay_collateral;

        return $this;
    }

    /**
     * Gets confirmed_time
     *
     * @return int
     */
    public function getConfirmedTime()
    {
        return $this->container['confirmed_time'];
    }

    /**
     * Sets confirmed_time
     *
     * @param int $confirmed_time confirmed_time
     *
     * @return self
     */
    public function setConfirmedTime($confirmed_time)
    {
        if (is_null($confirmed_time)) {
            throw new \InvalidArgumentException('non-nullable confirmed_time cannot be null');
        }
        $this->container['confirmed_time'] = $confirmed_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param int $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets repay_id
     *
     * @return string
     */
    public function getRepayId()
    {
        return $this->container['repay_id'];
    }

    /**
     * Sets repay_id
     *
     * @param string $repay_id repay_id
     *
     * @return self
     */
    public function setRepayId($repay_id)
    {
        if (is_null($repay_id)) {
            throw new \InvalidArgumentException('non-nullable repay_id cannot be null');
        }
        $this->container['repay_id'] = $repay_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


