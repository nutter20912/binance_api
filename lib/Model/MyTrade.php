<?php
/**
 * MyTrade
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MyTrade Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MyTrade implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'myTrade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'id' => 'int',
        'order_id' => 'int',
        'order_list_id' => 'int',
        'price' => 'string',
        'qty' => 'string',
        'quote_qty' => 'string',
        'commission' => 'string',
        'commission_asset' => 'string',
        'time' => 'int',
        'is_buyer' => 'bool',
        'is_maker' => 'bool',
        'is_best_match' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'id' => 'int64',
        'order_id' => 'int64',
        'order_list_id' => 'int64',
        'price' => null,
        'qty' => null,
        'quote_qty' => null,
        'commission' => null,
        'commission_asset' => null,
        'time' => 'int64',
        'is_buyer' => null,
        'is_maker' => null,
        'is_best_match' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol' => false,
		'id' => false,
		'order_id' => false,
		'order_list_id' => false,
		'price' => false,
		'qty' => false,
		'quote_qty' => false,
		'commission' => false,
		'commission_asset' => false,
		'time' => false,
		'is_buyer' => false,
		'is_maker' => false,
		'is_best_match' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'id' => 'id',
        'order_id' => 'orderId',
        'order_list_id' => 'orderListId',
        'price' => 'price',
        'qty' => 'qty',
        'quote_qty' => 'quoteQty',
        'commission' => 'commission',
        'commission_asset' => 'commissionAsset',
        'time' => 'time',
        'is_buyer' => 'isBuyer',
        'is_maker' => 'isMaker',
        'is_best_match' => 'isBestMatch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'order_list_id' => 'setOrderListId',
        'price' => 'setPrice',
        'qty' => 'setQty',
        'quote_qty' => 'setQuoteQty',
        'commission' => 'setCommission',
        'commission_asset' => 'setCommissionAsset',
        'time' => 'setTime',
        'is_buyer' => 'setIsBuyer',
        'is_maker' => 'setIsMaker',
        'is_best_match' => 'setIsBestMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'order_list_id' => 'getOrderListId',
        'price' => 'getPrice',
        'qty' => 'getQty',
        'quote_qty' => 'getQuoteQty',
        'commission' => 'getCommission',
        'commission_asset' => 'getCommissionAsset',
        'time' => 'getTime',
        'is_buyer' => 'getIsBuyer',
        'is_maker' => 'getIsMaker',
        'is_best_match' => 'getIsBestMatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_list_id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('qty', $data ?? [], null);
        $this->setIfExists('quote_qty', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('commission_asset', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('is_buyer', $data ?? [], null);
        $this->setIfExists('is_maker', $data ?? [], null);
        $this->setIfExists('is_best_match', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['order_list_id'] === null) {
            $invalidProperties[] = "'order_list_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['qty'] === null) {
            $invalidProperties[] = "'qty' can't be null";
        }
        if ($this->container['quote_qty'] === null) {
            $invalidProperties[] = "'quote_qty' can't be null";
        }
        if ($this->container['commission'] === null) {
            $invalidProperties[] = "'commission' can't be null";
        }
        if ($this->container['commission_asset'] === null) {
            $invalidProperties[] = "'commission_asset' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['is_buyer'] === null) {
            $invalidProperties[] = "'is_buyer' can't be null";
        }
        if ($this->container['is_maker'] === null) {
            $invalidProperties[] = "'is_maker' can't be null";
        }
        if ($this->container['is_best_match'] === null) {
            $invalidProperties[] = "'is_best_match' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Trade id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_list_id
     *
     * @return int
     */
    public function getOrderListId()
    {
        return $this->container['order_list_id'];
    }

    /**
     * Sets order_list_id
     *
     * @param int $order_list_id order_list_id
     *
     * @return self
     */
    public function setOrderListId($order_list_id)
    {
        if (is_null($order_list_id)) {
            throw new \InvalidArgumentException('non-nullable order_list_id cannot be null');
        }
        $this->container['order_list_id'] = $order_list_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty Amount of base asset
     *
     * @return self
     */
    public function setQty($qty)
    {
        if (is_null($qty)) {
            throw new \InvalidArgumentException('non-nullable qty cannot be null');
        }
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets quote_qty
     *
     * @return string
     */
    public function getQuoteQty()
    {
        return $this->container['quote_qty'];
    }

    /**
     * Sets quote_qty
     *
     * @param string $quote_qty Amount of quote asset
     *
     * @return self
     */
    public function setQuoteQty($quote_qty)
    {
        if (is_null($quote_qty)) {
            throw new \InvalidArgumentException('non-nullable quote_qty cannot be null');
        }
        $this->container['quote_qty'] = $quote_qty;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets commission_asset
     *
     * @return string
     */
    public function getCommissionAsset()
    {
        return $this->container['commission_asset'];
    }

    /**
     * Sets commission_asset
     *
     * @param string $commission_asset commission_asset
     *
     * @return self
     */
    public function setCommissionAsset($commission_asset)
    {
        if (is_null($commission_asset)) {
            throw new \InvalidArgumentException('non-nullable commission_asset cannot be null');
        }
        $this->container['commission_asset'] = $commission_asset;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time Trade timestamp
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets is_buyer
     *
     * @return bool
     */
    public function getIsBuyer()
    {
        return $this->container['is_buyer'];
    }

    /**
     * Sets is_buyer
     *
     * @param bool $is_buyer is_buyer
     *
     * @return self
     */
    public function setIsBuyer($is_buyer)
    {
        if (is_null($is_buyer)) {
            throw new \InvalidArgumentException('non-nullable is_buyer cannot be null');
        }
        $this->container['is_buyer'] = $is_buyer;

        return $this;
    }

    /**
     * Gets is_maker
     *
     * @return bool
     */
    public function getIsMaker()
    {
        return $this->container['is_maker'];
    }

    /**
     * Sets is_maker
     *
     * @param bool $is_maker is_maker
     *
     * @return self
     */
    public function setIsMaker($is_maker)
    {
        if (is_null($is_maker)) {
            throw new \InvalidArgumentException('non-nullable is_maker cannot be null');
        }
        $this->container['is_maker'] = $is_maker;

        return $this;
    }

    /**
     * Gets is_best_match
     *
     * @return bool
     */
    public function getIsBestMatch()
    {
        return $this->container['is_best_match'];
    }

    /**
     * Sets is_best_match
     *
     * @param bool $is_best_match is_best_match
     *
     * @return self
     */
    public function setIsBestMatch($is_best_match)
    {
        if (is_null($is_best_match)) {
            throw new \InvalidArgumentException('non-nullable is_best_match cannot be null');
        }
        $this->container['is_best_match'] = $is_best_match;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


