<?php
/**
 * SapiV1LoanLoanableDataGet200ResponseRowsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1LoanLoanableDataGet200ResponseRowsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1LoanLoanableDataGet200ResponseRowsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_loan_loanable_data_get_200_response_rows_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loan_coin' => 'string',
        '_7d_hourly_interest_rate' => 'string',
        '_7d_daily_interest_rate' => 'string',
        '_14d_hourly_interest_rate' => 'string',
        '_14d_daily_interest_rate' => 'string',
        '_30d_hourly_interest_rate' => 'string',
        '_30d_daily_interest_rate' => 'string',
        '_90d_hourly_interest_rate' => 'string',
        '_90d_daily_interest_rate' => 'string',
        '_180d_hourly_interest_rate' => 'string',
        '_180d_daily_interest_rate' => 'string',
        'min_limit' => 'string',
        'max_limit' => 'string',
        'vip_level' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'loan_coin' => null,
        '_7d_hourly_interest_rate' => null,
        '_7d_daily_interest_rate' => null,
        '_14d_hourly_interest_rate' => null,
        '_14d_daily_interest_rate' => null,
        '_30d_hourly_interest_rate' => null,
        '_30d_daily_interest_rate' => null,
        '_90d_hourly_interest_rate' => null,
        '_90d_daily_interest_rate' => null,
        '_180d_hourly_interest_rate' => null,
        '_180d_daily_interest_rate' => null,
        'min_limit' => null,
        'max_limit' => null,
        'vip_level' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'loan_coin' => false,
		'_7d_hourly_interest_rate' => false,
		'_7d_daily_interest_rate' => false,
		'_14d_hourly_interest_rate' => false,
		'_14d_daily_interest_rate' => false,
		'_30d_hourly_interest_rate' => false,
		'_30d_daily_interest_rate' => false,
		'_90d_hourly_interest_rate' => false,
		'_90d_daily_interest_rate' => false,
		'_180d_hourly_interest_rate' => false,
		'_180d_daily_interest_rate' => false,
		'min_limit' => false,
		'max_limit' => false,
		'vip_level' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_coin' => 'loanCoin',
        '_7d_hourly_interest_rate' => '_7dHourlyInterestRate',
        '_7d_daily_interest_rate' => '_7dDailyInterestRate',
        '_14d_hourly_interest_rate' => '_14dHourlyInterestRate',
        '_14d_daily_interest_rate' => '_14dDailyInterestRate',
        '_30d_hourly_interest_rate' => '_30dHourlyInterestRate',
        '_30d_daily_interest_rate' => '_30dDailyInterestRate',
        '_90d_hourly_interest_rate' => '_90dHourlyInterestRate',
        '_90d_daily_interest_rate' => '_90dDailyInterestRate',
        '_180d_hourly_interest_rate' => '_180dHourlyInterestRate',
        '_180d_daily_interest_rate' => '_180dDailyInterestRate',
        'min_limit' => 'minLimit',
        'max_limit' => 'maxLimit',
        'vip_level' => 'vipLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_coin' => 'setLoanCoin',
        '_7d_hourly_interest_rate' => 'set7dHourlyInterestRate',
        '_7d_daily_interest_rate' => 'set7dDailyInterestRate',
        '_14d_hourly_interest_rate' => 'set14dHourlyInterestRate',
        '_14d_daily_interest_rate' => 'set14dDailyInterestRate',
        '_30d_hourly_interest_rate' => 'set30dHourlyInterestRate',
        '_30d_daily_interest_rate' => 'set30dDailyInterestRate',
        '_90d_hourly_interest_rate' => 'set90dHourlyInterestRate',
        '_90d_daily_interest_rate' => 'set90dDailyInterestRate',
        '_180d_hourly_interest_rate' => 'set180dHourlyInterestRate',
        '_180d_daily_interest_rate' => 'set180dDailyInterestRate',
        'min_limit' => 'setMinLimit',
        'max_limit' => 'setMaxLimit',
        'vip_level' => 'setVipLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_coin' => 'getLoanCoin',
        '_7d_hourly_interest_rate' => 'get7dHourlyInterestRate',
        '_7d_daily_interest_rate' => 'get7dDailyInterestRate',
        '_14d_hourly_interest_rate' => 'get14dHourlyInterestRate',
        '_14d_daily_interest_rate' => 'get14dDailyInterestRate',
        '_30d_hourly_interest_rate' => 'get30dHourlyInterestRate',
        '_30d_daily_interest_rate' => 'get30dDailyInterestRate',
        '_90d_hourly_interest_rate' => 'get90dHourlyInterestRate',
        '_90d_daily_interest_rate' => 'get90dDailyInterestRate',
        '_180d_hourly_interest_rate' => 'get180dHourlyInterestRate',
        '_180d_daily_interest_rate' => 'get180dDailyInterestRate',
        'min_limit' => 'getMinLimit',
        'max_limit' => 'getMaxLimit',
        'vip_level' => 'getVipLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('loan_coin', $data ?? [], null);
        $this->setIfExists('_7d_hourly_interest_rate', $data ?? [], null);
        $this->setIfExists('_7d_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('_14d_hourly_interest_rate', $data ?? [], null);
        $this->setIfExists('_14d_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('_30d_hourly_interest_rate', $data ?? [], null);
        $this->setIfExists('_30d_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('_90d_hourly_interest_rate', $data ?? [], null);
        $this->setIfExists('_90d_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('_180d_hourly_interest_rate', $data ?? [], null);
        $this->setIfExists('_180d_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('min_limit', $data ?? [], null);
        $this->setIfExists('max_limit', $data ?? [], null);
        $this->setIfExists('vip_level', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_coin'] === null) {
            $invalidProperties[] = "'loan_coin' can't be null";
        }
        if ($this->container['_7d_hourly_interest_rate'] === null) {
            $invalidProperties[] = "'_7d_hourly_interest_rate' can't be null";
        }
        if ($this->container['_7d_daily_interest_rate'] === null) {
            $invalidProperties[] = "'_7d_daily_interest_rate' can't be null";
        }
        if ($this->container['_14d_hourly_interest_rate'] === null) {
            $invalidProperties[] = "'_14d_hourly_interest_rate' can't be null";
        }
        if ($this->container['_14d_daily_interest_rate'] === null) {
            $invalidProperties[] = "'_14d_daily_interest_rate' can't be null";
        }
        if ($this->container['_30d_hourly_interest_rate'] === null) {
            $invalidProperties[] = "'_30d_hourly_interest_rate' can't be null";
        }
        if ($this->container['_30d_daily_interest_rate'] === null) {
            $invalidProperties[] = "'_30d_daily_interest_rate' can't be null";
        }
        if ($this->container['_90d_hourly_interest_rate'] === null) {
            $invalidProperties[] = "'_90d_hourly_interest_rate' can't be null";
        }
        if ($this->container['_90d_daily_interest_rate'] === null) {
            $invalidProperties[] = "'_90d_daily_interest_rate' can't be null";
        }
        if ($this->container['_180d_hourly_interest_rate'] === null) {
            $invalidProperties[] = "'_180d_hourly_interest_rate' can't be null";
        }
        if ($this->container['_180d_daily_interest_rate'] === null) {
            $invalidProperties[] = "'_180d_daily_interest_rate' can't be null";
        }
        if ($this->container['min_limit'] === null) {
            $invalidProperties[] = "'min_limit' can't be null";
        }
        if ($this->container['max_limit'] === null) {
            $invalidProperties[] = "'max_limit' can't be null";
        }
        if ($this->container['vip_level'] === null) {
            $invalidProperties[] = "'vip_level' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_coin
     *
     * @return string
     */
    public function getLoanCoin()
    {
        return $this->container['loan_coin'];
    }

    /**
     * Sets loan_coin
     *
     * @param string $loan_coin loan_coin
     *
     * @return self
     */
    public function setLoanCoin($loan_coin)
    {
        if (is_null($loan_coin)) {
            throw new \InvalidArgumentException('non-nullable loan_coin cannot be null');
        }
        $this->container['loan_coin'] = $loan_coin;

        return $this;
    }

    /**
     * Gets _7d_hourly_interest_rate
     *
     * @return string
     */
    public function get7dHourlyInterestRate()
    {
        return $this->container['_7d_hourly_interest_rate'];
    }

    /**
     * Sets _7d_hourly_interest_rate
     *
     * @param string $_7d_hourly_interest_rate _7d_hourly_interest_rate
     *
     * @return self
     */
    public function set7dHourlyInterestRate($_7d_hourly_interest_rate)
    {
        if (is_null($_7d_hourly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _7d_hourly_interest_rate cannot be null');
        }
        $this->container['_7d_hourly_interest_rate'] = $_7d_hourly_interest_rate;

        return $this;
    }

    /**
     * Gets _7d_daily_interest_rate
     *
     * @return string
     */
    public function get7dDailyInterestRate()
    {
        return $this->container['_7d_daily_interest_rate'];
    }

    /**
     * Sets _7d_daily_interest_rate
     *
     * @param string $_7d_daily_interest_rate _7d_daily_interest_rate
     *
     * @return self
     */
    public function set7dDailyInterestRate($_7d_daily_interest_rate)
    {
        if (is_null($_7d_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _7d_daily_interest_rate cannot be null');
        }
        $this->container['_7d_daily_interest_rate'] = $_7d_daily_interest_rate;

        return $this;
    }

    /**
     * Gets _14d_hourly_interest_rate
     *
     * @return string
     */
    public function get14dHourlyInterestRate()
    {
        return $this->container['_14d_hourly_interest_rate'];
    }

    /**
     * Sets _14d_hourly_interest_rate
     *
     * @param string $_14d_hourly_interest_rate _14d_hourly_interest_rate
     *
     * @return self
     */
    public function set14dHourlyInterestRate($_14d_hourly_interest_rate)
    {
        if (is_null($_14d_hourly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _14d_hourly_interest_rate cannot be null');
        }
        $this->container['_14d_hourly_interest_rate'] = $_14d_hourly_interest_rate;

        return $this;
    }

    /**
     * Gets _14d_daily_interest_rate
     *
     * @return string
     */
    public function get14dDailyInterestRate()
    {
        return $this->container['_14d_daily_interest_rate'];
    }

    /**
     * Sets _14d_daily_interest_rate
     *
     * @param string $_14d_daily_interest_rate _14d_daily_interest_rate
     *
     * @return self
     */
    public function set14dDailyInterestRate($_14d_daily_interest_rate)
    {
        if (is_null($_14d_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _14d_daily_interest_rate cannot be null');
        }
        $this->container['_14d_daily_interest_rate'] = $_14d_daily_interest_rate;

        return $this;
    }

    /**
     * Gets _30d_hourly_interest_rate
     *
     * @return string
     */
    public function get30dHourlyInterestRate()
    {
        return $this->container['_30d_hourly_interest_rate'];
    }

    /**
     * Sets _30d_hourly_interest_rate
     *
     * @param string $_30d_hourly_interest_rate _30d_hourly_interest_rate
     *
     * @return self
     */
    public function set30dHourlyInterestRate($_30d_hourly_interest_rate)
    {
        if (is_null($_30d_hourly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _30d_hourly_interest_rate cannot be null');
        }
        $this->container['_30d_hourly_interest_rate'] = $_30d_hourly_interest_rate;

        return $this;
    }

    /**
     * Gets _30d_daily_interest_rate
     *
     * @return string
     */
    public function get30dDailyInterestRate()
    {
        return $this->container['_30d_daily_interest_rate'];
    }

    /**
     * Sets _30d_daily_interest_rate
     *
     * @param string $_30d_daily_interest_rate _30d_daily_interest_rate
     *
     * @return self
     */
    public function set30dDailyInterestRate($_30d_daily_interest_rate)
    {
        if (is_null($_30d_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _30d_daily_interest_rate cannot be null');
        }
        $this->container['_30d_daily_interest_rate'] = $_30d_daily_interest_rate;

        return $this;
    }

    /**
     * Gets _90d_hourly_interest_rate
     *
     * @return string
     */
    public function get90dHourlyInterestRate()
    {
        return $this->container['_90d_hourly_interest_rate'];
    }

    /**
     * Sets _90d_hourly_interest_rate
     *
     * @param string $_90d_hourly_interest_rate _90d_hourly_interest_rate
     *
     * @return self
     */
    public function set90dHourlyInterestRate($_90d_hourly_interest_rate)
    {
        if (is_null($_90d_hourly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _90d_hourly_interest_rate cannot be null');
        }
        $this->container['_90d_hourly_interest_rate'] = $_90d_hourly_interest_rate;

        return $this;
    }

    /**
     * Gets _90d_daily_interest_rate
     *
     * @return string
     */
    public function get90dDailyInterestRate()
    {
        return $this->container['_90d_daily_interest_rate'];
    }

    /**
     * Sets _90d_daily_interest_rate
     *
     * @param string $_90d_daily_interest_rate _90d_daily_interest_rate
     *
     * @return self
     */
    public function set90dDailyInterestRate($_90d_daily_interest_rate)
    {
        if (is_null($_90d_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _90d_daily_interest_rate cannot be null');
        }
        $this->container['_90d_daily_interest_rate'] = $_90d_daily_interest_rate;

        return $this;
    }

    /**
     * Gets _180d_hourly_interest_rate
     *
     * @return string
     */
    public function get180dHourlyInterestRate()
    {
        return $this->container['_180d_hourly_interest_rate'];
    }

    /**
     * Sets _180d_hourly_interest_rate
     *
     * @param string $_180d_hourly_interest_rate _180d_hourly_interest_rate
     *
     * @return self
     */
    public function set180dHourlyInterestRate($_180d_hourly_interest_rate)
    {
        if (is_null($_180d_hourly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _180d_hourly_interest_rate cannot be null');
        }
        $this->container['_180d_hourly_interest_rate'] = $_180d_hourly_interest_rate;

        return $this;
    }

    /**
     * Gets _180d_daily_interest_rate
     *
     * @return string
     */
    public function get180dDailyInterestRate()
    {
        return $this->container['_180d_daily_interest_rate'];
    }

    /**
     * Sets _180d_daily_interest_rate
     *
     * @param string $_180d_daily_interest_rate _180d_daily_interest_rate
     *
     * @return self
     */
    public function set180dDailyInterestRate($_180d_daily_interest_rate)
    {
        if (is_null($_180d_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable _180d_daily_interest_rate cannot be null');
        }
        $this->container['_180d_daily_interest_rate'] = $_180d_daily_interest_rate;

        return $this;
    }

    /**
     * Gets min_limit
     *
     * @return string
     */
    public function getMinLimit()
    {
        return $this->container['min_limit'];
    }

    /**
     * Sets min_limit
     *
     * @param string $min_limit min_limit
     *
     * @return self
     */
    public function setMinLimit($min_limit)
    {
        if (is_null($min_limit)) {
            throw new \InvalidArgumentException('non-nullable min_limit cannot be null');
        }
        $this->container['min_limit'] = $min_limit;

        return $this;
    }

    /**
     * Gets max_limit
     *
     * @return string
     */
    public function getMaxLimit()
    {
        return $this->container['max_limit'];
    }

    /**
     * Sets max_limit
     *
     * @param string $max_limit max_limit
     *
     * @return self
     */
    public function setMaxLimit($max_limit)
    {
        if (is_null($max_limit)) {
            throw new \InvalidArgumentException('non-nullable max_limit cannot be null');
        }
        $this->container['max_limit'] = $max_limit;

        return $this;
    }

    /**
     * Gets vip_level
     *
     * @return int
     */
    public function getVipLevel()
    {
        return $this->container['vip_level'];
    }

    /**
     * Sets vip_level
     *
     * @param int $vip_level vip_level
     *
     * @return self
     */
    public function setVipLevel($vip_level)
    {
        if (is_null($vip_level)) {
            throw new \InvalidArgumentException('non-nullable vip_level cannot be null');
        }
        $this->container['vip_level'] = $vip_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


