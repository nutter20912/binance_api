<?php
/**
 * SubAccountCOINFuturesDetailsAssetsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubAccountCOINFuturesDetailsAssetsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubAccountCOINFuturesDetailsAssetsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subAccountCOINFuturesDetails_assets_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset' => 'string',
        'initial_margin' => 'string',
        'maintenance_margin' => 'string',
        'margin_balance' => 'string',
        'max_withdraw_amount' => 'string',
        'open_order_initial_margin' => 'string',
        'position_initial_margin' => 'string',
        'unrealized_profit' => 'string',
        'wallet_balance' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asset' => null,
        'initial_margin' => null,
        'maintenance_margin' => null,
        'margin_balance' => null,
        'max_withdraw_amount' => null,
        'open_order_initial_margin' => null,
        'position_initial_margin' => null,
        'unrealized_profit' => null,
        'wallet_balance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'asset' => false,
		'initial_margin' => false,
		'maintenance_margin' => false,
		'margin_balance' => false,
		'max_withdraw_amount' => false,
		'open_order_initial_margin' => false,
		'position_initial_margin' => false,
		'unrealized_profit' => false,
		'wallet_balance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'initial_margin' => 'initialMargin',
        'maintenance_margin' => 'maintenanceMargin',
        'margin_balance' => 'marginBalance',
        'max_withdraw_amount' => 'maxWithdrawAmount',
        'open_order_initial_margin' => 'openOrderInitialMargin',
        'position_initial_margin' => 'positionInitialMargin',
        'unrealized_profit' => 'unrealizedProfit',
        'wallet_balance' => 'walletBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'initial_margin' => 'setInitialMargin',
        'maintenance_margin' => 'setMaintenanceMargin',
        'margin_balance' => 'setMarginBalance',
        'max_withdraw_amount' => 'setMaxWithdrawAmount',
        'open_order_initial_margin' => 'setOpenOrderInitialMargin',
        'position_initial_margin' => 'setPositionInitialMargin',
        'unrealized_profit' => 'setUnrealizedProfit',
        'wallet_balance' => 'setWalletBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'initial_margin' => 'getInitialMargin',
        'maintenance_margin' => 'getMaintenanceMargin',
        'margin_balance' => 'getMarginBalance',
        'max_withdraw_amount' => 'getMaxWithdrawAmount',
        'open_order_initial_margin' => 'getOpenOrderInitialMargin',
        'position_initial_margin' => 'getPositionInitialMargin',
        'unrealized_profit' => 'getUnrealizedProfit',
        'wallet_balance' => 'getWalletBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('initial_margin', $data ?? [], null);
        $this->setIfExists('maintenance_margin', $data ?? [], null);
        $this->setIfExists('margin_balance', $data ?? [], null);
        $this->setIfExists('max_withdraw_amount', $data ?? [], null);
        $this->setIfExists('open_order_initial_margin', $data ?? [], null);
        $this->setIfExists('position_initial_margin', $data ?? [], null);
        $this->setIfExists('unrealized_profit', $data ?? [], null);
        $this->setIfExists('wallet_balance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['initial_margin'] === null) {
            $invalidProperties[] = "'initial_margin' can't be null";
        }
        if ($this->container['maintenance_margin'] === null) {
            $invalidProperties[] = "'maintenance_margin' can't be null";
        }
        if ($this->container['margin_balance'] === null) {
            $invalidProperties[] = "'margin_balance' can't be null";
        }
        if ($this->container['max_withdraw_amount'] === null) {
            $invalidProperties[] = "'max_withdraw_amount' can't be null";
        }
        if ($this->container['open_order_initial_margin'] === null) {
            $invalidProperties[] = "'open_order_initial_margin' can't be null";
        }
        if ($this->container['position_initial_margin'] === null) {
            $invalidProperties[] = "'position_initial_margin' can't be null";
        }
        if ($this->container['unrealized_profit'] === null) {
            $invalidProperties[] = "'unrealized_profit' can't be null";
        }
        if ($this->container['wallet_balance'] === null) {
            $invalidProperties[] = "'wallet_balance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets initial_margin
     *
     * @return string
     */
    public function getInitialMargin()
    {
        return $this->container['initial_margin'];
    }

    /**
     * Sets initial_margin
     *
     * @param string $initial_margin initial_margin
     *
     * @return self
     */
    public function setInitialMargin($initial_margin)
    {
        if (is_null($initial_margin)) {
            throw new \InvalidArgumentException('non-nullable initial_margin cannot be null');
        }
        $this->container['initial_margin'] = $initial_margin;

        return $this;
    }

    /**
     * Gets maintenance_margin
     *
     * @return string
     */
    public function getMaintenanceMargin()
    {
        return $this->container['maintenance_margin'];
    }

    /**
     * Sets maintenance_margin
     *
     * @param string $maintenance_margin maintenance_margin
     *
     * @return self
     */
    public function setMaintenanceMargin($maintenance_margin)
    {
        if (is_null($maintenance_margin)) {
            throw new \InvalidArgumentException('non-nullable maintenance_margin cannot be null');
        }
        $this->container['maintenance_margin'] = $maintenance_margin;

        return $this;
    }

    /**
     * Gets margin_balance
     *
     * @return string
     */
    public function getMarginBalance()
    {
        return $this->container['margin_balance'];
    }

    /**
     * Sets margin_balance
     *
     * @param string $margin_balance margin_balance
     *
     * @return self
     */
    public function setMarginBalance($margin_balance)
    {
        if (is_null($margin_balance)) {
            throw new \InvalidArgumentException('non-nullable margin_balance cannot be null');
        }
        $this->container['margin_balance'] = $margin_balance;

        return $this;
    }

    /**
     * Gets max_withdraw_amount
     *
     * @return string
     */
    public function getMaxWithdrawAmount()
    {
        return $this->container['max_withdraw_amount'];
    }

    /**
     * Sets max_withdraw_amount
     *
     * @param string $max_withdraw_amount max_withdraw_amount
     *
     * @return self
     */
    public function setMaxWithdrawAmount($max_withdraw_amount)
    {
        if (is_null($max_withdraw_amount)) {
            throw new \InvalidArgumentException('non-nullable max_withdraw_amount cannot be null');
        }
        $this->container['max_withdraw_amount'] = $max_withdraw_amount;

        return $this;
    }

    /**
     * Gets open_order_initial_margin
     *
     * @return string
     */
    public function getOpenOrderInitialMargin()
    {
        return $this->container['open_order_initial_margin'];
    }

    /**
     * Sets open_order_initial_margin
     *
     * @param string $open_order_initial_margin open_order_initial_margin
     *
     * @return self
     */
    public function setOpenOrderInitialMargin($open_order_initial_margin)
    {
        if (is_null($open_order_initial_margin)) {
            throw new \InvalidArgumentException('non-nullable open_order_initial_margin cannot be null');
        }
        $this->container['open_order_initial_margin'] = $open_order_initial_margin;

        return $this;
    }

    /**
     * Gets position_initial_margin
     *
     * @return string
     */
    public function getPositionInitialMargin()
    {
        return $this->container['position_initial_margin'];
    }

    /**
     * Sets position_initial_margin
     *
     * @param string $position_initial_margin position_initial_margin
     *
     * @return self
     */
    public function setPositionInitialMargin($position_initial_margin)
    {
        if (is_null($position_initial_margin)) {
            throw new \InvalidArgumentException('non-nullable position_initial_margin cannot be null');
        }
        $this->container['position_initial_margin'] = $position_initial_margin;

        return $this;
    }

    /**
     * Gets unrealized_profit
     *
     * @return string
     */
    public function getUnrealizedProfit()
    {
        return $this->container['unrealized_profit'];
    }

    /**
     * Sets unrealized_profit
     *
     * @param string $unrealized_profit unrealized_profit
     *
     * @return self
     */
    public function setUnrealizedProfit($unrealized_profit)
    {
        if (is_null($unrealized_profit)) {
            throw new \InvalidArgumentException('non-nullable unrealized_profit cannot be null');
        }
        $this->container['unrealized_profit'] = $unrealized_profit;

        return $this;
    }

    /**
     * Gets wallet_balance
     *
     * @return string
     */
    public function getWalletBalance()
    {
        return $this->container['wallet_balance'];
    }

    /**
     * Sets wallet_balance
     *
     * @param string $wallet_balance wallet_balance
     *
     * @return self
     */
    public function setWalletBalance($wallet_balance)
    {
        if (is_null($wallet_balance)) {
            throw new \InvalidArgumentException('non-nullable wallet_balance cannot be null');
        }
        $this->container['wallet_balance'] = $wallet_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


