<?php
/**
 * SapiV1FuturesLoanBorrowHistoryGet200ResponseRowsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1FuturesLoanBorrowHistoryGet200ResponseRowsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1FuturesLoanBorrowHistoryGet200ResponseRowsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_futures_loan_borrow_history_get_200_response_rows_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'confirmed_time' => 'int',
        'coin' => 'string',
        'collateral_rate' => 'string',
        'left_total' => 'string',
        'left_principal' => 'string',
        'deadline' => 'int',
        'collateral_coin' => 'string',
        'collateral_amount' => 'string',
        'order_status' => 'string',
        'borrow_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'confirmed_time' => 'int64',
        'coin' => null,
        'collateral_rate' => null,
        'left_total' => null,
        'left_principal' => null,
        'deadline' => 'int64',
        'collateral_coin' => null,
        'collateral_amount' => null,
        'order_status' => null,
        'borrow_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'confirmed_time' => false,
		'coin' => false,
		'collateral_rate' => false,
		'left_total' => false,
		'left_principal' => false,
		'deadline' => false,
		'collateral_coin' => false,
		'collateral_amount' => false,
		'order_status' => false,
		'borrow_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'confirmed_time' => 'confirmedTime',
        'coin' => 'coin',
        'collateral_rate' => 'collateralRate',
        'left_total' => 'leftTotal',
        'left_principal' => 'leftPrincipal',
        'deadline' => 'deadline',
        'collateral_coin' => 'collateralCoin',
        'collateral_amount' => 'collateralAmount',
        'order_status' => 'orderStatus',
        'borrow_id' => 'borrowId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'confirmed_time' => 'setConfirmedTime',
        'coin' => 'setCoin',
        'collateral_rate' => 'setCollateralRate',
        'left_total' => 'setLeftTotal',
        'left_principal' => 'setLeftPrincipal',
        'deadline' => 'setDeadline',
        'collateral_coin' => 'setCollateralCoin',
        'collateral_amount' => 'setCollateralAmount',
        'order_status' => 'setOrderStatus',
        'borrow_id' => 'setBorrowId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'confirmed_time' => 'getConfirmedTime',
        'coin' => 'getCoin',
        'collateral_rate' => 'getCollateralRate',
        'left_total' => 'getLeftTotal',
        'left_principal' => 'getLeftPrincipal',
        'deadline' => 'getDeadline',
        'collateral_coin' => 'getCollateralCoin',
        'collateral_amount' => 'getCollateralAmount',
        'order_status' => 'getOrderStatus',
        'borrow_id' => 'getBorrowId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('confirmed_time', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('collateral_rate', $data ?? [], null);
        $this->setIfExists('left_total', $data ?? [], null);
        $this->setIfExists('left_principal', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('collateral_coin', $data ?? [], null);
        $this->setIfExists('collateral_amount', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('borrow_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['confirmed_time'] === null) {
            $invalidProperties[] = "'confirmed_time' can't be null";
        }
        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['collateral_rate'] === null) {
            $invalidProperties[] = "'collateral_rate' can't be null";
        }
        if ($this->container['left_total'] === null) {
            $invalidProperties[] = "'left_total' can't be null";
        }
        if ($this->container['left_principal'] === null) {
            $invalidProperties[] = "'left_principal' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['collateral_coin'] === null) {
            $invalidProperties[] = "'collateral_coin' can't be null";
        }
        if ($this->container['collateral_amount'] === null) {
            $invalidProperties[] = "'collateral_amount' can't be null";
        }
        if ($this->container['order_status'] === null) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        if ($this->container['borrow_id'] === null) {
            $invalidProperties[] = "'borrow_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets confirmed_time
     *
     * @return int
     */
    public function getConfirmedTime()
    {
        return $this->container['confirmed_time'];
    }

    /**
     * Sets confirmed_time
     *
     * @param int $confirmed_time confirmed_time
     *
     * @return self
     */
    public function setConfirmedTime($confirmed_time)
    {
        if (is_null($confirmed_time)) {
            throw new \InvalidArgumentException('non-nullable confirmed_time cannot be null');
        }
        $this->container['confirmed_time'] = $confirmed_time;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets collateral_rate
     *
     * @return string
     */
    public function getCollateralRate()
    {
        return $this->container['collateral_rate'];
    }

    /**
     * Sets collateral_rate
     *
     * @param string $collateral_rate collateral_rate
     *
     * @return self
     */
    public function setCollateralRate($collateral_rate)
    {
        if (is_null($collateral_rate)) {
            throw new \InvalidArgumentException('non-nullable collateral_rate cannot be null');
        }
        $this->container['collateral_rate'] = $collateral_rate;

        return $this;
    }

    /**
     * Gets left_total
     *
     * @return string
     */
    public function getLeftTotal()
    {
        return $this->container['left_total'];
    }

    /**
     * Sets left_total
     *
     * @param string $left_total left_total
     *
     * @return self
     */
    public function setLeftTotal($left_total)
    {
        if (is_null($left_total)) {
            throw new \InvalidArgumentException('non-nullable left_total cannot be null');
        }
        $this->container['left_total'] = $left_total;

        return $this;
    }

    /**
     * Gets left_principal
     *
     * @return string
     */
    public function getLeftPrincipal()
    {
        return $this->container['left_principal'];
    }

    /**
     * Sets left_principal
     *
     * @param string $left_principal left_principal
     *
     * @return self
     */
    public function setLeftPrincipal($left_principal)
    {
        if (is_null($left_principal)) {
            throw new \InvalidArgumentException('non-nullable left_principal cannot be null');
        }
        $this->container['left_principal'] = $left_principal;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return int
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param int $deadline deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            throw new \InvalidArgumentException('non-nullable deadline cannot be null');
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets collateral_coin
     *
     * @return string
     */
    public function getCollateralCoin()
    {
        return $this->container['collateral_coin'];
    }

    /**
     * Sets collateral_coin
     *
     * @param string $collateral_coin collateral_coin
     *
     * @return self
     */
    public function setCollateralCoin($collateral_coin)
    {
        if (is_null($collateral_coin)) {
            throw new \InvalidArgumentException('non-nullable collateral_coin cannot be null');
        }
        $this->container['collateral_coin'] = $collateral_coin;

        return $this;
    }

    /**
     * Gets collateral_amount
     *
     * @return string
     */
    public function getCollateralAmount()
    {
        return $this->container['collateral_amount'];
    }

    /**
     * Sets collateral_amount
     *
     * @param string $collateral_amount collateral_amount
     *
     * @return self
     */
    public function setCollateralAmount($collateral_amount)
    {
        if (is_null($collateral_amount)) {
            throw new \InvalidArgumentException('non-nullable collateral_amount cannot be null');
        }
        $this->container['collateral_amount'] = $collateral_amount;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets borrow_id
     *
     * @return string
     */
    public function getBorrowId()
    {
        return $this->container['borrow_id'];
    }

    /**
     * Sets borrow_id
     *
     * @param string $borrow_id borrow_id
     *
     * @return self
     */
    public function setBorrowId($borrow_id)
    {
        if (is_null($borrow_id)) {
            throw new \InvalidArgumentException('non-nullable borrow_id cannot be null');
        }
        $this->container['borrow_id'] = $borrow_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


