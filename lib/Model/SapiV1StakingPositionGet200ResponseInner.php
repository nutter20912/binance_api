<?php
/**
 * SapiV1StakingPositionGet200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1StakingPositionGet200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1StakingPositionGet200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_staking_position_get_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'position_id' => 'string',
        'project_id' => 'string',
        'asset' => 'string',
        'amount' => 'string',
        'purchase_time' => 'string',
        'duration' => 'string',
        'accrual_days' => 'string',
        'reward_asset' => 'string',
        'apy' => 'string',
        'reward_amt' => 'string',
        'extra_reward_asset' => 'string',
        'extra_reward_apy' => 'string',
        'est_extra_reward_amt' => 'string',
        'next_interest_pay' => 'string',
        'next_interest_pay_date' => 'string',
        'pay_interest_period' => 'string',
        'redeem_amount_early' => 'string',
        'interest_end_date' => 'string',
        'deliver_date' => 'string',
        'redeem_period' => 'string',
        'redeeming_amt' => 'string',
        'partial_amt_deliver_date' => 'string',
        'can_redeem_early' => 'bool',
        'renewable' => 'bool',
        'type' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'position_id' => null,
        'project_id' => null,
        'asset' => null,
        'amount' => null,
        'purchase_time' => null,
        'duration' => null,
        'accrual_days' => null,
        'reward_asset' => null,
        'apy' => null,
        'reward_amt' => null,
        'extra_reward_asset' => null,
        'extra_reward_apy' => null,
        'est_extra_reward_amt' => null,
        'next_interest_pay' => null,
        'next_interest_pay_date' => null,
        'pay_interest_period' => null,
        'redeem_amount_early' => null,
        'interest_end_date' => null,
        'deliver_date' => null,
        'redeem_period' => null,
        'redeeming_amt' => null,
        'partial_amt_deliver_date' => null,
        'can_redeem_early' => null,
        'renewable' => null,
        'type' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'position_id' => false,
		'project_id' => false,
		'asset' => false,
		'amount' => false,
		'purchase_time' => false,
		'duration' => false,
		'accrual_days' => false,
		'reward_asset' => false,
		'apy' => false,
		'reward_amt' => false,
		'extra_reward_asset' => false,
		'extra_reward_apy' => false,
		'est_extra_reward_amt' => false,
		'next_interest_pay' => false,
		'next_interest_pay_date' => false,
		'pay_interest_period' => false,
		'redeem_amount_early' => false,
		'interest_end_date' => false,
		'deliver_date' => false,
		'redeem_period' => false,
		'redeeming_amt' => false,
		'partial_amt_deliver_date' => false,
		'can_redeem_early' => false,
		'renewable' => false,
		'type' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position_id' => 'positionId',
        'project_id' => 'projectId',
        'asset' => 'asset',
        'amount' => 'amount',
        'purchase_time' => 'purchaseTime',
        'duration' => 'duration',
        'accrual_days' => 'accrualDays',
        'reward_asset' => 'rewardAsset',
        'apy' => 'APY',
        'reward_amt' => 'rewardAmt',
        'extra_reward_asset' => 'extraRewardAsset',
        'extra_reward_apy' => 'extraRewardAPY',
        'est_extra_reward_amt' => 'estExtraRewardAmt',
        'next_interest_pay' => 'nextInterestPay',
        'next_interest_pay_date' => 'nextInterestPayDate',
        'pay_interest_period' => 'payInterestPeriod',
        'redeem_amount_early' => 'redeemAmountEarly',
        'interest_end_date' => 'interestEndDate',
        'deliver_date' => 'deliverDate',
        'redeem_period' => 'redeemPeriod',
        'redeeming_amt' => 'redeemingAmt',
        'partial_amt_deliver_date' => 'partialAmtDeliverDate',
        'can_redeem_early' => 'canRedeemEarly',
        'renewable' => 'renewable',
        'type' => 'type',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position_id' => 'setPositionId',
        'project_id' => 'setProjectId',
        'asset' => 'setAsset',
        'amount' => 'setAmount',
        'purchase_time' => 'setPurchaseTime',
        'duration' => 'setDuration',
        'accrual_days' => 'setAccrualDays',
        'reward_asset' => 'setRewardAsset',
        'apy' => 'setApy',
        'reward_amt' => 'setRewardAmt',
        'extra_reward_asset' => 'setExtraRewardAsset',
        'extra_reward_apy' => 'setExtraRewardApy',
        'est_extra_reward_amt' => 'setEstExtraRewardAmt',
        'next_interest_pay' => 'setNextInterestPay',
        'next_interest_pay_date' => 'setNextInterestPayDate',
        'pay_interest_period' => 'setPayInterestPeriod',
        'redeem_amount_early' => 'setRedeemAmountEarly',
        'interest_end_date' => 'setInterestEndDate',
        'deliver_date' => 'setDeliverDate',
        'redeem_period' => 'setRedeemPeriod',
        'redeeming_amt' => 'setRedeemingAmt',
        'partial_amt_deliver_date' => 'setPartialAmtDeliverDate',
        'can_redeem_early' => 'setCanRedeemEarly',
        'renewable' => 'setRenewable',
        'type' => 'setType',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position_id' => 'getPositionId',
        'project_id' => 'getProjectId',
        'asset' => 'getAsset',
        'amount' => 'getAmount',
        'purchase_time' => 'getPurchaseTime',
        'duration' => 'getDuration',
        'accrual_days' => 'getAccrualDays',
        'reward_asset' => 'getRewardAsset',
        'apy' => 'getApy',
        'reward_amt' => 'getRewardAmt',
        'extra_reward_asset' => 'getExtraRewardAsset',
        'extra_reward_apy' => 'getExtraRewardApy',
        'est_extra_reward_amt' => 'getEstExtraRewardAmt',
        'next_interest_pay' => 'getNextInterestPay',
        'next_interest_pay_date' => 'getNextInterestPayDate',
        'pay_interest_period' => 'getPayInterestPeriod',
        'redeem_amount_early' => 'getRedeemAmountEarly',
        'interest_end_date' => 'getInterestEndDate',
        'deliver_date' => 'getDeliverDate',
        'redeem_period' => 'getRedeemPeriod',
        'redeeming_amt' => 'getRedeemingAmt',
        'partial_amt_deliver_date' => 'getPartialAmtDeliverDate',
        'can_redeem_early' => 'getCanRedeemEarly',
        'renewable' => 'getRenewable',
        'type' => 'getType',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('purchase_time', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('accrual_days', $data ?? [], null);
        $this->setIfExists('reward_asset', $data ?? [], null);
        $this->setIfExists('apy', $data ?? [], null);
        $this->setIfExists('reward_amt', $data ?? [], null);
        $this->setIfExists('extra_reward_asset', $data ?? [], null);
        $this->setIfExists('extra_reward_apy', $data ?? [], null);
        $this->setIfExists('est_extra_reward_amt', $data ?? [], null);
        $this->setIfExists('next_interest_pay', $data ?? [], null);
        $this->setIfExists('next_interest_pay_date', $data ?? [], null);
        $this->setIfExists('pay_interest_period', $data ?? [], null);
        $this->setIfExists('redeem_amount_early', $data ?? [], null);
        $this->setIfExists('interest_end_date', $data ?? [], null);
        $this->setIfExists('deliver_date', $data ?? [], null);
        $this->setIfExists('redeem_period', $data ?? [], null);
        $this->setIfExists('redeeming_amt', $data ?? [], null);
        $this->setIfExists('partial_amt_deliver_date', $data ?? [], null);
        $this->setIfExists('can_redeem_early', $data ?? [], null);
        $this->setIfExists('renewable', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['position_id'] === null) {
            $invalidProperties[] = "'position_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['purchase_time'] === null) {
            $invalidProperties[] = "'purchase_time' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['accrual_days'] === null) {
            $invalidProperties[] = "'accrual_days' can't be null";
        }
        if ($this->container['reward_asset'] === null) {
            $invalidProperties[] = "'reward_asset' can't be null";
        }
        if ($this->container['apy'] === null) {
            $invalidProperties[] = "'apy' can't be null";
        }
        if ($this->container['reward_amt'] === null) {
            $invalidProperties[] = "'reward_amt' can't be null";
        }
        if ($this->container['extra_reward_asset'] === null) {
            $invalidProperties[] = "'extra_reward_asset' can't be null";
        }
        if ($this->container['extra_reward_apy'] === null) {
            $invalidProperties[] = "'extra_reward_apy' can't be null";
        }
        if ($this->container['est_extra_reward_amt'] === null) {
            $invalidProperties[] = "'est_extra_reward_amt' can't be null";
        }
        if ($this->container['next_interest_pay'] === null) {
            $invalidProperties[] = "'next_interest_pay' can't be null";
        }
        if ($this->container['next_interest_pay_date'] === null) {
            $invalidProperties[] = "'next_interest_pay_date' can't be null";
        }
        if ($this->container['pay_interest_period'] === null) {
            $invalidProperties[] = "'pay_interest_period' can't be null";
        }
        if ($this->container['redeem_amount_early'] === null) {
            $invalidProperties[] = "'redeem_amount_early' can't be null";
        }
        if ($this->container['interest_end_date'] === null) {
            $invalidProperties[] = "'interest_end_date' can't be null";
        }
        if ($this->container['deliver_date'] === null) {
            $invalidProperties[] = "'deliver_date' can't be null";
        }
        if ($this->container['redeem_period'] === null) {
            $invalidProperties[] = "'redeem_period' can't be null";
        }
        if ($this->container['redeeming_amt'] === null) {
            $invalidProperties[] = "'redeeming_amt' can't be null";
        }
        if ($this->container['partial_amt_deliver_date'] === null) {
            $invalidProperties[] = "'partial_amt_deliver_date' can't be null";
        }
        if ($this->container['can_redeem_early'] === null) {
            $invalidProperties[] = "'can_redeem_early' can't be null";
        }
        if ($this->container['renewable'] === null) {
            $invalidProperties[] = "'renewable' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position_id
     *
     * @return string
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param string $position_id position_id
     *
     * @return self
     */
    public function setPositionId($position_id)
    {
        if (is_null($position_id)) {
            throw new \InvalidArgumentException('non-nullable position_id cannot be null');
        }
        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets purchase_time
     *
     * @return string
     */
    public function getPurchaseTime()
    {
        return $this->container['purchase_time'];
    }

    /**
     * Sets purchase_time
     *
     * @param string $purchase_time purchase_time
     *
     * @return self
     */
    public function setPurchaseTime($purchase_time)
    {
        if (is_null($purchase_time)) {
            throw new \InvalidArgumentException('non-nullable purchase_time cannot be null');
        }
        $this->container['purchase_time'] = $purchase_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets accrual_days
     *
     * @return string
     */
    public function getAccrualDays()
    {
        return $this->container['accrual_days'];
    }

    /**
     * Sets accrual_days
     *
     * @param string $accrual_days accrual_days
     *
     * @return self
     */
    public function setAccrualDays($accrual_days)
    {
        if (is_null($accrual_days)) {
            throw new \InvalidArgumentException('non-nullable accrual_days cannot be null');
        }
        $this->container['accrual_days'] = $accrual_days;

        return $this;
    }

    /**
     * Gets reward_asset
     *
     * @return string
     */
    public function getRewardAsset()
    {
        return $this->container['reward_asset'];
    }

    /**
     * Sets reward_asset
     *
     * @param string $reward_asset reward_asset
     *
     * @return self
     */
    public function setRewardAsset($reward_asset)
    {
        if (is_null($reward_asset)) {
            throw new \InvalidArgumentException('non-nullable reward_asset cannot be null');
        }
        $this->container['reward_asset'] = $reward_asset;

        return $this;
    }

    /**
     * Gets apy
     *
     * @return string
     */
    public function getApy()
    {
        return $this->container['apy'];
    }

    /**
     * Sets apy
     *
     * @param string $apy apy
     *
     * @return self
     */
    public function setApy($apy)
    {
        if (is_null($apy)) {
            throw new \InvalidArgumentException('non-nullable apy cannot be null');
        }
        $this->container['apy'] = $apy;

        return $this;
    }

    /**
     * Gets reward_amt
     *
     * @return string
     */
    public function getRewardAmt()
    {
        return $this->container['reward_amt'];
    }

    /**
     * Sets reward_amt
     *
     * @param string $reward_amt reward_amt
     *
     * @return self
     */
    public function setRewardAmt($reward_amt)
    {
        if (is_null($reward_amt)) {
            throw new \InvalidArgumentException('non-nullable reward_amt cannot be null');
        }
        $this->container['reward_amt'] = $reward_amt;

        return $this;
    }

    /**
     * Gets extra_reward_asset
     *
     * @return string
     */
    public function getExtraRewardAsset()
    {
        return $this->container['extra_reward_asset'];
    }

    /**
     * Sets extra_reward_asset
     *
     * @param string $extra_reward_asset extra_reward_asset
     *
     * @return self
     */
    public function setExtraRewardAsset($extra_reward_asset)
    {
        if (is_null($extra_reward_asset)) {
            throw new \InvalidArgumentException('non-nullable extra_reward_asset cannot be null');
        }
        $this->container['extra_reward_asset'] = $extra_reward_asset;

        return $this;
    }

    /**
     * Gets extra_reward_apy
     *
     * @return string
     */
    public function getExtraRewardApy()
    {
        return $this->container['extra_reward_apy'];
    }

    /**
     * Sets extra_reward_apy
     *
     * @param string $extra_reward_apy extra_reward_apy
     *
     * @return self
     */
    public function setExtraRewardApy($extra_reward_apy)
    {
        if (is_null($extra_reward_apy)) {
            throw new \InvalidArgumentException('non-nullable extra_reward_apy cannot be null');
        }
        $this->container['extra_reward_apy'] = $extra_reward_apy;

        return $this;
    }

    /**
     * Gets est_extra_reward_amt
     *
     * @return string
     */
    public function getEstExtraRewardAmt()
    {
        return $this->container['est_extra_reward_amt'];
    }

    /**
     * Sets est_extra_reward_amt
     *
     * @param string $est_extra_reward_amt est_extra_reward_amt
     *
     * @return self
     */
    public function setEstExtraRewardAmt($est_extra_reward_amt)
    {
        if (is_null($est_extra_reward_amt)) {
            throw new \InvalidArgumentException('non-nullable est_extra_reward_amt cannot be null');
        }
        $this->container['est_extra_reward_amt'] = $est_extra_reward_amt;

        return $this;
    }

    /**
     * Gets next_interest_pay
     *
     * @return string
     */
    public function getNextInterestPay()
    {
        return $this->container['next_interest_pay'];
    }

    /**
     * Sets next_interest_pay
     *
     * @param string $next_interest_pay next_interest_pay
     *
     * @return self
     */
    public function setNextInterestPay($next_interest_pay)
    {
        if (is_null($next_interest_pay)) {
            throw new \InvalidArgumentException('non-nullable next_interest_pay cannot be null');
        }
        $this->container['next_interest_pay'] = $next_interest_pay;

        return $this;
    }

    /**
     * Gets next_interest_pay_date
     *
     * @return string
     */
    public function getNextInterestPayDate()
    {
        return $this->container['next_interest_pay_date'];
    }

    /**
     * Sets next_interest_pay_date
     *
     * @param string $next_interest_pay_date next_interest_pay_date
     *
     * @return self
     */
    public function setNextInterestPayDate($next_interest_pay_date)
    {
        if (is_null($next_interest_pay_date)) {
            throw new \InvalidArgumentException('non-nullable next_interest_pay_date cannot be null');
        }
        $this->container['next_interest_pay_date'] = $next_interest_pay_date;

        return $this;
    }

    /**
     * Gets pay_interest_period
     *
     * @return string
     */
    public function getPayInterestPeriod()
    {
        return $this->container['pay_interest_period'];
    }

    /**
     * Sets pay_interest_period
     *
     * @param string $pay_interest_period pay_interest_period
     *
     * @return self
     */
    public function setPayInterestPeriod($pay_interest_period)
    {
        if (is_null($pay_interest_period)) {
            throw new \InvalidArgumentException('non-nullable pay_interest_period cannot be null');
        }
        $this->container['pay_interest_period'] = $pay_interest_period;

        return $this;
    }

    /**
     * Gets redeem_amount_early
     *
     * @return string
     */
    public function getRedeemAmountEarly()
    {
        return $this->container['redeem_amount_early'];
    }

    /**
     * Sets redeem_amount_early
     *
     * @param string $redeem_amount_early redeem_amount_early
     *
     * @return self
     */
    public function setRedeemAmountEarly($redeem_amount_early)
    {
        if (is_null($redeem_amount_early)) {
            throw new \InvalidArgumentException('non-nullable redeem_amount_early cannot be null');
        }
        $this->container['redeem_amount_early'] = $redeem_amount_early;

        return $this;
    }

    /**
     * Gets interest_end_date
     *
     * @return string
     */
    public function getInterestEndDate()
    {
        return $this->container['interest_end_date'];
    }

    /**
     * Sets interest_end_date
     *
     * @param string $interest_end_date interest_end_date
     *
     * @return self
     */
    public function setInterestEndDate($interest_end_date)
    {
        if (is_null($interest_end_date)) {
            throw new \InvalidArgumentException('non-nullable interest_end_date cannot be null');
        }
        $this->container['interest_end_date'] = $interest_end_date;

        return $this;
    }

    /**
     * Gets deliver_date
     *
     * @return string
     */
    public function getDeliverDate()
    {
        return $this->container['deliver_date'];
    }

    /**
     * Sets deliver_date
     *
     * @param string $deliver_date deliver_date
     *
     * @return self
     */
    public function setDeliverDate($deliver_date)
    {
        if (is_null($deliver_date)) {
            throw new \InvalidArgumentException('non-nullable deliver_date cannot be null');
        }
        $this->container['deliver_date'] = $deliver_date;

        return $this;
    }

    /**
     * Gets redeem_period
     *
     * @return string
     */
    public function getRedeemPeriod()
    {
        return $this->container['redeem_period'];
    }

    /**
     * Sets redeem_period
     *
     * @param string $redeem_period redeem_period
     *
     * @return self
     */
    public function setRedeemPeriod($redeem_period)
    {
        if (is_null($redeem_period)) {
            throw new \InvalidArgumentException('non-nullable redeem_period cannot be null');
        }
        $this->container['redeem_period'] = $redeem_period;

        return $this;
    }

    /**
     * Gets redeeming_amt
     *
     * @return string
     */
    public function getRedeemingAmt()
    {
        return $this->container['redeeming_amt'];
    }

    /**
     * Sets redeeming_amt
     *
     * @param string $redeeming_amt redeeming_amt
     *
     * @return self
     */
    public function setRedeemingAmt($redeeming_amt)
    {
        if (is_null($redeeming_amt)) {
            throw new \InvalidArgumentException('non-nullable redeeming_amt cannot be null');
        }
        $this->container['redeeming_amt'] = $redeeming_amt;

        return $this;
    }

    /**
     * Gets partial_amt_deliver_date
     *
     * @return string
     */
    public function getPartialAmtDeliverDate()
    {
        return $this->container['partial_amt_deliver_date'];
    }

    /**
     * Sets partial_amt_deliver_date
     *
     * @param string $partial_amt_deliver_date partial_amt_deliver_date
     *
     * @return self
     */
    public function setPartialAmtDeliverDate($partial_amt_deliver_date)
    {
        if (is_null($partial_amt_deliver_date)) {
            throw new \InvalidArgumentException('non-nullable partial_amt_deliver_date cannot be null');
        }
        $this->container['partial_amt_deliver_date'] = $partial_amt_deliver_date;

        return $this;
    }

    /**
     * Gets can_redeem_early
     *
     * @return bool
     */
    public function getCanRedeemEarly()
    {
        return $this->container['can_redeem_early'];
    }

    /**
     * Sets can_redeem_early
     *
     * @param bool $can_redeem_early can_redeem_early
     *
     * @return self
     */
    public function setCanRedeemEarly($can_redeem_early)
    {
        if (is_null($can_redeem_early)) {
            throw new \InvalidArgumentException('non-nullable can_redeem_early cannot be null');
        }
        $this->container['can_redeem_early'] = $can_redeem_early;

        return $this;
    }

    /**
     * Gets renewable
     *
     * @return bool
     */
    public function getRenewable()
    {
        return $this->container['renewable'];
    }

    /**
     * Sets renewable
     *
     * @param bool $renewable renewable
     *
     * @return self
     */
    public function setRenewable($renewable)
    {
        if (is_null($renewable)) {
            throw new \InvalidArgumentException('non-nullable renewable cannot be null');
        }
        $this->container['renewable'] = $renewable;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


