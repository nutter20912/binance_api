<?php
/**
 * SubAccountUSDTFuturesSummaryFutureAccountSummaryResp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubAccountUSDTFuturesSummaryFutureAccountSummaryResp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubAccountUSDTFuturesSummaryFutureAccountSummaryResp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subAccountUSDTFuturesSummary_futureAccountSummaryResp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_initial_margin' => 'string',
        'total_maintenance_margin' => 'string',
        'total_margin_balance' => 'string',
        'total_open_order_initial_margin' => 'string',
        'total_position_initial_margin' => 'string',
        'total_unrealized_profit' => 'string',
        'total_wallet_balance' => 'string',
        'asset' => 'string',
        'sub_account_list' => '\OpenAPI\Client\Model\SubAccountUSDTFuturesSummaryFutureAccountSummaryRespSubAccountListInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_initial_margin' => null,
        'total_maintenance_margin' => null,
        'total_margin_balance' => null,
        'total_open_order_initial_margin' => null,
        'total_position_initial_margin' => null,
        'total_unrealized_profit' => null,
        'total_wallet_balance' => null,
        'asset' => null,
        'sub_account_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_initial_margin' => false,
		'total_maintenance_margin' => false,
		'total_margin_balance' => false,
		'total_open_order_initial_margin' => false,
		'total_position_initial_margin' => false,
		'total_unrealized_profit' => false,
		'total_wallet_balance' => false,
		'asset' => false,
		'sub_account_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_initial_margin' => 'totalInitialMargin',
        'total_maintenance_margin' => 'totalMaintenanceMargin',
        'total_margin_balance' => 'totalMarginBalance',
        'total_open_order_initial_margin' => 'totalOpenOrderInitialMargin',
        'total_position_initial_margin' => 'totalPositionInitialMargin',
        'total_unrealized_profit' => 'totalUnrealizedProfit',
        'total_wallet_balance' => 'totalWalletBalance',
        'asset' => 'asset',
        'sub_account_list' => 'subAccountList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_initial_margin' => 'setTotalInitialMargin',
        'total_maintenance_margin' => 'setTotalMaintenanceMargin',
        'total_margin_balance' => 'setTotalMarginBalance',
        'total_open_order_initial_margin' => 'setTotalOpenOrderInitialMargin',
        'total_position_initial_margin' => 'setTotalPositionInitialMargin',
        'total_unrealized_profit' => 'setTotalUnrealizedProfit',
        'total_wallet_balance' => 'setTotalWalletBalance',
        'asset' => 'setAsset',
        'sub_account_list' => 'setSubAccountList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_initial_margin' => 'getTotalInitialMargin',
        'total_maintenance_margin' => 'getTotalMaintenanceMargin',
        'total_margin_balance' => 'getTotalMarginBalance',
        'total_open_order_initial_margin' => 'getTotalOpenOrderInitialMargin',
        'total_position_initial_margin' => 'getTotalPositionInitialMargin',
        'total_unrealized_profit' => 'getTotalUnrealizedProfit',
        'total_wallet_balance' => 'getTotalWalletBalance',
        'asset' => 'getAsset',
        'sub_account_list' => 'getSubAccountList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_initial_margin', $data ?? [], null);
        $this->setIfExists('total_maintenance_margin', $data ?? [], null);
        $this->setIfExists('total_margin_balance', $data ?? [], null);
        $this->setIfExists('total_open_order_initial_margin', $data ?? [], null);
        $this->setIfExists('total_position_initial_margin', $data ?? [], null);
        $this->setIfExists('total_unrealized_profit', $data ?? [], null);
        $this->setIfExists('total_wallet_balance', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('sub_account_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_initial_margin'] === null) {
            $invalidProperties[] = "'total_initial_margin' can't be null";
        }
        if ($this->container['total_maintenance_margin'] === null) {
            $invalidProperties[] = "'total_maintenance_margin' can't be null";
        }
        if ($this->container['total_margin_balance'] === null) {
            $invalidProperties[] = "'total_margin_balance' can't be null";
        }
        if ($this->container['total_open_order_initial_margin'] === null) {
            $invalidProperties[] = "'total_open_order_initial_margin' can't be null";
        }
        if ($this->container['total_position_initial_margin'] === null) {
            $invalidProperties[] = "'total_position_initial_margin' can't be null";
        }
        if ($this->container['total_unrealized_profit'] === null) {
            $invalidProperties[] = "'total_unrealized_profit' can't be null";
        }
        if ($this->container['total_wallet_balance'] === null) {
            $invalidProperties[] = "'total_wallet_balance' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['sub_account_list'] === null) {
            $invalidProperties[] = "'sub_account_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_initial_margin
     *
     * @return string
     */
    public function getTotalInitialMargin()
    {
        return $this->container['total_initial_margin'];
    }

    /**
     * Sets total_initial_margin
     *
     * @param string $total_initial_margin total_initial_margin
     *
     * @return self
     */
    public function setTotalInitialMargin($total_initial_margin)
    {
        if (is_null($total_initial_margin)) {
            throw new \InvalidArgumentException('non-nullable total_initial_margin cannot be null');
        }
        $this->container['total_initial_margin'] = $total_initial_margin;

        return $this;
    }

    /**
     * Gets total_maintenance_margin
     *
     * @return string
     */
    public function getTotalMaintenanceMargin()
    {
        return $this->container['total_maintenance_margin'];
    }

    /**
     * Sets total_maintenance_margin
     *
     * @param string $total_maintenance_margin total_maintenance_margin
     *
     * @return self
     */
    public function setTotalMaintenanceMargin($total_maintenance_margin)
    {
        if (is_null($total_maintenance_margin)) {
            throw new \InvalidArgumentException('non-nullable total_maintenance_margin cannot be null');
        }
        $this->container['total_maintenance_margin'] = $total_maintenance_margin;

        return $this;
    }

    /**
     * Gets total_margin_balance
     *
     * @return string
     */
    public function getTotalMarginBalance()
    {
        return $this->container['total_margin_balance'];
    }

    /**
     * Sets total_margin_balance
     *
     * @param string $total_margin_balance total_margin_balance
     *
     * @return self
     */
    public function setTotalMarginBalance($total_margin_balance)
    {
        if (is_null($total_margin_balance)) {
            throw new \InvalidArgumentException('non-nullable total_margin_balance cannot be null');
        }
        $this->container['total_margin_balance'] = $total_margin_balance;

        return $this;
    }

    /**
     * Gets total_open_order_initial_margin
     *
     * @return string
     */
    public function getTotalOpenOrderInitialMargin()
    {
        return $this->container['total_open_order_initial_margin'];
    }

    /**
     * Sets total_open_order_initial_margin
     *
     * @param string $total_open_order_initial_margin total_open_order_initial_margin
     *
     * @return self
     */
    public function setTotalOpenOrderInitialMargin($total_open_order_initial_margin)
    {
        if (is_null($total_open_order_initial_margin)) {
            throw new \InvalidArgumentException('non-nullable total_open_order_initial_margin cannot be null');
        }
        $this->container['total_open_order_initial_margin'] = $total_open_order_initial_margin;

        return $this;
    }

    /**
     * Gets total_position_initial_margin
     *
     * @return string
     */
    public function getTotalPositionInitialMargin()
    {
        return $this->container['total_position_initial_margin'];
    }

    /**
     * Sets total_position_initial_margin
     *
     * @param string $total_position_initial_margin total_position_initial_margin
     *
     * @return self
     */
    public function setTotalPositionInitialMargin($total_position_initial_margin)
    {
        if (is_null($total_position_initial_margin)) {
            throw new \InvalidArgumentException('non-nullable total_position_initial_margin cannot be null');
        }
        $this->container['total_position_initial_margin'] = $total_position_initial_margin;

        return $this;
    }

    /**
     * Gets total_unrealized_profit
     *
     * @return string
     */
    public function getTotalUnrealizedProfit()
    {
        return $this->container['total_unrealized_profit'];
    }

    /**
     * Sets total_unrealized_profit
     *
     * @param string $total_unrealized_profit total_unrealized_profit
     *
     * @return self
     */
    public function setTotalUnrealizedProfit($total_unrealized_profit)
    {
        if (is_null($total_unrealized_profit)) {
            throw new \InvalidArgumentException('non-nullable total_unrealized_profit cannot be null');
        }
        $this->container['total_unrealized_profit'] = $total_unrealized_profit;

        return $this;
    }

    /**
     * Gets total_wallet_balance
     *
     * @return string
     */
    public function getTotalWalletBalance()
    {
        return $this->container['total_wallet_balance'];
    }

    /**
     * Sets total_wallet_balance
     *
     * @param string $total_wallet_balance total_wallet_balance
     *
     * @return self
     */
    public function setTotalWalletBalance($total_wallet_balance)
    {
        if (is_null($total_wallet_balance)) {
            throw new \InvalidArgumentException('non-nullable total_wallet_balance cannot be null');
        }
        $this->container['total_wallet_balance'] = $total_wallet_balance;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset The sum of BUSD and USDT
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets sub_account_list
     *
     * @return \OpenAPI\Client\Model\SubAccountUSDTFuturesSummaryFutureAccountSummaryRespSubAccountListInner[]
     */
    public function getSubAccountList()
    {
        return $this->container['sub_account_list'];
    }

    /**
     * Sets sub_account_list
     *
     * @param \OpenAPI\Client\Model\SubAccountUSDTFuturesSummaryFutureAccountSummaryRespSubAccountListInner[] $sub_account_list sub_account_list
     *
     * @return self
     */
    public function setSubAccountList($sub_account_list)
    {
        if (is_null($sub_account_list)) {
            throw new \InvalidArgumentException('non-nullable sub_account_list cannot be null');
        }
        $this->container['sub_account_list'] = $sub_account_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


