<?php
/**
 * SapiV1LendingDailyProductListGet200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1LendingDailyProductListGet200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1LendingDailyProductListGet200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_lending_daily_product_list_get_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset' => 'string',
        'avg_annual_interest_rate' => 'string',
        'can_purchase' => 'bool',
        'can_redeem' => 'bool',
        'daily_interest_per_thousand' => 'string',
        'featured' => 'bool',
        'min_purchase_amount' => 'string',
        'product_id' => 'string',
        'purchased_amount' => 'string',
        'status' => 'string',
        'up_limit' => 'string',
        'up_limit_per_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asset' => null,
        'avg_annual_interest_rate' => null,
        'can_purchase' => null,
        'can_redeem' => null,
        'daily_interest_per_thousand' => null,
        'featured' => null,
        'min_purchase_amount' => null,
        'product_id' => null,
        'purchased_amount' => null,
        'status' => null,
        'up_limit' => null,
        'up_limit_per_user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'asset' => false,
		'avg_annual_interest_rate' => false,
		'can_purchase' => false,
		'can_redeem' => false,
		'daily_interest_per_thousand' => false,
		'featured' => false,
		'min_purchase_amount' => false,
		'product_id' => false,
		'purchased_amount' => false,
		'status' => false,
		'up_limit' => false,
		'up_limit_per_user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'avg_annual_interest_rate' => 'avgAnnualInterestRate',
        'can_purchase' => 'canPurchase',
        'can_redeem' => 'canRedeem',
        'daily_interest_per_thousand' => 'dailyInterestPerThousand',
        'featured' => 'featured',
        'min_purchase_amount' => 'minPurchaseAmount',
        'product_id' => 'productId',
        'purchased_amount' => 'purchasedAmount',
        'status' => 'status',
        'up_limit' => 'upLimit',
        'up_limit_per_user' => 'upLimitPerUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'avg_annual_interest_rate' => 'setAvgAnnualInterestRate',
        'can_purchase' => 'setCanPurchase',
        'can_redeem' => 'setCanRedeem',
        'daily_interest_per_thousand' => 'setDailyInterestPerThousand',
        'featured' => 'setFeatured',
        'min_purchase_amount' => 'setMinPurchaseAmount',
        'product_id' => 'setProductId',
        'purchased_amount' => 'setPurchasedAmount',
        'status' => 'setStatus',
        'up_limit' => 'setUpLimit',
        'up_limit_per_user' => 'setUpLimitPerUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'avg_annual_interest_rate' => 'getAvgAnnualInterestRate',
        'can_purchase' => 'getCanPurchase',
        'can_redeem' => 'getCanRedeem',
        'daily_interest_per_thousand' => 'getDailyInterestPerThousand',
        'featured' => 'getFeatured',
        'min_purchase_amount' => 'getMinPurchaseAmount',
        'product_id' => 'getProductId',
        'purchased_amount' => 'getPurchasedAmount',
        'status' => 'getStatus',
        'up_limit' => 'getUpLimit',
        'up_limit_per_user' => 'getUpLimitPerUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('avg_annual_interest_rate', $data ?? [], null);
        $this->setIfExists('can_purchase', $data ?? [], null);
        $this->setIfExists('can_redeem', $data ?? [], null);
        $this->setIfExists('daily_interest_per_thousand', $data ?? [], null);
        $this->setIfExists('featured', $data ?? [], null);
        $this->setIfExists('min_purchase_amount', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('purchased_amount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('up_limit', $data ?? [], null);
        $this->setIfExists('up_limit_per_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['avg_annual_interest_rate'] === null) {
            $invalidProperties[] = "'avg_annual_interest_rate' can't be null";
        }
        if ($this->container['can_purchase'] === null) {
            $invalidProperties[] = "'can_purchase' can't be null";
        }
        if ($this->container['can_redeem'] === null) {
            $invalidProperties[] = "'can_redeem' can't be null";
        }
        if ($this->container['daily_interest_per_thousand'] === null) {
            $invalidProperties[] = "'daily_interest_per_thousand' can't be null";
        }
        if ($this->container['featured'] === null) {
            $invalidProperties[] = "'featured' can't be null";
        }
        if ($this->container['min_purchase_amount'] === null) {
            $invalidProperties[] = "'min_purchase_amount' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['purchased_amount'] === null) {
            $invalidProperties[] = "'purchased_amount' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['up_limit'] === null) {
            $invalidProperties[] = "'up_limit' can't be null";
        }
        if ($this->container['up_limit_per_user'] === null) {
            $invalidProperties[] = "'up_limit_per_user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets avg_annual_interest_rate
     *
     * @return string
     */
    public function getAvgAnnualInterestRate()
    {
        return $this->container['avg_annual_interest_rate'];
    }

    /**
     * Sets avg_annual_interest_rate
     *
     * @param string $avg_annual_interest_rate avg_annual_interest_rate
     *
     * @return self
     */
    public function setAvgAnnualInterestRate($avg_annual_interest_rate)
    {
        if (is_null($avg_annual_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable avg_annual_interest_rate cannot be null');
        }
        $this->container['avg_annual_interest_rate'] = $avg_annual_interest_rate;

        return $this;
    }

    /**
     * Gets can_purchase
     *
     * @return bool
     */
    public function getCanPurchase()
    {
        return $this->container['can_purchase'];
    }

    /**
     * Sets can_purchase
     *
     * @param bool $can_purchase can_purchase
     *
     * @return self
     */
    public function setCanPurchase($can_purchase)
    {
        if (is_null($can_purchase)) {
            throw new \InvalidArgumentException('non-nullable can_purchase cannot be null');
        }
        $this->container['can_purchase'] = $can_purchase;

        return $this;
    }

    /**
     * Gets can_redeem
     *
     * @return bool
     */
    public function getCanRedeem()
    {
        return $this->container['can_redeem'];
    }

    /**
     * Sets can_redeem
     *
     * @param bool $can_redeem can_redeem
     *
     * @return self
     */
    public function setCanRedeem($can_redeem)
    {
        if (is_null($can_redeem)) {
            throw new \InvalidArgumentException('non-nullable can_redeem cannot be null');
        }
        $this->container['can_redeem'] = $can_redeem;

        return $this;
    }

    /**
     * Gets daily_interest_per_thousand
     *
     * @return string
     */
    public function getDailyInterestPerThousand()
    {
        return $this->container['daily_interest_per_thousand'];
    }

    /**
     * Sets daily_interest_per_thousand
     *
     * @param string $daily_interest_per_thousand daily_interest_per_thousand
     *
     * @return self
     */
    public function setDailyInterestPerThousand($daily_interest_per_thousand)
    {
        if (is_null($daily_interest_per_thousand)) {
            throw new \InvalidArgumentException('non-nullable daily_interest_per_thousand cannot be null');
        }
        $this->container['daily_interest_per_thousand'] = $daily_interest_per_thousand;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool $featured featured
     *
     * @return self
     */
    public function setFeatured($featured)
    {
        if (is_null($featured)) {
            throw new \InvalidArgumentException('non-nullable featured cannot be null');
        }
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets min_purchase_amount
     *
     * @return string
     */
    public function getMinPurchaseAmount()
    {
        return $this->container['min_purchase_amount'];
    }

    /**
     * Sets min_purchase_amount
     *
     * @param string $min_purchase_amount min_purchase_amount
     *
     * @return self
     */
    public function setMinPurchaseAmount($min_purchase_amount)
    {
        if (is_null($min_purchase_amount)) {
            throw new \InvalidArgumentException('non-nullable min_purchase_amount cannot be null');
        }
        $this->container['min_purchase_amount'] = $min_purchase_amount;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets purchased_amount
     *
     * @return string
     */
    public function getPurchasedAmount()
    {
        return $this->container['purchased_amount'];
    }

    /**
     * Sets purchased_amount
     *
     * @param string $purchased_amount purchased_amount
     *
     * @return self
     */
    public function setPurchasedAmount($purchased_amount)
    {
        if (is_null($purchased_amount)) {
            throw new \InvalidArgumentException('non-nullable purchased_amount cannot be null');
        }
        $this->container['purchased_amount'] = $purchased_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets up_limit
     *
     * @return string
     */
    public function getUpLimit()
    {
        return $this->container['up_limit'];
    }

    /**
     * Sets up_limit
     *
     * @param string $up_limit up_limit
     *
     * @return self
     */
    public function setUpLimit($up_limit)
    {
        if (is_null($up_limit)) {
            throw new \InvalidArgumentException('non-nullable up_limit cannot be null');
        }
        $this->container['up_limit'] = $up_limit;

        return $this;
    }

    /**
     * Gets up_limit_per_user
     *
     * @return string
     */
    public function getUpLimitPerUser()
    {
        return $this->container['up_limit_per_user'];
    }

    /**
     * Sets up_limit_per_user
     *
     * @param string $up_limit_per_user up_limit_per_user
     *
     * @return self
     */
    public function setUpLimitPerUser($up_limit_per_user)
    {
        if (is_null($up_limit_per_user)) {
            throw new \InvalidArgumentException('non-nullable up_limit_per_user cannot be null');
        }
        $this->container['up_limit_per_user'] = $up_limit_per_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


