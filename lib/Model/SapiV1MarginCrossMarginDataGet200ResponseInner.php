<?php
/**
 * SapiV1MarginCrossMarginDataGet200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1MarginCrossMarginDataGet200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1MarginCrossMarginDataGet200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_margin_crossMarginData_get_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vip_level' => 'int',
        'coin' => 'string',
        'transfer_in' => 'bool',
        'borrowable' => 'bool',
        'daily_interest' => 'string',
        'yearly_interest' => 'string',
        'borrow_limit' => 'string',
        'marginable_pairs' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vip_level' => 'int32',
        'coin' => null,
        'transfer_in' => null,
        'borrowable' => null,
        'daily_interest' => null,
        'yearly_interest' => null,
        'borrow_limit' => null,
        'marginable_pairs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vip_level' => false,
		'coin' => false,
		'transfer_in' => false,
		'borrowable' => false,
		'daily_interest' => false,
		'yearly_interest' => false,
		'borrow_limit' => false,
		'marginable_pairs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vip_level' => 'vipLevel',
        'coin' => 'coin',
        'transfer_in' => 'transferIn',
        'borrowable' => 'borrowable',
        'daily_interest' => 'dailyInterest',
        'yearly_interest' => 'yearlyInterest',
        'borrow_limit' => 'borrowLimit',
        'marginable_pairs' => 'marginablePairs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vip_level' => 'setVipLevel',
        'coin' => 'setCoin',
        'transfer_in' => 'setTransferIn',
        'borrowable' => 'setBorrowable',
        'daily_interest' => 'setDailyInterest',
        'yearly_interest' => 'setYearlyInterest',
        'borrow_limit' => 'setBorrowLimit',
        'marginable_pairs' => 'setMarginablePairs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vip_level' => 'getVipLevel',
        'coin' => 'getCoin',
        'transfer_in' => 'getTransferIn',
        'borrowable' => 'getBorrowable',
        'daily_interest' => 'getDailyInterest',
        'yearly_interest' => 'getYearlyInterest',
        'borrow_limit' => 'getBorrowLimit',
        'marginable_pairs' => 'getMarginablePairs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vip_level', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('transfer_in', $data ?? [], null);
        $this->setIfExists('borrowable', $data ?? [], null);
        $this->setIfExists('daily_interest', $data ?? [], null);
        $this->setIfExists('yearly_interest', $data ?? [], null);
        $this->setIfExists('borrow_limit', $data ?? [], null);
        $this->setIfExists('marginable_pairs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vip_level'] === null) {
            $invalidProperties[] = "'vip_level' can't be null";
        }
        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['transfer_in'] === null) {
            $invalidProperties[] = "'transfer_in' can't be null";
        }
        if ($this->container['borrowable'] === null) {
            $invalidProperties[] = "'borrowable' can't be null";
        }
        if ($this->container['daily_interest'] === null) {
            $invalidProperties[] = "'daily_interest' can't be null";
        }
        if ($this->container['yearly_interest'] === null) {
            $invalidProperties[] = "'yearly_interest' can't be null";
        }
        if ($this->container['borrow_limit'] === null) {
            $invalidProperties[] = "'borrow_limit' can't be null";
        }
        if ($this->container['marginable_pairs'] === null) {
            $invalidProperties[] = "'marginable_pairs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vip_level
     *
     * @return int
     */
    public function getVipLevel()
    {
        return $this->container['vip_level'];
    }

    /**
     * Sets vip_level
     *
     * @param int $vip_level vip_level
     *
     * @return self
     */
    public function setVipLevel($vip_level)
    {
        if (is_null($vip_level)) {
            throw new \InvalidArgumentException('non-nullable vip_level cannot be null');
        }
        $this->container['vip_level'] = $vip_level;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets transfer_in
     *
     * @return bool
     */
    public function getTransferIn()
    {
        return $this->container['transfer_in'];
    }

    /**
     * Sets transfer_in
     *
     * @param bool $transfer_in transfer_in
     *
     * @return self
     */
    public function setTransferIn($transfer_in)
    {
        if (is_null($transfer_in)) {
            throw new \InvalidArgumentException('non-nullable transfer_in cannot be null');
        }
        $this->container['transfer_in'] = $transfer_in;

        return $this;
    }

    /**
     * Gets borrowable
     *
     * @return bool
     */
    public function getBorrowable()
    {
        return $this->container['borrowable'];
    }

    /**
     * Sets borrowable
     *
     * @param bool $borrowable borrowable
     *
     * @return self
     */
    public function setBorrowable($borrowable)
    {
        if (is_null($borrowable)) {
            throw new \InvalidArgumentException('non-nullable borrowable cannot be null');
        }
        $this->container['borrowable'] = $borrowable;

        return $this;
    }

    /**
     * Gets daily_interest
     *
     * @return string
     */
    public function getDailyInterest()
    {
        return $this->container['daily_interest'];
    }

    /**
     * Sets daily_interest
     *
     * @param string $daily_interest daily_interest
     *
     * @return self
     */
    public function setDailyInterest($daily_interest)
    {
        if (is_null($daily_interest)) {
            throw new \InvalidArgumentException('non-nullable daily_interest cannot be null');
        }
        $this->container['daily_interest'] = $daily_interest;

        return $this;
    }

    /**
     * Gets yearly_interest
     *
     * @return string
     */
    public function getYearlyInterest()
    {
        return $this->container['yearly_interest'];
    }

    /**
     * Sets yearly_interest
     *
     * @param string $yearly_interest yearly_interest
     *
     * @return self
     */
    public function setYearlyInterest($yearly_interest)
    {
        if (is_null($yearly_interest)) {
            throw new \InvalidArgumentException('non-nullable yearly_interest cannot be null');
        }
        $this->container['yearly_interest'] = $yearly_interest;

        return $this;
    }

    /**
     * Gets borrow_limit
     *
     * @return string
     */
    public function getBorrowLimit()
    {
        return $this->container['borrow_limit'];
    }

    /**
     * Sets borrow_limit
     *
     * @param string $borrow_limit borrow_limit
     *
     * @return self
     */
    public function setBorrowLimit($borrow_limit)
    {
        if (is_null($borrow_limit)) {
            throw new \InvalidArgumentException('non-nullable borrow_limit cannot be null');
        }
        $this->container['borrow_limit'] = $borrow_limit;

        return $this;
    }

    /**
     * Gets marginable_pairs
     *
     * @return string[]
     */
    public function getMarginablePairs()
    {
        return $this->container['marginable_pairs'];
    }

    /**
     * Sets marginable_pairs
     *
     * @param string[] $marginable_pairs marginable_pairs
     *
     * @return self
     */
    public function setMarginablePairs($marginable_pairs)
    {
        if (is_null($marginable_pairs)) {
            throw new \InvalidArgumentException('non-nullable marginable_pairs cannot be null');
        }
        $this->container['marginable_pairs'] = $marginable_pairs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


