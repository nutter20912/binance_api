<?php
/**
 * SapiV2FuturesLoanWalletGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV2FuturesLoanWalletGet200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV2FuturesLoanWalletGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v2_futures_loan_wallet_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_cross_collateral' => 'string',
        'total_borrowed' => 'string',
        'total_interest' => 'string',
        'interest_free_limit' => 'string',
        'asset' => 'string',
        'cross_collaterals' => '\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200ResponseCrossCollateralsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_cross_collateral' => null,
        'total_borrowed' => null,
        'total_interest' => null,
        'interest_free_limit' => null,
        'asset' => null,
        'cross_collaterals' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_cross_collateral' => false,
		'total_borrowed' => false,
		'total_interest' => false,
		'interest_free_limit' => false,
		'asset' => false,
		'cross_collaterals' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_cross_collateral' => 'totalCrossCollateral',
        'total_borrowed' => 'totalBorrowed',
        'total_interest' => 'totalInterest',
        'interest_free_limit' => 'interestFreeLimit',
        'asset' => 'asset',
        'cross_collaterals' => 'crossCollaterals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_cross_collateral' => 'setTotalCrossCollateral',
        'total_borrowed' => 'setTotalBorrowed',
        'total_interest' => 'setTotalInterest',
        'interest_free_limit' => 'setInterestFreeLimit',
        'asset' => 'setAsset',
        'cross_collaterals' => 'setCrossCollaterals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_cross_collateral' => 'getTotalCrossCollateral',
        'total_borrowed' => 'getTotalBorrowed',
        'total_interest' => 'getTotalInterest',
        'interest_free_limit' => 'getInterestFreeLimit',
        'asset' => 'getAsset',
        'cross_collaterals' => 'getCrossCollaterals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_cross_collateral', $data ?? [], null);
        $this->setIfExists('total_borrowed', $data ?? [], null);
        $this->setIfExists('total_interest', $data ?? [], null);
        $this->setIfExists('interest_free_limit', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('cross_collaterals', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_cross_collateral'] === null) {
            $invalidProperties[] = "'total_cross_collateral' can't be null";
        }
        if ($this->container['total_borrowed'] === null) {
            $invalidProperties[] = "'total_borrowed' can't be null";
        }
        if ($this->container['total_interest'] === null) {
            $invalidProperties[] = "'total_interest' can't be null";
        }
        if ($this->container['interest_free_limit'] === null) {
            $invalidProperties[] = "'interest_free_limit' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['cross_collaterals'] === null) {
            $invalidProperties[] = "'cross_collaterals' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_cross_collateral
     *
     * @return string
     */
    public function getTotalCrossCollateral()
    {
        return $this->container['total_cross_collateral'];
    }

    /**
     * Sets total_cross_collateral
     *
     * @param string $total_cross_collateral total_cross_collateral
     *
     * @return self
     */
    public function setTotalCrossCollateral($total_cross_collateral)
    {
        if (is_null($total_cross_collateral)) {
            throw new \InvalidArgumentException('non-nullable total_cross_collateral cannot be null');
        }
        $this->container['total_cross_collateral'] = $total_cross_collateral;

        return $this;
    }

    /**
     * Gets total_borrowed
     *
     * @return string
     */
    public function getTotalBorrowed()
    {
        return $this->container['total_borrowed'];
    }

    /**
     * Sets total_borrowed
     *
     * @param string $total_borrowed total_borrowed
     *
     * @return self
     */
    public function setTotalBorrowed($total_borrowed)
    {
        if (is_null($total_borrowed)) {
            throw new \InvalidArgumentException('non-nullable total_borrowed cannot be null');
        }
        $this->container['total_borrowed'] = $total_borrowed;

        return $this;
    }

    /**
     * Gets total_interest
     *
     * @return string
     */
    public function getTotalInterest()
    {
        return $this->container['total_interest'];
    }

    /**
     * Sets total_interest
     *
     * @param string $total_interest total_interest
     *
     * @return self
     */
    public function setTotalInterest($total_interest)
    {
        if (is_null($total_interest)) {
            throw new \InvalidArgumentException('non-nullable total_interest cannot be null');
        }
        $this->container['total_interest'] = $total_interest;

        return $this;
    }

    /**
     * Gets interest_free_limit
     *
     * @return string
     */
    public function getInterestFreeLimit()
    {
        return $this->container['interest_free_limit'];
    }

    /**
     * Sets interest_free_limit
     *
     * @param string $interest_free_limit interest_free_limit
     *
     * @return self
     */
    public function setInterestFreeLimit($interest_free_limit)
    {
        if (is_null($interest_free_limit)) {
            throw new \InvalidArgumentException('non-nullable interest_free_limit cannot be null');
        }
        $this->container['interest_free_limit'] = $interest_free_limit;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets cross_collaterals
     *
     * @return \OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200ResponseCrossCollateralsInner[]
     */
    public function getCrossCollaterals()
    {
        return $this->container['cross_collaterals'];
    }

    /**
     * Sets cross_collaterals
     *
     * @param \OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200ResponseCrossCollateralsInner[] $cross_collaterals cross_collaterals
     *
     * @return self
     */
    public function setCrossCollaterals($cross_collaterals)
    {
        if (is_null($cross_collaterals)) {
            throw new \InvalidArgumentException('non-nullable cross_collaterals cannot be null');
        }
        $this->container['cross_collaterals'] = $cross_collaterals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


