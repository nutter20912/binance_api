<?php
/**
 * SapiV1LoanRepayPost200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1LoanRepayPost200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1LoanRepayPost200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_loan_repay_post_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loan_coin' => 'string',
        'remaining_principal' => 'string',
        'remaining_interest' => 'string',
        'collateral_coin' => 'string',
        'remaining_collateral' => 'string',
        'current_ltv' => 'string',
        'repay_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'loan_coin' => null,
        'remaining_principal' => null,
        'remaining_interest' => null,
        'collateral_coin' => null,
        'remaining_collateral' => null,
        'current_ltv' => null,
        'repay_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'loan_coin' => false,
		'remaining_principal' => false,
		'remaining_interest' => false,
		'collateral_coin' => false,
		'remaining_collateral' => false,
		'current_ltv' => false,
		'repay_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_coin' => 'loanCoin',
        'remaining_principal' => 'remainingPrincipal',
        'remaining_interest' => 'remainingInterest',
        'collateral_coin' => 'collateralCoin',
        'remaining_collateral' => 'remainingCollateral',
        'current_ltv' => 'currentLTV',
        'repay_status' => 'repayStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_coin' => 'setLoanCoin',
        'remaining_principal' => 'setRemainingPrincipal',
        'remaining_interest' => 'setRemainingInterest',
        'collateral_coin' => 'setCollateralCoin',
        'remaining_collateral' => 'setRemainingCollateral',
        'current_ltv' => 'setCurrentLtv',
        'repay_status' => 'setRepayStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_coin' => 'getLoanCoin',
        'remaining_principal' => 'getRemainingPrincipal',
        'remaining_interest' => 'getRemainingInterest',
        'collateral_coin' => 'getCollateralCoin',
        'remaining_collateral' => 'getRemainingCollateral',
        'current_ltv' => 'getCurrentLtv',
        'repay_status' => 'getRepayStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('loan_coin', $data ?? [], null);
        $this->setIfExists('remaining_principal', $data ?? [], null);
        $this->setIfExists('remaining_interest', $data ?? [], null);
        $this->setIfExists('collateral_coin', $data ?? [], null);
        $this->setIfExists('remaining_collateral', $data ?? [], null);
        $this->setIfExists('current_ltv', $data ?? [], null);
        $this->setIfExists('repay_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_coin'] === null) {
            $invalidProperties[] = "'loan_coin' can't be null";
        }
        if ($this->container['remaining_principal'] === null) {
            $invalidProperties[] = "'remaining_principal' can't be null";
        }
        if ($this->container['remaining_interest'] === null) {
            $invalidProperties[] = "'remaining_interest' can't be null";
        }
        if ($this->container['collateral_coin'] === null) {
            $invalidProperties[] = "'collateral_coin' can't be null";
        }
        if ($this->container['remaining_collateral'] === null) {
            $invalidProperties[] = "'remaining_collateral' can't be null";
        }
        if ($this->container['current_ltv'] === null) {
            $invalidProperties[] = "'current_ltv' can't be null";
        }
        if ($this->container['repay_status'] === null) {
            $invalidProperties[] = "'repay_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_coin
     *
     * @return string
     */
    public function getLoanCoin()
    {
        return $this->container['loan_coin'];
    }

    /**
     * Sets loan_coin
     *
     * @param string $loan_coin loan_coin
     *
     * @return self
     */
    public function setLoanCoin($loan_coin)
    {
        if (is_null($loan_coin)) {
            throw new \InvalidArgumentException('non-nullable loan_coin cannot be null');
        }
        $this->container['loan_coin'] = $loan_coin;

        return $this;
    }

    /**
     * Gets remaining_principal
     *
     * @return string
     */
    public function getRemainingPrincipal()
    {
        return $this->container['remaining_principal'];
    }

    /**
     * Sets remaining_principal
     *
     * @param string $remaining_principal remaining_principal
     *
     * @return self
     */
    public function setRemainingPrincipal($remaining_principal)
    {
        if (is_null($remaining_principal)) {
            throw new \InvalidArgumentException('non-nullable remaining_principal cannot be null');
        }
        $this->container['remaining_principal'] = $remaining_principal;

        return $this;
    }

    /**
     * Gets remaining_interest
     *
     * @return string
     */
    public function getRemainingInterest()
    {
        return $this->container['remaining_interest'];
    }

    /**
     * Sets remaining_interest
     *
     * @param string $remaining_interest remaining_interest
     *
     * @return self
     */
    public function setRemainingInterest($remaining_interest)
    {
        if (is_null($remaining_interest)) {
            throw new \InvalidArgumentException('non-nullable remaining_interest cannot be null');
        }
        $this->container['remaining_interest'] = $remaining_interest;

        return $this;
    }

    /**
     * Gets collateral_coin
     *
     * @return string
     */
    public function getCollateralCoin()
    {
        return $this->container['collateral_coin'];
    }

    /**
     * Sets collateral_coin
     *
     * @param string $collateral_coin collateral_coin
     *
     * @return self
     */
    public function setCollateralCoin($collateral_coin)
    {
        if (is_null($collateral_coin)) {
            throw new \InvalidArgumentException('non-nullable collateral_coin cannot be null');
        }
        $this->container['collateral_coin'] = $collateral_coin;

        return $this;
    }

    /**
     * Gets remaining_collateral
     *
     * @return string
     */
    public function getRemainingCollateral()
    {
        return $this->container['remaining_collateral'];
    }

    /**
     * Sets remaining_collateral
     *
     * @param string $remaining_collateral remaining_collateral
     *
     * @return self
     */
    public function setRemainingCollateral($remaining_collateral)
    {
        if (is_null($remaining_collateral)) {
            throw new \InvalidArgumentException('non-nullable remaining_collateral cannot be null');
        }
        $this->container['remaining_collateral'] = $remaining_collateral;

        return $this;
    }

    /**
     * Gets current_ltv
     *
     * @return string
     */
    public function getCurrentLtv()
    {
        return $this->container['current_ltv'];
    }

    /**
     * Sets current_ltv
     *
     * @param string $current_ltv current_ltv
     *
     * @return self
     */
    public function setCurrentLtv($current_ltv)
    {
        if (is_null($current_ltv)) {
            throw new \InvalidArgumentException('non-nullable current_ltv cannot be null');
        }
        $this->container['current_ltv'] = $current_ltv;

        return $this;
    }

    /**
     * Gets repay_status
     *
     * @return string
     */
    public function getRepayStatus()
    {
        return $this->container['repay_status'];
    }

    /**
     * Sets repay_status
     *
     * @param string $repay_status repay_status
     *
     * @return self
     */
    public function setRepayStatus($repay_status)
    {
        if (is_null($repay_status)) {
            throw new \InvalidArgumentException('non-nullable repay_status cannot be null');
        }
        $this->container['repay_status'] = $repay_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


