<?php
/**
 * SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_c2c_orderMatch_listUserOrderHistory_get_200_response_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_number' => 'string',
        'adv_no' => 'string',
        'trade_type' => 'string',
        'asset' => 'string',
        'fiat' => 'string',
        'fiat_symbol' => 'string',
        'amount' => 'string',
        'total_price' => 'string',
        'unit_price' => 'string',
        'order_status' => 'string',
        'create_time' => 'int',
        'commission' => 'string',
        'counter_part_nick_name' => 'string',
        'advertisement_role' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_number' => null,
        'adv_no' => null,
        'trade_type' => null,
        'asset' => null,
        'fiat' => null,
        'fiat_symbol' => null,
        'amount' => null,
        'total_price' => null,
        'unit_price' => null,
        'order_status' => null,
        'create_time' => 'int64',
        'commission' => null,
        'counter_part_nick_name' => null,
        'advertisement_role' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_number' => false,
		'adv_no' => false,
		'trade_type' => false,
		'asset' => false,
		'fiat' => false,
		'fiat_symbol' => false,
		'amount' => false,
		'total_price' => false,
		'unit_price' => false,
		'order_status' => false,
		'create_time' => false,
		'commission' => false,
		'counter_part_nick_name' => false,
		'advertisement_role' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'orderNumber',
        'adv_no' => 'advNo',
        'trade_type' => 'tradeType',
        'asset' => 'asset',
        'fiat' => 'fiat',
        'fiat_symbol' => 'fiatSymbol',
        'amount' => 'amount',
        'total_price' => 'totalPrice',
        'unit_price' => 'unitPrice',
        'order_status' => 'orderStatus',
        'create_time' => 'createTime',
        'commission' => 'commission',
        'counter_part_nick_name' => 'counterPartNickName',
        'advertisement_role' => 'advertisementRole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'adv_no' => 'setAdvNo',
        'trade_type' => 'setTradeType',
        'asset' => 'setAsset',
        'fiat' => 'setFiat',
        'fiat_symbol' => 'setFiatSymbol',
        'amount' => 'setAmount',
        'total_price' => 'setTotalPrice',
        'unit_price' => 'setUnitPrice',
        'order_status' => 'setOrderStatus',
        'create_time' => 'setCreateTime',
        'commission' => 'setCommission',
        'counter_part_nick_name' => 'setCounterPartNickName',
        'advertisement_role' => 'setAdvertisementRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'adv_no' => 'getAdvNo',
        'trade_type' => 'getTradeType',
        'asset' => 'getAsset',
        'fiat' => 'getFiat',
        'fiat_symbol' => 'getFiatSymbol',
        'amount' => 'getAmount',
        'total_price' => 'getTotalPrice',
        'unit_price' => 'getUnitPrice',
        'order_status' => 'getOrderStatus',
        'create_time' => 'getCreateTime',
        'commission' => 'getCommission',
        'counter_part_nick_name' => 'getCounterPartNickName',
        'advertisement_role' => 'getAdvertisementRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('adv_no', $data ?? [], null);
        $this->setIfExists('trade_type', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('fiat', $data ?? [], null);
        $this->setIfExists('fiat_symbol', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('create_time', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('counter_part_nick_name', $data ?? [], null);
        $this->setIfExists('advertisement_role', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['adv_no'] === null) {
            $invalidProperties[] = "'adv_no' can't be null";
        }
        if ($this->container['trade_type'] === null) {
            $invalidProperties[] = "'trade_type' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['fiat'] === null) {
            $invalidProperties[] = "'fiat' can't be null";
        }
        if ($this->container['fiat_symbol'] === null) {
            $invalidProperties[] = "'fiat_symbol' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['order_status'] === null) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        if ($this->container['create_time'] === null) {
            $invalidProperties[] = "'create_time' can't be null";
        }
        if ($this->container['commission'] === null) {
            $invalidProperties[] = "'commission' can't be null";
        }
        if ($this->container['counter_part_nick_name'] === null) {
            $invalidProperties[] = "'counter_part_nick_name' can't be null";
        }
        if ($this->container['advertisement_role'] === null) {
            $invalidProperties[] = "'advertisement_role' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets adv_no
     *
     * @return string
     */
    public function getAdvNo()
    {
        return $this->container['adv_no'];
    }

    /**
     * Sets adv_no
     *
     * @param string $adv_no adv_no
     *
     * @return self
     */
    public function setAdvNo($adv_no)
    {
        if (is_null($adv_no)) {
            throw new \InvalidArgumentException('non-nullable adv_no cannot be null');
        }
        $this->container['adv_no'] = $adv_no;

        return $this;
    }

    /**
     * Gets trade_type
     *
     * @return string
     */
    public function getTradeType()
    {
        return $this->container['trade_type'];
    }

    /**
     * Sets trade_type
     *
     * @param string $trade_type trade_type
     *
     * @return self
     */
    public function setTradeType($trade_type)
    {
        if (is_null($trade_type)) {
            throw new \InvalidArgumentException('non-nullable trade_type cannot be null');
        }
        $this->container['trade_type'] = $trade_type;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets fiat
     *
     * @return string
     */
    public function getFiat()
    {
        return $this->container['fiat'];
    }

    /**
     * Sets fiat
     *
     * @param string $fiat fiat
     *
     * @return self
     */
    public function setFiat($fiat)
    {
        if (is_null($fiat)) {
            throw new \InvalidArgumentException('non-nullable fiat cannot be null');
        }
        $this->container['fiat'] = $fiat;

        return $this;
    }

    /**
     * Gets fiat_symbol
     *
     * @return string
     */
    public function getFiatSymbol()
    {
        return $this->container['fiat_symbol'];
    }

    /**
     * Sets fiat_symbol
     *
     * @param string $fiat_symbol fiat_symbol
     *
     * @return self
     */
    public function setFiatSymbol($fiat_symbol)
    {
        if (is_null($fiat_symbol)) {
            throw new \InvalidArgumentException('non-nullable fiat_symbol cannot be null');
        }
        $this->container['fiat_symbol'] = $fiat_symbol;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount Quantity (in Crypto)
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string $total_price total_price
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param string $unit_price Unit Price (in Fiat)
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return int
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param int $create_time create_time
     *
     * @return self
     */
    public function setCreateTime($create_time)
    {
        if (is_null($create_time)) {
            throw new \InvalidArgumentException('non-nullable create_time cannot be null');
        }
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string $commission Transaction Fee (in Crypto)
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets counter_part_nick_name
     *
     * @return string
     */
    public function getCounterPartNickName()
    {
        return $this->container['counter_part_nick_name'];
    }

    /**
     * Sets counter_part_nick_name
     *
     * @param string $counter_part_nick_name counter_part_nick_name
     *
     * @return self
     */
    public function setCounterPartNickName($counter_part_nick_name)
    {
        if (is_null($counter_part_nick_name)) {
            throw new \InvalidArgumentException('non-nullable counter_part_nick_name cannot be null');
        }
        $this->container['counter_part_nick_name'] = $counter_part_nick_name;

        return $this;
    }

    /**
     * Gets advertisement_role
     *
     * @return string
     */
    public function getAdvertisementRole()
    {
        return $this->container['advertisement_role'];
    }

    /**
     * Sets advertisement_role
     *
     * @param string $advertisement_role advertisement_role
     *
     * @return self
     */
    public function setAdvertisementRole($advertisement_role)
    {
        if (is_null($advertisement_role)) {
            throw new \InvalidArgumentException('non-nullable advertisement_role cannot be null');
        }
        $this->container['advertisement_role'] = $advertisement_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


