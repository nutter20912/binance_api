<?php
/**
 * SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SapiV1CapitalConfigGetallGet200ResponseInnerNetworkListInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sapi_v1_capital_config_getall_get_200_response_inner_networkList_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_regex' => 'string',
        'coin' => 'string',
        'deposit_desc' => 'string',
        'deposit_enable' => 'bool',
        'is_default' => 'bool',
        'memo_regex' => 'string',
        'min_confirm' => 'int',
        'name' => 'string',
        'network' => 'string',
        'reset_address_status' => 'bool',
        'special_tips' => 'string',
        'un_lock_confirm' => 'int',
        'withdraw_desc' => 'string',
        'withdraw_enable' => 'bool',
        'withdraw_fee' => 'string',
        'withdraw_integer_multiple' => 'string',
        'withdraw_max' => 'string',
        'withdraw_min' => 'string',
        'same_address' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_regex' => null,
        'coin' => null,
        'deposit_desc' => null,
        'deposit_enable' => null,
        'is_default' => null,
        'memo_regex' => null,
        'min_confirm' => 'int64',
        'name' => null,
        'network' => null,
        'reset_address_status' => null,
        'special_tips' => null,
        'un_lock_confirm' => 'int64',
        'withdraw_desc' => null,
        'withdraw_enable' => null,
        'withdraw_fee' => null,
        'withdraw_integer_multiple' => null,
        'withdraw_max' => null,
        'withdraw_min' => null,
        'same_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_regex' => false,
		'coin' => false,
		'deposit_desc' => false,
		'deposit_enable' => false,
		'is_default' => false,
		'memo_regex' => false,
		'min_confirm' => false,
		'name' => false,
		'network' => false,
		'reset_address_status' => false,
		'special_tips' => false,
		'un_lock_confirm' => false,
		'withdraw_desc' => false,
		'withdraw_enable' => false,
		'withdraw_fee' => false,
		'withdraw_integer_multiple' => false,
		'withdraw_max' => false,
		'withdraw_min' => false,
		'same_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_regex' => 'addressRegex',
        'coin' => 'coin',
        'deposit_desc' => 'depositDesc',
        'deposit_enable' => 'depositEnable',
        'is_default' => 'isDefault',
        'memo_regex' => 'memoRegex',
        'min_confirm' => 'minConfirm',
        'name' => 'name',
        'network' => 'network',
        'reset_address_status' => 'resetAddressStatus',
        'special_tips' => 'specialTips',
        'un_lock_confirm' => 'unLockConfirm',
        'withdraw_desc' => 'withdrawDesc',
        'withdraw_enable' => 'withdrawEnable',
        'withdraw_fee' => 'withdrawFee',
        'withdraw_integer_multiple' => 'withdrawIntegerMultiple',
        'withdraw_max' => 'withdrawMax',
        'withdraw_min' => 'withdrawMin',
        'same_address' => 'sameAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_regex' => 'setAddressRegex',
        'coin' => 'setCoin',
        'deposit_desc' => 'setDepositDesc',
        'deposit_enable' => 'setDepositEnable',
        'is_default' => 'setIsDefault',
        'memo_regex' => 'setMemoRegex',
        'min_confirm' => 'setMinConfirm',
        'name' => 'setName',
        'network' => 'setNetwork',
        'reset_address_status' => 'setResetAddressStatus',
        'special_tips' => 'setSpecialTips',
        'un_lock_confirm' => 'setUnLockConfirm',
        'withdraw_desc' => 'setWithdrawDesc',
        'withdraw_enable' => 'setWithdrawEnable',
        'withdraw_fee' => 'setWithdrawFee',
        'withdraw_integer_multiple' => 'setWithdrawIntegerMultiple',
        'withdraw_max' => 'setWithdrawMax',
        'withdraw_min' => 'setWithdrawMin',
        'same_address' => 'setSameAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_regex' => 'getAddressRegex',
        'coin' => 'getCoin',
        'deposit_desc' => 'getDepositDesc',
        'deposit_enable' => 'getDepositEnable',
        'is_default' => 'getIsDefault',
        'memo_regex' => 'getMemoRegex',
        'min_confirm' => 'getMinConfirm',
        'name' => 'getName',
        'network' => 'getNetwork',
        'reset_address_status' => 'getResetAddressStatus',
        'special_tips' => 'getSpecialTips',
        'un_lock_confirm' => 'getUnLockConfirm',
        'withdraw_desc' => 'getWithdrawDesc',
        'withdraw_enable' => 'getWithdrawEnable',
        'withdraw_fee' => 'getWithdrawFee',
        'withdraw_integer_multiple' => 'getWithdrawIntegerMultiple',
        'withdraw_max' => 'getWithdrawMax',
        'withdraw_min' => 'getWithdrawMin',
        'same_address' => 'getSameAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_regex', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('deposit_desc', $data ?? [], null);
        $this->setIfExists('deposit_enable', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('memo_regex', $data ?? [], null);
        $this->setIfExists('min_confirm', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('reset_address_status', $data ?? [], null);
        $this->setIfExists('special_tips', $data ?? [], null);
        $this->setIfExists('un_lock_confirm', $data ?? [], null);
        $this->setIfExists('withdraw_desc', $data ?? [], null);
        $this->setIfExists('withdraw_enable', $data ?? [], null);
        $this->setIfExists('withdraw_fee', $data ?? [], null);
        $this->setIfExists('withdraw_integer_multiple', $data ?? [], null);
        $this->setIfExists('withdraw_max', $data ?? [], null);
        $this->setIfExists('withdraw_min', $data ?? [], null);
        $this->setIfExists('same_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_regex'] === null) {
            $invalidProperties[] = "'address_regex' can't be null";
        }
        if ($this->container['coin'] === null) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if ($this->container['deposit_desc'] === null) {
            $invalidProperties[] = "'deposit_desc' can't be null";
        }
        if ($this->container['deposit_enable'] === null) {
            $invalidProperties[] = "'deposit_enable' can't be null";
        }
        if ($this->container['is_default'] === null) {
            $invalidProperties[] = "'is_default' can't be null";
        }
        if ($this->container['memo_regex'] === null) {
            $invalidProperties[] = "'memo_regex' can't be null";
        }
        if ($this->container['min_confirm'] === null) {
            $invalidProperties[] = "'min_confirm' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ($this->container['reset_address_status'] === null) {
            $invalidProperties[] = "'reset_address_status' can't be null";
        }
        if ($this->container['special_tips'] === null) {
            $invalidProperties[] = "'special_tips' can't be null";
        }
        if ($this->container['un_lock_confirm'] === null) {
            $invalidProperties[] = "'un_lock_confirm' can't be null";
        }
        if ($this->container['withdraw_desc'] === null) {
            $invalidProperties[] = "'withdraw_desc' can't be null";
        }
        if ($this->container['withdraw_enable'] === null) {
            $invalidProperties[] = "'withdraw_enable' can't be null";
        }
        if ($this->container['withdraw_fee'] === null) {
            $invalidProperties[] = "'withdraw_fee' can't be null";
        }
        if ($this->container['withdraw_integer_multiple'] === null) {
            $invalidProperties[] = "'withdraw_integer_multiple' can't be null";
        }
        if ($this->container['withdraw_max'] === null) {
            $invalidProperties[] = "'withdraw_max' can't be null";
        }
        if ($this->container['withdraw_min'] === null) {
            $invalidProperties[] = "'withdraw_min' can't be null";
        }
        if ($this->container['same_address'] === null) {
            $invalidProperties[] = "'same_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_regex
     *
     * @return string
     */
    public function getAddressRegex()
    {
        return $this->container['address_regex'];
    }

    /**
     * Sets address_regex
     *
     * @param string $address_regex address_regex
     *
     * @return self
     */
    public function setAddressRegex($address_regex)
    {
        if (is_null($address_regex)) {
            throw new \InvalidArgumentException('non-nullable address_regex cannot be null');
        }
        $this->container['address_regex'] = $address_regex;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets deposit_desc
     *
     * @return string
     */
    public function getDepositDesc()
    {
        return $this->container['deposit_desc'];
    }

    /**
     * Sets deposit_desc
     *
     * @param string $deposit_desc shown only when \"depositEnable\" is false.
     *
     * @return self
     */
    public function setDepositDesc($deposit_desc)
    {
        if (is_null($deposit_desc)) {
            throw new \InvalidArgumentException('non-nullable deposit_desc cannot be null');
        }
        $this->container['deposit_desc'] = $deposit_desc;

        return $this;
    }

    /**
     * Gets deposit_enable
     *
     * @return bool
     */
    public function getDepositEnable()
    {
        return $this->container['deposit_enable'];
    }

    /**
     * Sets deposit_enable
     *
     * @param bool $deposit_enable deposit_enable
     *
     * @return self
     */
    public function setDepositEnable($deposit_enable)
    {
        if (is_null($deposit_enable)) {
            throw new \InvalidArgumentException('non-nullable deposit_enable cannot be null');
        }
        $this->container['deposit_enable'] = $deposit_enable;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets memo_regex
     *
     * @return string
     */
    public function getMemoRegex()
    {
        return $this->container['memo_regex'];
    }

    /**
     * Sets memo_regex
     *
     * @param string $memo_regex memo_regex
     *
     * @return self
     */
    public function setMemoRegex($memo_regex)
    {
        if (is_null($memo_regex)) {
            throw new \InvalidArgumentException('non-nullable memo_regex cannot be null');
        }
        $this->container['memo_regex'] = $memo_regex;

        return $this;
    }

    /**
     * Gets min_confirm
     *
     * @return int
     */
    public function getMinConfirm()
    {
        return $this->container['min_confirm'];
    }

    /**
     * Sets min_confirm
     *
     * @param int $min_confirm min number for balance confirmation.
     *
     * @return self
     */
    public function setMinConfirm($min_confirm)
    {
        if (is_null($min_confirm)) {
            throw new \InvalidArgumentException('non-nullable min_confirm cannot be null');
        }
        $this->container['min_confirm'] = $min_confirm;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets reset_address_status
     *
     * @return bool
     */
    public function getResetAddressStatus()
    {
        return $this->container['reset_address_status'];
    }

    /**
     * Sets reset_address_status
     *
     * @param bool $reset_address_status reset_address_status
     *
     * @return self
     */
    public function setResetAddressStatus($reset_address_status)
    {
        if (is_null($reset_address_status)) {
            throw new \InvalidArgumentException('non-nullable reset_address_status cannot be null');
        }
        $this->container['reset_address_status'] = $reset_address_status;

        return $this;
    }

    /**
     * Gets special_tips
     *
     * @return string
     */
    public function getSpecialTips()
    {
        return $this->container['special_tips'];
    }

    /**
     * Sets special_tips
     *
     * @param string $special_tips special_tips
     *
     * @return self
     */
    public function setSpecialTips($special_tips)
    {
        if (is_null($special_tips)) {
            throw new \InvalidArgumentException('non-nullable special_tips cannot be null');
        }
        $this->container['special_tips'] = $special_tips;

        return $this;
    }

    /**
     * Gets un_lock_confirm
     *
     * @return int
     */
    public function getUnLockConfirm()
    {
        return $this->container['un_lock_confirm'];
    }

    /**
     * Sets un_lock_confirm
     *
     * @param int $un_lock_confirm confirmation number for balance unlock.
     *
     * @return self
     */
    public function setUnLockConfirm($un_lock_confirm)
    {
        if (is_null($un_lock_confirm)) {
            throw new \InvalidArgumentException('non-nullable un_lock_confirm cannot be null');
        }
        $this->container['un_lock_confirm'] = $un_lock_confirm;

        return $this;
    }

    /**
     * Gets withdraw_desc
     *
     * @return string
     */
    public function getWithdrawDesc()
    {
        return $this->container['withdraw_desc'];
    }

    /**
     * Sets withdraw_desc
     *
     * @param string $withdraw_desc shown only when \"withdrawEnable\" is false
     *
     * @return self
     */
    public function setWithdrawDesc($withdraw_desc)
    {
        if (is_null($withdraw_desc)) {
            throw new \InvalidArgumentException('non-nullable withdraw_desc cannot be null');
        }
        $this->container['withdraw_desc'] = $withdraw_desc;

        return $this;
    }

    /**
     * Gets withdraw_enable
     *
     * @return bool
     */
    public function getWithdrawEnable()
    {
        return $this->container['withdraw_enable'];
    }

    /**
     * Sets withdraw_enable
     *
     * @param bool $withdraw_enable withdraw_enable
     *
     * @return self
     */
    public function setWithdrawEnable($withdraw_enable)
    {
        if (is_null($withdraw_enable)) {
            throw new \InvalidArgumentException('non-nullable withdraw_enable cannot be null');
        }
        $this->container['withdraw_enable'] = $withdraw_enable;

        return $this;
    }

    /**
     * Gets withdraw_fee
     *
     * @return string
     */
    public function getWithdrawFee()
    {
        return $this->container['withdraw_fee'];
    }

    /**
     * Sets withdraw_fee
     *
     * @param string $withdraw_fee withdraw_fee
     *
     * @return self
     */
    public function setWithdrawFee($withdraw_fee)
    {
        if (is_null($withdraw_fee)) {
            throw new \InvalidArgumentException('non-nullable withdraw_fee cannot be null');
        }
        $this->container['withdraw_fee'] = $withdraw_fee;

        return $this;
    }

    /**
     * Gets withdraw_integer_multiple
     *
     * @return string
     */
    public function getWithdrawIntegerMultiple()
    {
        return $this->container['withdraw_integer_multiple'];
    }

    /**
     * Sets withdraw_integer_multiple
     *
     * @param string $withdraw_integer_multiple withdraw_integer_multiple
     *
     * @return self
     */
    public function setWithdrawIntegerMultiple($withdraw_integer_multiple)
    {
        if (is_null($withdraw_integer_multiple)) {
            throw new \InvalidArgumentException('non-nullable withdraw_integer_multiple cannot be null');
        }
        $this->container['withdraw_integer_multiple'] = $withdraw_integer_multiple;

        return $this;
    }

    /**
     * Gets withdraw_max
     *
     * @return string
     */
    public function getWithdrawMax()
    {
        return $this->container['withdraw_max'];
    }

    /**
     * Sets withdraw_max
     *
     * @param string $withdraw_max withdraw_max
     *
     * @return self
     */
    public function setWithdrawMax($withdraw_max)
    {
        if (is_null($withdraw_max)) {
            throw new \InvalidArgumentException('non-nullable withdraw_max cannot be null');
        }
        $this->container['withdraw_max'] = $withdraw_max;

        return $this;
    }

    /**
     * Gets withdraw_min
     *
     * @return string
     */
    public function getWithdrawMin()
    {
        return $this->container['withdraw_min'];
    }

    /**
     * Sets withdraw_min
     *
     * @param string $withdraw_min withdraw_min
     *
     * @return self
     */
    public function setWithdrawMin($withdraw_min)
    {
        if (is_null($withdraw_min)) {
            throw new \InvalidArgumentException('non-nullable withdraw_min cannot be null');
        }
        $this->container['withdraw_min'] = $withdraw_min;

        return $this;
    }

    /**
     * Gets same_address
     *
     * @return bool
     */
    public function getSameAddress()
    {
        return $this->container['same_address'];
    }

    /**
     * Sets same_address
     *
     * @param bool $same_address same_address
     *
     * @return self
     */
    public function setSameAddress($same_address)
    {
        if (is_null($same_address)) {
            throw new \InvalidArgumentException('non-nullable same_address cannot be null');
        }
        $this->container['same_address'] = $same_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


