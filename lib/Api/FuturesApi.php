<?php
/**
 * FuturesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FuturesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FuturesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sapiV1FuturesLoanAdjustCollateralHistoryGet' => [
            'application/json',
        ],
        'sapiV1FuturesLoanBorrowHistoryGet' => [
            'application/json',
        ],
        'sapiV1FuturesLoanInterestHistoryGet' => [
            'application/json',
        ],
        'sapiV1FuturesLoanLiquidationHistoryGet' => [
            'application/json',
        ],
        'sapiV1FuturesLoanRepayHistoryGet' => [
            'application/json',
        ],
        'sapiV1FuturesTransferGet' => [
            'application/json',
        ],
        'sapiV1FuturesTransferPost' => [
            'application/json',
        ],
        'sapiV2FuturesLoanWalletGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sapiV1FuturesLoanAdjustCollateralHistoryGet
     *
     * Adjust Cross-Collateral LTV History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesLoanAdjustCollateralHistoryGet($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'][0])
    {
        list($response) = $this->sapiV1FuturesLoanAdjustCollateralHistoryGetWithHttpInfo($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesLoanAdjustCollateralHistoryGetWithHttpInfo
     *
     * Adjust Cross-Collateral LTV History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesLoanAdjustCollateralHistoryGetWithHttpInfo($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'][0])
    {
        $request = $this->sapiV1FuturesLoanAdjustCollateralHistoryGetRequest($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesLoanAdjustCollateralHistoryGetAsync
     *
     * Adjust Cross-Collateral LTV History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanAdjustCollateralHistoryGetAsync($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'][0])
    {
        return $this->sapiV1FuturesLoanAdjustCollateralHistoryGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesLoanAdjustCollateralHistoryGetAsyncWithHttpInfo
     *
     * Adjust Cross-Collateral LTV History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanAdjustCollateralHistoryGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanAdjustCollateralHistoryGet200Response';
        $request = $this->sapiV1FuturesLoanAdjustCollateralHistoryGetRequest($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesLoanAdjustCollateralHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesLoanAdjustCollateralHistoryGetRequest($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanAdjustCollateralHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesLoanAdjustCollateralHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesLoanAdjustCollateralHistoryGet'
            );
        }








        $resourcePath = '/sapi/v1/futures/loan/adjustCollateral/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesLoanBorrowHistoryGet
     *
     * Cross-Collateral Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesLoanBorrowHistoryGet($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'][0])
    {
        list($response) = $this->sapiV1FuturesLoanBorrowHistoryGetWithHttpInfo($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesLoanBorrowHistoryGetWithHttpInfo
     *
     * Cross-Collateral Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesLoanBorrowHistoryGetWithHttpInfo($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'][0])
    {
        $request = $this->sapiV1FuturesLoanBorrowHistoryGetRequest($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesLoanBorrowHistoryGetAsync
     *
     * Cross-Collateral Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanBorrowHistoryGetAsync($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'][0])
    {
        return $this->sapiV1FuturesLoanBorrowHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesLoanBorrowHistoryGetAsyncWithHttpInfo
     *
     * Cross-Collateral Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanBorrowHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanBorrowHistoryGet200Response';
        $request = $this->sapiV1FuturesLoanBorrowHistoryGetRequest($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesLoanBorrowHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesLoanBorrowHistoryGetRequest($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanBorrowHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesLoanBorrowHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesLoanBorrowHistoryGet'
            );
        }







        $resourcePath = '/sapi/v1/futures/loan/borrow/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesLoanInterestHistoryGet
     *
     * Cross-Collateral Interest History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesLoanInterestHistoryGet($timestamp, $signature, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'][0])
    {
        list($response) = $this->sapiV1FuturesLoanInterestHistoryGetWithHttpInfo($timestamp, $signature, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesLoanInterestHistoryGetWithHttpInfo
     *
     * Cross-Collateral Interest History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesLoanInterestHistoryGetWithHttpInfo($timestamp, $signature, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'][0])
    {
        $request = $this->sapiV1FuturesLoanInterestHistoryGetRequest($timestamp, $signature, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesLoanInterestHistoryGetAsync
     *
     * Cross-Collateral Interest History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanInterestHistoryGetAsync($timestamp, $signature, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'][0])
    {
        return $this->sapiV1FuturesLoanInterestHistoryGetAsyncWithHttpInfo($timestamp, $signature, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesLoanInterestHistoryGetAsyncWithHttpInfo
     *
     * Cross-Collateral Interest History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanInterestHistoryGetAsyncWithHttpInfo($timestamp, $signature, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanInterestHistoryGet200Response';
        $request = $this->sapiV1FuturesLoanInterestHistoryGetRequest($timestamp, $signature, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesLoanInterestHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesLoanInterestHistoryGetRequest($timestamp, $signature, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanInterestHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesLoanInterestHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesLoanInterestHistoryGet'
            );
        }








        $resourcePath = '/sapi/v1/futures/loan/interestHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesLoanLiquidationHistoryGet
     *
     * Cross-Collateral Liquidation History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesLoanLiquidationHistoryGet($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'][0])
    {
        list($response) = $this->sapiV1FuturesLoanLiquidationHistoryGetWithHttpInfo($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesLoanLiquidationHistoryGetWithHttpInfo
     *
     * Cross-Collateral Liquidation History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesLoanLiquidationHistoryGetWithHttpInfo($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'][0])
    {
        $request = $this->sapiV1FuturesLoanLiquidationHistoryGetRequest($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesLoanLiquidationHistoryGetAsync
     *
     * Cross-Collateral Liquidation History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanLiquidationHistoryGetAsync($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'][0])
    {
        return $this->sapiV1FuturesLoanLiquidationHistoryGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesLoanLiquidationHistoryGetAsyncWithHttpInfo
     *
     * Cross-Collateral Liquidation History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanLiquidationHistoryGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanLiquidationHistoryGet200Response';
        $request = $this->sapiV1FuturesLoanLiquidationHistoryGetRequest($timestamp, $signature, $loan_coin, $collateral_coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesLoanLiquidationHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesLoanLiquidationHistoryGetRequest($timestamp, $signature, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanLiquidationHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesLoanLiquidationHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesLoanLiquidationHistoryGet'
            );
        }








        $resourcePath = '/sapi/v1/futures/loan/liquidationHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesLoanRepayHistoryGet
     *
     * Cross-Collateral Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesLoanRepayHistoryGet($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'][0])
    {
        list($response) = $this->sapiV1FuturesLoanRepayHistoryGetWithHttpInfo($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesLoanRepayHistoryGetWithHttpInfo
     *
     * Cross-Collateral Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesLoanRepayHistoryGetWithHttpInfo($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'][0])
    {
        $request = $this->sapiV1FuturesLoanRepayHistoryGetRequest($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesLoanRepayHistoryGetAsync
     *
     * Cross-Collateral Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanRepayHistoryGetAsync($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'][0])
    {
        return $this->sapiV1FuturesLoanRepayHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesLoanRepayHistoryGetAsyncWithHttpInfo
     *
     * Cross-Collateral Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesLoanRepayHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesLoanRepayHistoryGet200Response';
        $request = $this->sapiV1FuturesLoanRepayHistoryGetRequest($timestamp, $signature, $coin, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesLoanRepayHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesLoanRepayHistoryGetRequest($timestamp, $signature, $coin = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesLoanRepayHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesLoanRepayHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesLoanRepayHistoryGet'
            );
        }







        $resourcePath = '/sapi/v1/futures/loan/repay/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesTransferGet
     *
     * Get Future Account Transaction History List (USER_DATA)
     *
     * @param  string $asset asset (required)
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesTransferGet($asset, $start_time, $timestamp, $signature, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferGet'][0])
    {
        list($response) = $this->sapiV1FuturesTransferGetWithHttpInfo($asset, $start_time, $timestamp, $signature, $end_time, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesTransferGetWithHttpInfo
     *
     * Get Future Account Transaction History List (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesTransferGetWithHttpInfo($asset, $start_time, $timestamp, $signature, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferGet'][0])
    {
        $request = $this->sapiV1FuturesTransferGetRequest($asset, $start_time, $timestamp, $signature, $end_time, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesTransferGetAsync
     *
     * Get Future Account Transaction History List (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesTransferGetAsync($asset, $start_time, $timestamp, $signature, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferGet'][0])
    {
        return $this->sapiV1FuturesTransferGetAsyncWithHttpInfo($asset, $start_time, $timestamp, $signature, $end_time, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesTransferGetAsyncWithHttpInfo
     *
     * Get Future Account Transaction History List (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesTransferGetAsyncWithHttpInfo($asset, $start_time, $timestamp, $signature, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesTransferGet200Response';
        $request = $this->sapiV1FuturesTransferGetRequest($asset, $start_time, $timestamp, $signature, $end_time, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesTransferGet'
     *
     * @param  string $asset (required)
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesTransferGetRequest($asset, $start_time, $timestamp, $signature, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferGet'][0])
    {

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling sapiV1FuturesTransferGet'
            );
        }

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling sapiV1FuturesTransferGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesTransferGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesTransferGet'
            );
        }






        $resourcePath = '/sapi/v1/futures/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1FuturesTransferPost
     *
     * New Future Account Transfer (USER_DATA)
     *
     * @param  string $asset asset (required)
     * @param  float $amount amount (required)
     * @param  int $type 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1FuturesTransferPost($asset, $amount, $type, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferPost'][0])
    {
        list($response) = $this->sapiV1FuturesTransferPostWithHttpInfo($asset, $amount, $type, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1FuturesTransferPostWithHttpInfo
     *
     * New Future Account Transfer (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $type 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1FuturesTransferPostWithHttpInfo($asset, $amount, $type, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferPost'][0])
    {
        $request = $this->sapiV1FuturesTransferPostRequest($asset, $amount, $type, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1FuturesTransferPostAsync
     *
     * New Future Account Transfer (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $type 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesTransferPostAsync($asset, $amount, $type, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferPost'][0])
    {
        return $this->sapiV1FuturesTransferPostAsyncWithHttpInfo($asset, $amount, $type, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1FuturesTransferPostAsyncWithHttpInfo
     *
     * New Future Account Transfer (USER_DATA)
     *
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $type 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1FuturesTransferPostAsyncWithHttpInfo($asset, $amount, $type, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1FuturesTransferPost200Response';
        $request = $this->sapiV1FuturesTransferPostRequest($asset, $amount, $type, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1FuturesTransferPost'
     *
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $type 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1FuturesTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1FuturesTransferPostRequest($asset, $amount, $type, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1FuturesTransferPost'][0])
    {

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling sapiV1FuturesTransferPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1FuturesTransferPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sapiV1FuturesTransferPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1FuturesTransferPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1FuturesTransferPost'
            );
        }



        $resourcePath = '/sapi/v1/futures/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV2FuturesLoanWalletGet
     *
     * Cross-Collateral Wallet V2 (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV2FuturesLoanWalletGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV2FuturesLoanWalletGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV2FuturesLoanWalletGet'][0])
    {
        list($response) = $this->sapiV2FuturesLoanWalletGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV2FuturesLoanWalletGetWithHttpInfo
     *
     * Cross-Collateral Wallet V2 (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV2FuturesLoanWalletGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV2FuturesLoanWalletGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV2FuturesLoanWalletGet'][0])
    {
        $request = $this->sapiV2FuturesLoanWalletGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV2FuturesLoanWalletGetAsync
     *
     * Cross-Collateral Wallet V2 (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV2FuturesLoanWalletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV2FuturesLoanWalletGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV2FuturesLoanWalletGet'][0])
    {
        return $this->sapiV2FuturesLoanWalletGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV2FuturesLoanWalletGetAsyncWithHttpInfo
     *
     * Cross-Collateral Wallet V2 (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV2FuturesLoanWalletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV2FuturesLoanWalletGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV2FuturesLoanWalletGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV2FuturesLoanWalletGet200Response';
        $request = $this->sapiV2FuturesLoanWalletGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV2FuturesLoanWalletGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV2FuturesLoanWalletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV2FuturesLoanWalletGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV2FuturesLoanWalletGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV2FuturesLoanWalletGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV2FuturesLoanWalletGet'
            );
        }



        $resourcePath = '/sapi/v2/futures/loan/wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
