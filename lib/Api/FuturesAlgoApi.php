<?php
/**
 * FuturesAlgoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FuturesAlgoApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FuturesAlgoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sapiV1AlgoFuturesHistoricalOrdersGet' => [
            'application/json',
        ],
        'sapiV1AlgoFuturesNewOrderTwapPost' => [
            'application/json',
        ],
        'sapiV1AlgoFuturesNewOrderVpPost' => [
            'application/json',
        ],
        'sapiV1AlgoFuturesOpenOrdersGet' => [
            'application/json',
        ],
        'sapiV1AlgoFuturesOrderDelete' => [
            'application/json',
        ],
        'sapiV1AlgoFuturesSubOrdersGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sapiV1AlgoFuturesHistoricalOrdersGet
     *
     * Query Historical Algo Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  string $side side (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesHistoricalOrdersGet($timestamp, $signature, $symbol = null, $side = null, $start_time = null, $end_time = null, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesHistoricalOrdersGetWithHttpInfo($timestamp, $signature, $symbol, $side, $start_time, $end_time, $page, $page_size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesHistoricalOrdersGetWithHttpInfo
     *
     * Query Historical Algo Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  string $side (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesHistoricalOrdersGetWithHttpInfo($timestamp, $signature, $symbol = null, $side = null, $start_time = null, $end_time = null, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'][0])
    {
        $request = $this->sapiV1AlgoFuturesHistoricalOrdersGetRequest($timestamp, $signature, $symbol, $side, $start_time, $end_time, $page, $page_size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesHistoricalOrdersGetAsync
     *
     * Query Historical Algo Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  string $side (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesHistoricalOrdersGetAsync($timestamp, $signature, $symbol = null, $side = null, $start_time = null, $end_time = null, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'][0])
    {
        return $this->sapiV1AlgoFuturesHistoricalOrdersGetAsyncWithHttpInfo($timestamp, $signature, $symbol, $side, $start_time, $end_time, $page, $page_size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesHistoricalOrdersGetAsyncWithHttpInfo
     *
     * Query Historical Algo Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  string $side (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesHistoricalOrdersGetAsyncWithHttpInfo($timestamp, $signature, $symbol = null, $side = null, $start_time = null, $end_time = null, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesHistoricalOrdersGet200Response';
        $request = $this->sapiV1AlgoFuturesHistoricalOrdersGetRequest($timestamp, $signature, $symbol, $side, $start_time, $end_time, $page, $page_size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesHistoricalOrdersGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  string $side (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesHistoricalOrdersGetRequest($timestamp, $signature, $symbol = null, $side = null, $start_time = null, $end_time = null, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesHistoricalOrdersGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesHistoricalOrdersGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesHistoricalOrdersGet'
            );
        }









        $resourcePath = '/sapi/v1/algo/futures/historicalOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $side,
            'side', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderTwapPost
     *
     * Time-Weighted Average Price(Twap) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  int $duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesNewOrderTwapPost($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesNewOrderTwapPostWithHttpInfo($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderTwapPostWithHttpInfo
     *
     * Time-Weighted Average Price(Twap) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  int $duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesNewOrderTwapPostWithHttpInfo($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'][0])
    {
        $request = $this->sapiV1AlgoFuturesNewOrderTwapPostRequest($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderTwapPostAsync
     *
     * Time-Weighted Average Price(Twap) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  int $duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesNewOrderTwapPostAsync($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'][0])
    {
        return $this->sapiV1AlgoFuturesNewOrderTwapPostAsyncWithHttpInfo($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderTwapPostAsyncWithHttpInfo
     *
     * Time-Weighted Average Price(Twap) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  int $duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesNewOrderTwapPostAsyncWithHttpInfo($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response';
        $request = $this->sapiV1AlgoFuturesNewOrderTwapPostRequest($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesNewOrderTwapPost'
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  int $duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesNewOrderTwapPostRequest($symbol, $side, $quantity, $duration, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderTwapPost'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }

        // verify the required parameter 'side' is set
        if ($side === null || (is_array($side) && count($side) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $side when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }

        // verify the required parameter 'quantity' is set
        if ($quantity === null || (is_array($quantity) && count($quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }

        // verify the required parameter 'duration' is set
        if ($duration === null || (is_array($duration) && count($duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duration when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesNewOrderTwapPost'
            );
        }







        $resourcePath = '/sapi/v1/algo/futures/newOrderTwap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $side,
            'side', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_side,
            'positionSide', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'quantity', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duration,
            'duration', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_algo_id,
            'clientAlgoId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reduce_only,
            'reduceOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_price,
            'limitPrice', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderVpPost
     *
     * Volume Participation(VP) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  string $urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesNewOrderVpPost($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesNewOrderVpPostWithHttpInfo($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderVpPostWithHttpInfo
     *
     * Volume Participation(VP) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  string $urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesNewOrderVpPostWithHttpInfo($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'][0])
    {
        $request = $this->sapiV1AlgoFuturesNewOrderVpPostRequest($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderVpPostAsync
     *
     * Volume Participation(VP) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  string $urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesNewOrderVpPostAsync($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'][0])
    {
        return $this->sapiV1AlgoFuturesNewOrderVpPostAsyncWithHttpInfo($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesNewOrderVpPostAsyncWithHttpInfo
     *
     * Volume Participation(VP) New Order (TRADE)
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  string $urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesNewOrderVpPostAsyncWithHttpInfo($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesNewOrderVpPost200Response';
        $request = $this->sapiV1AlgoFuturesNewOrderVpPostRequest($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side, $client_algo_id, $reduce_only, $limit_price, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesNewOrderVpPost'
     *
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (required)
     * @param  string $side (required)
     * @param  float $quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
     * @param  string $urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_side Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. (optional)
     * @param  string $client_algo_id A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value (optional)
     * @param  bool $reduce_only &#39;true&#39; or &#39;false&#39;. Default &#39;false&#39;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position (optional)
     * @param  float $limit_price Limit price of the order; If it is not sent, will place order by market price by default (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesNewOrderVpPostRequest($symbol, $side, $quantity, $urgency, $timestamp, $signature, $position_side = null, $client_algo_id = null, $reduce_only = null, $limit_price = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesNewOrderVpPost'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }

        // verify the required parameter 'side' is set
        if ($side === null || (is_array($side) && count($side) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $side when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }

        // verify the required parameter 'quantity' is set
        if ($quantity === null || (is_array($quantity) && count($quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }

        // verify the required parameter 'urgency' is set
        if ($urgency === null || (is_array($urgency) && count($urgency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $urgency when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesNewOrderVpPost'
            );
        }







        $resourcePath = '/sapi/v1/algo/futures/newOrderVp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $side,
            'side', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_side,
            'positionSide', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'quantity', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $urgency,
            'urgency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_algo_id,
            'clientAlgoId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reduce_only,
            'reduceOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_price,
            'limitPrice', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AlgoFuturesOpenOrdersGet
     *
     * Query Current Algo Open Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesOpenOrdersGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesOpenOrdersGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesOpenOrdersGetWithHttpInfo
     *
     * Query Current Algo Open Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesOpenOrdersGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'][0])
    {
        $request = $this->sapiV1AlgoFuturesOpenOrdersGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesOpenOrdersGetAsync
     *
     * Query Current Algo Open Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesOpenOrdersGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'][0])
    {
        return $this->sapiV1AlgoFuturesOpenOrdersGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesOpenOrdersGetAsyncWithHttpInfo
     *
     * Query Current Algo Open Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesOpenOrdersGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesOpenOrdersGet200Response';
        $request = $this->sapiV1AlgoFuturesOpenOrdersGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesOpenOrdersGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesOpenOrdersGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOpenOrdersGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesOpenOrdersGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesOpenOrdersGet'
            );
        }



        $resourcePath = '/sapi/v1/algo/futures/openOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AlgoFuturesOrderDelete
     *
     * Cancel Algo Order(TRADE)
     *
     * @param  int $algo_id Eg. 14511 (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOrderDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesOrderDelete($algo_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOrderDelete'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesOrderDeleteWithHttpInfo($algo_id, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesOrderDeleteWithHttpInfo
     *
     * Cancel Algo Order(TRADE)
     *
     * @param  int $algo_id Eg. 14511 (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOrderDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesOrderDeleteWithHttpInfo($algo_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOrderDelete'][0])
    {
        $request = $this->sapiV1AlgoFuturesOrderDeleteRequest($algo_id, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesOrderDeleteAsync
     *
     * Cancel Algo Order(TRADE)
     *
     * @param  int $algo_id Eg. 14511 (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesOrderDeleteAsync($algo_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOrderDelete'][0])
    {
        return $this->sapiV1AlgoFuturesOrderDeleteAsyncWithHttpInfo($algo_id, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesOrderDeleteAsyncWithHttpInfo
     *
     * Cancel Algo Order(TRADE)
     *
     * @param  int $algo_id Eg. 14511 (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesOrderDeleteAsyncWithHttpInfo($algo_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOrderDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesOrderDelete200Response';
        $request = $this->sapiV1AlgoFuturesOrderDeleteRequest($algo_id, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesOrderDelete'
     *
     * @param  int $algo_id Eg. 14511 (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesOrderDeleteRequest($algo_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesOrderDelete'][0])
    {

        // verify the required parameter 'algo_id' is set
        if ($algo_id === null || (is_array($algo_id) && count($algo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $algo_id when calling sapiV1AlgoFuturesOrderDelete'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesOrderDelete'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesOrderDelete'
            );
        }



        $resourcePath = '/sapi/v1/algo/futures/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $algo_id,
            'algoId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AlgoFuturesSubOrdersGet
     *
     * Query Sub Orders (USER_DATA)
     *
     * @param  int $algo_id algo_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AlgoFuturesSubOrdersGet($algo_id, $timestamp, $signature, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'][0])
    {
        list($response) = $this->sapiV1AlgoFuturesSubOrdersGetWithHttpInfo($algo_id, $timestamp, $signature, $page, $page_size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AlgoFuturesSubOrdersGetWithHttpInfo
     *
     * Query Sub Orders (USER_DATA)
     *
     * @param  int $algo_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AlgoFuturesSubOrdersGetWithHttpInfo($algo_id, $timestamp, $signature, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'][0])
    {
        $request = $this->sapiV1AlgoFuturesSubOrdersGetRequest($algo_id, $timestamp, $signature, $page, $page_size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AlgoFuturesSubOrdersGetAsync
     *
     * Query Sub Orders (USER_DATA)
     *
     * @param  int $algo_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesSubOrdersGetAsync($algo_id, $timestamp, $signature, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'][0])
    {
        return $this->sapiV1AlgoFuturesSubOrdersGetAsyncWithHttpInfo($algo_id, $timestamp, $signature, $page, $page_size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AlgoFuturesSubOrdersGetAsyncWithHttpInfo
     *
     * Query Sub Orders (USER_DATA)
     *
     * @param  int $algo_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AlgoFuturesSubOrdersGetAsyncWithHttpInfo($algo_id, $timestamp, $signature, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AlgoFuturesSubOrdersGet200Response';
        $request = $this->sapiV1AlgoFuturesSubOrdersGetRequest($algo_id, $timestamp, $signature, $page, $page_size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AlgoFuturesSubOrdersGet'
     *
     * @param  int $algo_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $page Default 1 (optional)
     * @param  string $page_size Page size, minimum 1, maximum 100, default 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AlgoFuturesSubOrdersGetRequest($algo_id, $timestamp, $signature, $page = null, $page_size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AlgoFuturesSubOrdersGet'][0])
    {

        // verify the required parameter 'algo_id' is set
        if ($algo_id === null || (is_array($algo_id) && count($algo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $algo_id when calling sapiV1AlgoFuturesSubOrdersGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AlgoFuturesSubOrdersGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AlgoFuturesSubOrdersGet'
            );
        }





        $resourcePath = '/sapi/v1/algo/futures/subOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $algo_id,
            'algoId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
