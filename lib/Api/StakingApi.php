<?php
/**
 * StakingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StakingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StakingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sapiV1StakingPersonalLeftQuotaGet' => [
            'application/json',
        ],
        'sapiV1StakingPositionGet' => [
            'application/json',
        ],
        'sapiV1StakingProductListGet' => [
            'application/json',
        ],
        'sapiV1StakingPurchasePost' => [
            'application/json',
        ],
        'sapiV1StakingRedeemPost' => [
            'application/json',
        ],
        'sapiV1StakingSetAutoStakingPost' => [
            'application/json',
        ],
        'sapiV1StakingStakingRecordGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sapiV1StakingPersonalLeftQuotaGet
     *
     * Get Personal Left Quota of Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingPersonalLeftQuotaGet($product, $product_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'][0])
    {
        list($response) = $this->sapiV1StakingPersonalLeftQuotaGetWithHttpInfo($product, $product_id, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingPersonalLeftQuotaGetWithHttpInfo
     *
     * Get Personal Left Quota of Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingPersonalLeftQuotaGetWithHttpInfo($product, $product_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'][0])
    {
        $request = $this->sapiV1StakingPersonalLeftQuotaGetRequest($product, $product_id, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingPersonalLeftQuotaGetAsync
     *
     * Get Personal Left Quota of Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPersonalLeftQuotaGetAsync($product, $product_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'][0])
    {
        return $this->sapiV1StakingPersonalLeftQuotaGetAsyncWithHttpInfo($product, $product_id, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingPersonalLeftQuotaGetAsyncWithHttpInfo
     *
     * Get Personal Left Quota of Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPersonalLeftQuotaGetAsyncWithHttpInfo($product, $product_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingPersonalLeftQuotaGet200ResponseInner[]';
        $request = $this->sapiV1StakingPersonalLeftQuotaGetRequest($product, $product_id, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingPersonalLeftQuotaGet'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingPersonalLeftQuotaGetRequest($product, $product_id, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPersonalLeftQuotaGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingPersonalLeftQuotaGet'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling sapiV1StakingPersonalLeftQuotaGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingPersonalLeftQuotaGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingPersonalLeftQuotaGet'
            );
        }



        $resourcePath = '/sapi/v1/staking/personalLeftQuota';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'productId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingPositionGet
     *
     * Get Staking Product Position (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $product_id product_id (optional)
     * @param  string $asset asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPositionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingPositionGet($product, $timestamp, $signature, $product_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPositionGet'][0])
    {
        list($response) = $this->sapiV1StakingPositionGetWithHttpInfo($product, $timestamp, $signature, $product_id, $asset, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingPositionGetWithHttpInfo
     *
     * Get Staking Product Position (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $product_id (optional)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPositionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingPositionGetWithHttpInfo($product, $timestamp, $signature, $product_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPositionGet'][0])
    {
        $request = $this->sapiV1StakingPositionGetRequest($product, $timestamp, $signature, $product_id, $asset, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingPositionGetAsync
     *
     * Get Staking Product Position (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $product_id (optional)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPositionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPositionGetAsync($product, $timestamp, $signature, $product_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPositionGet'][0])
    {
        return $this->sapiV1StakingPositionGetAsyncWithHttpInfo($product, $timestamp, $signature, $product_id, $asset, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingPositionGetAsyncWithHttpInfo
     *
     * Get Staking Product Position (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $product_id (optional)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPositionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPositionGetAsyncWithHttpInfo($product, $timestamp, $signature, $product_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPositionGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingPositionGet200ResponseInner[]';
        $request = $this->sapiV1StakingPositionGetRequest($product, $timestamp, $signature, $product_id, $asset, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingPositionGet'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $product_id (optional)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPositionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingPositionGetRequest($product, $timestamp, $signature, $product_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPositionGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingPositionGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingPositionGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingPositionGet'
            );
        }







        $resourcePath = '/sapi/v1/staking/position';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'productId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingProductListGet
     *
     * Get Staking Product List (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingProductListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingProductListGet($product, $timestamp, $signature, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingProductListGet'][0])
    {
        list($response) = $this->sapiV1StakingProductListGetWithHttpInfo($product, $timestamp, $signature, $asset, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingProductListGetWithHttpInfo
     *
     * Get Staking Product List (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingProductListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingProductListGetWithHttpInfo($product, $timestamp, $signature, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingProductListGet'][0])
    {
        $request = $this->sapiV1StakingProductListGetRequest($product, $timestamp, $signature, $asset, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingProductListGetAsync
     *
     * Get Staking Product List (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingProductListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingProductListGetAsync($product, $timestamp, $signature, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingProductListGet'][0])
    {
        return $this->sapiV1StakingProductListGetAsyncWithHttpInfo($product, $timestamp, $signature, $asset, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingProductListGetAsyncWithHttpInfo
     *
     * Get Staking Product List (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingProductListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingProductListGetAsyncWithHttpInfo($product, $timestamp, $signature, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingProductListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingProductListGet200ResponseInner[]';
        $request = $this->sapiV1StakingProductListGetRequest($product, $timestamp, $signature, $asset, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingProductListGet'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingProductListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingProductListGetRequest($product, $timestamp, $signature, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingProductListGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingProductListGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingProductListGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingProductListGet'
            );
        }






        $resourcePath = '/sapi/v1/staking/productList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingPurchasePost
     *
     * Purchase Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id product_id (required)
     * @param  float $amount amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $renewable true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPurchasePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingPurchasePost($product, $product_id, $amount, $timestamp, $signature, $renewable = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPurchasePost'][0])
    {
        list($response) = $this->sapiV1StakingPurchasePostWithHttpInfo($product, $product_id, $amount, $timestamp, $signature, $renewable, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingPurchasePostWithHttpInfo
     *
     * Purchase Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $renewable true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPurchasePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingPurchasePostWithHttpInfo($product, $product_id, $amount, $timestamp, $signature, $renewable = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPurchasePost'][0])
    {
        $request = $this->sapiV1StakingPurchasePostRequest($product, $product_id, $amount, $timestamp, $signature, $renewable, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingPurchasePostAsync
     *
     * Purchase Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $renewable true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPurchasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPurchasePostAsync($product, $product_id, $amount, $timestamp, $signature, $renewable = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPurchasePost'][0])
    {
        return $this->sapiV1StakingPurchasePostAsyncWithHttpInfo($product, $product_id, $amount, $timestamp, $signature, $renewable, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingPurchasePostAsyncWithHttpInfo
     *
     * Purchase Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $renewable true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPurchasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingPurchasePostAsyncWithHttpInfo($product, $product_id, $amount, $timestamp, $signature, $renewable = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPurchasePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingPurchasePost200Response';
        $request = $this->sapiV1StakingPurchasePostRequest($product, $product_id, $amount, $timestamp, $signature, $renewable, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingPurchasePost'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $renewable true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingPurchasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingPurchasePostRequest($product, $product_id, $amount, $timestamp, $signature, $renewable = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingPurchasePost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingPurchasePost'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling sapiV1StakingPurchasePost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1StakingPurchasePost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingPurchasePost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingPurchasePost'
            );
        }




        $resourcePath = '/sapi/v1/staking/purchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'productId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $renewable,
            'renewable', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingRedeemPost
     *
     * Redeem Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_id Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  float $amount Mandatory if product is &#x60;F_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingRedeemPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingRedeemPost($product, $product_id, $timestamp, $signature, $position_id = null, $amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingRedeemPost'][0])
    {
        list($response) = $this->sapiV1StakingRedeemPostWithHttpInfo($product, $product_id, $timestamp, $signature, $position_id, $amount, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingRedeemPostWithHttpInfo
     *
     * Redeem Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_id Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  float $amount Mandatory if product is &#x60;F_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingRedeemPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingRedeemPostWithHttpInfo($product, $product_id, $timestamp, $signature, $position_id = null, $amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingRedeemPost'][0])
    {
        $request = $this->sapiV1StakingRedeemPostRequest($product, $product_id, $timestamp, $signature, $position_id, $amount, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingRedeemPostAsync
     *
     * Redeem Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_id Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  float $amount Mandatory if product is &#x60;F_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingRedeemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingRedeemPostAsync($product, $product_id, $timestamp, $signature, $position_id = null, $amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingRedeemPost'][0])
    {
        return $this->sapiV1StakingRedeemPostAsyncWithHttpInfo($product, $product_id, $timestamp, $signature, $position_id, $amount, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingRedeemPostAsyncWithHttpInfo
     *
     * Redeem Staking Product (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_id Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  float $amount Mandatory if product is &#x60;F_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingRedeemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingRedeemPostAsyncWithHttpInfo($product, $product_id, $timestamp, $signature, $position_id = null, $amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingRedeemPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response';
        $request = $this->sapiV1StakingRedeemPostRequest($product, $product_id, $timestamp, $signature, $position_id, $amount, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingRedeemPost'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $product_id (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $position_id Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60; (optional)
     * @param  float $amount Mandatory if product is &#x60;F_DEFI&#x60; (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingRedeemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingRedeemPostRequest($product, $product_id, $timestamp, $signature, $position_id = null, $amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingRedeemPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingRedeemPost'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling sapiV1StakingRedeemPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingRedeemPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingRedeemPost'
            );
        }





        $resourcePath = '/sapi/v1/staking/redeem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_id,
            'positionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'productId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingSetAutoStakingPost
     *
     * Set Auto Staking (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $position_id position_id (required)
     * @param  string $renewable true or false (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingSetAutoStakingPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingSetAutoStakingPost($product, $position_id, $renewable, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingSetAutoStakingPost'][0])
    {
        list($response) = $this->sapiV1StakingSetAutoStakingPostWithHttpInfo($product, $position_id, $renewable, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingSetAutoStakingPostWithHttpInfo
     *
     * Set Auto Staking (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $position_id (required)
     * @param  string $renewable true or false (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingSetAutoStakingPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingSetAutoStakingPostWithHttpInfo($product, $position_id, $renewable, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingSetAutoStakingPost'][0])
    {
        $request = $this->sapiV1StakingSetAutoStakingPostRequest($product, $position_id, $renewable, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingSetAutoStakingPostAsync
     *
     * Set Auto Staking (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $position_id (required)
     * @param  string $renewable true or false (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingSetAutoStakingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingSetAutoStakingPostAsync($product, $position_id, $renewable, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingSetAutoStakingPost'][0])
    {
        return $this->sapiV1StakingSetAutoStakingPostAsyncWithHttpInfo($product, $position_id, $renewable, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingSetAutoStakingPostAsyncWithHttpInfo
     *
     * Set Auto Staking (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $position_id (required)
     * @param  string $renewable true or false (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingSetAutoStakingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingSetAutoStakingPostAsyncWithHttpInfo($product, $position_id, $renewable, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingSetAutoStakingPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingRedeemPost200Response';
        $request = $this->sapiV1StakingSetAutoStakingPostRequest($product, $position_id, $renewable, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingSetAutoStakingPost'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $position_id (required)
     * @param  string $renewable true or false (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingSetAutoStakingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingSetAutoStakingPostRequest($product, $position_id, $renewable, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingSetAutoStakingPost'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingSetAutoStakingPost'
            );
        }

        // verify the required parameter 'position_id' is set
        if ($position_id === null || (is_array($position_id) && count($position_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position_id when calling sapiV1StakingSetAutoStakingPost'
            );
        }

        // verify the required parameter 'renewable' is set
        if ($renewable === null || (is_array($renewable) && count($renewable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $renewable when calling sapiV1StakingSetAutoStakingPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingSetAutoStakingPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingSetAutoStakingPost'
            );
        }



        $resourcePath = '/sapi/v1/staking/setAutoStaking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_id,
            'positionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $renewable,
            'renewable', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1StakingStakingRecordGet
     *
     * Get Staking History (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $txn_type &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingStakingRecordGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1StakingStakingRecordGet($product, $txn_type, $timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingStakingRecordGet'][0])
    {
        list($response) = $this->sapiV1StakingStakingRecordGetWithHttpInfo($product, $txn_type, $timestamp, $signature, $asset, $start_time, $end_time, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1StakingStakingRecordGetWithHttpInfo
     *
     * Get Staking History (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $txn_type &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingStakingRecordGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1StakingStakingRecordGetWithHttpInfo($product, $txn_type, $timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingStakingRecordGet'][0])
    {
        $request = $this->sapiV1StakingStakingRecordGetRequest($product, $txn_type, $timestamp, $signature, $asset, $start_time, $end_time, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1StakingStakingRecordGetAsync
     *
     * Get Staking History (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $txn_type &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingStakingRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingStakingRecordGetAsync($product, $txn_type, $timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingStakingRecordGet'][0])
    {
        return $this->sapiV1StakingStakingRecordGetAsyncWithHttpInfo($product, $txn_type, $timestamp, $signature, $asset, $start_time, $end_time, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1StakingStakingRecordGetAsyncWithHttpInfo
     *
     * Get Staking History (USER_DATA)
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $txn_type &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingStakingRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1StakingStakingRecordGetAsyncWithHttpInfo($product, $txn_type, $timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingStakingRecordGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1StakingStakingRecordGet200ResponseInner[]';
        $request = $this->sapiV1StakingStakingRecordGetRequest($product, $txn_type, $timestamp, $signature, $asset, $start_time, $end_time, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1StakingStakingRecordGet'
     *
     * @param  string $product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking (required)
     * @param  string $txn_type &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1StakingStakingRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1StakingStakingRecordGetRequest($product, $txn_type, $timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1StakingStakingRecordGet'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling sapiV1StakingStakingRecordGet'
            );
        }

        // verify the required parameter 'txn_type' is set
        if ($txn_type === null || (is_array($txn_type) && count($txn_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txn_type when calling sapiV1StakingStakingRecordGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1StakingStakingRecordGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1StakingStakingRecordGet'
            );
        }








        $resourcePath = '/sapi/v1/staking/stakingRecord';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $txn_type,
            'txnType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
