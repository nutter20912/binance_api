<?php
/**
 * WalletApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WalletApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WalletApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sapiV1AccountApiRestrictionsGet' => [
            'application/json',
        ],
        'sapiV1AccountApiTradingStatusGet' => [
            'application/json',
        ],
        'sapiV1AccountDisableFastWithdrawSwitchPost' => [
            'application/json',
        ],
        'sapiV1AccountEnableFastWithdrawSwitchPost' => [
            'application/json',
        ],
        'sapiV1AccountSnapshotGet' => [
            'application/json',
        ],
        'sapiV1AccountStatusGet' => [
            'application/json',
        ],
        'sapiV1AssetAssetDetailGet' => [
            'application/json',
        ],
        'sapiV1AssetAssetDividendGet' => [
            'application/json',
        ],
        'sapiV1AssetConvertTransferPost' => [
            'application/json',
        ],
        'sapiV1AssetConvertTransferQueryByPagePost' => [
            'application/json',
        ],
        'sapiV1AssetDribbletGet' => [
            'application/json',
        ],
        'sapiV1AssetDustBtcPost' => [
            'application/json',
        ],
        'sapiV1AssetDustPost' => [
            'application/json',
        ],
        'sapiV1AssetGetFundingAssetPost' => [
            'application/json',
        ],
        'sapiV1AssetLedgerTransferCloudMiningQueryByPageGet' => [
            'application/json',
        ],
        'sapiV1AssetTradeFeeGet' => [
            'application/json',
        ],
        'sapiV1AssetTransferGet' => [
            'application/json',
        ],
        'sapiV1AssetTransferPost' => [
            'application/json',
        ],
        'sapiV1CapitalConfigGetallGet' => [
            'application/json',
        ],
        'sapiV1CapitalDepositAddressGet' => [
            'application/json',
        ],
        'sapiV1CapitalDepositHisrecGet' => [
            'application/json',
        ],
        'sapiV1CapitalWithdrawApplyPost' => [
            'application/json',
        ],
        'sapiV1CapitalWithdrawHistoryGet' => [
            'application/json',
        ],
        'sapiV1SystemStatusGet' => [
            'application/json',
        ],
        'sapiV3AssetGetUserAssetPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sapiV1AccountApiRestrictionsGet
     *
     * Get API Key Permission (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiRestrictionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountApiRestrictionsGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiRestrictionsGet'][0])
    {
        list($response) = $this->sapiV1AccountApiRestrictionsGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountApiRestrictionsGetWithHttpInfo
     *
     * Get API Key Permission (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiRestrictionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountApiRestrictionsGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiRestrictionsGet'][0])
    {
        $request = $this->sapiV1AccountApiRestrictionsGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountApiRestrictionsGetAsync
     *
     * Get API Key Permission (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiRestrictionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountApiRestrictionsGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiRestrictionsGet'][0])
    {
        return $this->sapiV1AccountApiRestrictionsGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountApiRestrictionsGetAsyncWithHttpInfo
     *
     * Get API Key Permission (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiRestrictionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountApiRestrictionsGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiRestrictionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AccountApiRestrictionsGet200Response';
        $request = $this->sapiV1AccountApiRestrictionsGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountApiRestrictionsGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiRestrictionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountApiRestrictionsGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiRestrictionsGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountApiRestrictionsGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountApiRestrictionsGet'
            );
        }



        $resourcePath = '/sapi/v1/account/apiRestrictions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AccountApiTradingStatusGet
     *
     * Account API Trading Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiTradingStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountApiTradingStatusGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiTradingStatusGet'][0])
    {
        list($response) = $this->sapiV1AccountApiTradingStatusGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountApiTradingStatusGetWithHttpInfo
     *
     * Account API Trading Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiTradingStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountApiTradingStatusGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiTradingStatusGet'][0])
    {
        $request = $this->sapiV1AccountApiTradingStatusGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountApiTradingStatusGetAsync
     *
     * Account API Trading Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiTradingStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountApiTradingStatusGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiTradingStatusGet'][0])
    {
        return $this->sapiV1AccountApiTradingStatusGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountApiTradingStatusGetAsyncWithHttpInfo
     *
     * Account API Trading Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiTradingStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountApiTradingStatusGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiTradingStatusGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AccountApiTradingStatusGet200Response';
        $request = $this->sapiV1AccountApiTradingStatusGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountApiTradingStatusGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountApiTradingStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountApiTradingStatusGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountApiTradingStatusGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountApiTradingStatusGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountApiTradingStatusGet'
            );
        }



        $resourcePath = '/sapi/v1/account/apiTradingStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AccountDisableFastWithdrawSwitchPost
     *
     * Disable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountDisableFastWithdrawSwitchPost($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'][0])
    {
        list($response) = $this->sapiV1AccountDisableFastWithdrawSwitchPostWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountDisableFastWithdrawSwitchPostWithHttpInfo
     *
     * Disable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountDisableFastWithdrawSwitchPostWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'][0])
    {
        $request = $this->sapiV1AccountDisableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountDisableFastWithdrawSwitchPostAsync
     *
     * Disable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountDisableFastWithdrawSwitchPostAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'][0])
    {
        return $this->sapiV1AccountDisableFastWithdrawSwitchPostAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountDisableFastWithdrawSwitchPostAsyncWithHttpInfo
     *
     * Disable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountDisableFastWithdrawSwitchPostAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'][0])
    {
        $returnType = 'object';
        $request = $this->sapiV1AccountDisableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountDisableFastWithdrawSwitchPost'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountDisableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountDisableFastWithdrawSwitchPost'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountDisableFastWithdrawSwitchPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountDisableFastWithdrawSwitchPost'
            );
        }



        $resourcePath = '/sapi/v1/account/disableFastWithdrawSwitch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AccountEnableFastWithdrawSwitchPost
     *
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountEnableFastWithdrawSwitchPost($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'][0])
    {
        list($response) = $this->sapiV1AccountEnableFastWithdrawSwitchPostWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountEnableFastWithdrawSwitchPostWithHttpInfo
     *
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountEnableFastWithdrawSwitchPostWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'][0])
    {
        $request = $this->sapiV1AccountEnableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountEnableFastWithdrawSwitchPostAsync
     *
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountEnableFastWithdrawSwitchPostAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'][0])
    {
        return $this->sapiV1AccountEnableFastWithdrawSwitchPostAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountEnableFastWithdrawSwitchPostAsyncWithHttpInfo
     *
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountEnableFastWithdrawSwitchPostAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'][0])
    {
        $returnType = 'object';
        $request = $this->sapiV1AccountEnableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountEnableFastWithdrawSwitchPost'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountEnableFastWithdrawSwitchPostRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountEnableFastWithdrawSwitchPost'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountEnableFastWithdrawSwitchPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountEnableFastWithdrawSwitchPost'
            );
        }



        $resourcePath = '/sapi/v1/account/enableFastWithdrawSwitch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AccountSnapshotGet
     *
     * Daily Account Snapshot (USER_DATA)
     *
     * @param  string $type type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit limit (optional, default to 7)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountSnapshotGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountSnapshotGet($type, $timestamp, $signature, $start_time = null, $end_time = null, $limit = 7, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountSnapshotGet'][0])
    {
        list($response) = $this->sapiV1AccountSnapshotGetWithHttpInfo($type, $timestamp, $signature, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountSnapshotGetWithHttpInfo
     *
     * Daily Account Snapshot (USER_DATA)
     *
     * @param  string $type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 7)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountSnapshotGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountSnapshotGetWithHttpInfo($type, $timestamp, $signature, $start_time = null, $end_time = null, $limit = 7, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountSnapshotGet'][0])
    {
        $request = $this->sapiV1AccountSnapshotGetRequest($type, $timestamp, $signature, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountSnapshotGetAsync
     *
     * Daily Account Snapshot (USER_DATA)
     *
     * @param  string $type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 7)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountSnapshotGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountSnapshotGetAsync($type, $timestamp, $signature, $start_time = null, $end_time = null, $limit = 7, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountSnapshotGet'][0])
    {
        return $this->sapiV1AccountSnapshotGetAsyncWithHttpInfo($type, $timestamp, $signature, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountSnapshotGetAsyncWithHttpInfo
     *
     * Daily Account Snapshot (USER_DATA)
     *
     * @param  string $type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 7)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountSnapshotGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountSnapshotGetAsyncWithHttpInfo($type, $timestamp, $signature, $start_time = null, $end_time = null, $limit = 7, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountSnapshotGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AccountSnapshotGet200Response';
        $request = $this->sapiV1AccountSnapshotGetRequest($type, $timestamp, $signature, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountSnapshotGet'
     *
     * @param  string $type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 7)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountSnapshotGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountSnapshotGetRequest($type, $timestamp, $signature, $start_time = null, $end_time = null, $limit = 7, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountSnapshotGet'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sapiV1AccountSnapshotGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountSnapshotGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountSnapshotGet'
            );
        }



        if ($limit !== null && $limit > 30) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WalletApi.sapiV1AccountSnapshotGet, must be smaller than or equal to 30.');
        }
        if ($limit !== null && $limit < 7) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WalletApi.sapiV1AccountSnapshotGet, must be bigger than or equal to 7.');
        }
        


        $resourcePath = '/sapi/v1/accountSnapshot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AccountStatusGet
     *
     * Account Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AccountStatusGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AccountStatusGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountStatusGet'][0])
    {
        list($response) = $this->sapiV1AccountStatusGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AccountStatusGetWithHttpInfo
     *
     * Account Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AccountStatusGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AccountStatusGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountStatusGet'][0])
    {
        $request = $this->sapiV1AccountStatusGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AccountStatusGetAsync
     *
     * Account Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountStatusGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountStatusGet'][0])
    {
        return $this->sapiV1AccountStatusGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AccountStatusGetAsyncWithHttpInfo
     *
     * Account Status (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AccountStatusGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountStatusGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AccountStatusGet200Response';
        $request = $this->sapiV1AccountStatusGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AccountStatusGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AccountStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AccountStatusGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AccountStatusGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AccountStatusGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AccountStatusGet'
            );
        }



        $resourcePath = '/sapi/v1/account/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetAssetDetailGet
     *
     * Asset Detail (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetAssetDetailGet($timestamp, $signature, $asset = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDetailGet'][0])
    {
        list($response) = $this->sapiV1AssetAssetDetailGetWithHttpInfo($timestamp, $signature, $asset, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetAssetDetailGetWithHttpInfo
     *
     * Asset Detail (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetAssetDetailGetWithHttpInfo($timestamp, $signature, $asset = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDetailGet'][0])
    {
        $request = $this->sapiV1AssetAssetDetailGetRequest($timestamp, $signature, $asset, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetAssetDetailGetAsync
     *
     * Asset Detail (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetAssetDetailGetAsync($timestamp, $signature, $asset = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDetailGet'][0])
    {
        return $this->sapiV1AssetAssetDetailGetAsyncWithHttpInfo($timestamp, $signature, $asset, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetAssetDetailGetAsyncWithHttpInfo
     *
     * Asset Detail (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetAssetDetailGetAsyncWithHttpInfo($timestamp, $signature, $asset = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDetailGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetAssetDetailGet200Response';
        $request = $this->sapiV1AssetAssetDetailGetRequest($timestamp, $signature, $asset, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetAssetDetailGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetAssetDetailGetRequest($timestamp, $signature, $asset = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDetailGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetAssetDetailGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetAssetDetailGet'
            );
        }




        $resourcePath = '/sapi/v1/asset/assetDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetAssetDividendGet
     *
     * Asset Dividend Record (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit limit (optional, default to 20)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDividendGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetAssetDividendGet($timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $limit = 20, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDividendGet'][0])
    {
        list($response) = $this->sapiV1AssetAssetDividendGetWithHttpInfo($timestamp, $signature, $asset, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetAssetDividendGetWithHttpInfo
     *
     * Asset Dividend Record (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 20)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDividendGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetAssetDividendGetWithHttpInfo($timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $limit = 20, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDividendGet'][0])
    {
        $request = $this->sapiV1AssetAssetDividendGetRequest($timestamp, $signature, $asset, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetAssetDividendGetAsync
     *
     * Asset Dividend Record (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 20)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDividendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetAssetDividendGetAsync($timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $limit = 20, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDividendGet'][0])
    {
        return $this->sapiV1AssetAssetDividendGetAsyncWithHttpInfo($timestamp, $signature, $asset, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetAssetDividendGetAsyncWithHttpInfo
     *
     * Asset Dividend Record (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 20)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDividendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetAssetDividendGetAsyncWithHttpInfo($timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $limit = 20, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDividendGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetAssetDividendGet200Response';
        $request = $this->sapiV1AssetAssetDividendGetRequest($timestamp, $signature, $asset, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetAssetDividendGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit (optional, default to 20)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetAssetDividendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetAssetDividendGetRequest($timestamp, $signature, $asset = null, $start_time = null, $end_time = null, $limit = 20, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetAssetDividendGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetAssetDividendGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetAssetDividendGet'
            );
        }




        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WalletApi.sapiV1AssetAssetDividendGet, must be smaller than or equal to 500.');
        }
        


        $resourcePath = '/sapi/v1/asset/assetDividend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetConvertTransferPost
     *
     * Convert Transfer (USER_DATA)
     *
     * @param  string $client_tran_id The unique flag, the min length is 20 (required)
     * @param  string $asset asset (required)
     * @param  float $amount amount (required)
     * @param  string $target_asset Target asset you want to convert (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetConvertTransferPost($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferPost'][0])
    {
        list($response) = $this->sapiV1AssetConvertTransferPostWithHttpInfo($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetConvertTransferPostWithHttpInfo
     *
     * Convert Transfer (USER_DATA)
     *
     * @param  string $client_tran_id The unique flag, the min length is 20 (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  string $target_asset Target asset you want to convert (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetConvertTransferPostWithHttpInfo($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferPost'][0])
    {
        $request = $this->sapiV1AssetConvertTransferPostRequest($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetConvertTransferPostAsync
     *
     * Convert Transfer (USER_DATA)
     *
     * @param  string $client_tran_id The unique flag, the min length is 20 (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  string $target_asset Target asset you want to convert (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetConvertTransferPostAsync($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferPost'][0])
    {
        return $this->sapiV1AssetConvertTransferPostAsyncWithHttpInfo($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetConvertTransferPostAsyncWithHttpInfo
     *
     * Convert Transfer (USER_DATA)
     *
     * @param  string $client_tran_id The unique flag, the min length is 20 (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  string $target_asset Target asset you want to convert (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetConvertTransferPostAsyncWithHttpInfo($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetConvertTransferPost200Response';
        $request = $this->sapiV1AssetConvertTransferPostRequest($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetConvertTransferPost'
     *
     * @param  string $client_tran_id The unique flag, the min length is 20 (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  string $target_asset Target asset you want to convert (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetConvertTransferPostRequest($client_tran_id, $asset, $amount, $target_asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferPost'][0])
    {

        // verify the required parameter 'client_tran_id' is set
        if ($client_tran_id === null || (is_array($client_tran_id) && count($client_tran_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_tran_id when calling sapiV1AssetConvertTransferPost'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling sapiV1AssetConvertTransferPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1AssetConvertTransferPost'
            );
        }

        // verify the required parameter 'target_asset' is set
        if ($target_asset === null || (is_array($target_asset) && count($target_asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_asset when calling sapiV1AssetConvertTransferPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetConvertTransferPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetConvertTransferPost'
            );
        }



        $resourcePath = '/sapi/v1/asset/convert-transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_tran_id,
            'clientTranId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_asset,
            'targetAsset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetConvertTransferQueryByPagePost
     *
     * Query Convert Transfer (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $asset If it is blank, we will match deducted asset and target asset. (optional)
     * @param  string $account_type MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetConvertTransferQueryByPagePost($start_time, $end_time, $timestamp, $signature, $tran_id = null, $asset = null, $account_type = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'][0])
    {
        list($response) = $this->sapiV1AssetConvertTransferQueryByPagePostWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id, $asset, $account_type, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetConvertTransferQueryByPagePostWithHttpInfo
     *
     * Query Convert Transfer (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $asset If it is blank, we will match deducted asset and target asset. (optional)
     * @param  string $account_type MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetConvertTransferQueryByPagePostWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id = null, $asset = null, $account_type = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'][0])
    {
        $request = $this->sapiV1AssetConvertTransferQueryByPagePostRequest($start_time, $end_time, $timestamp, $signature, $tran_id, $asset, $account_type, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetConvertTransferQueryByPagePostAsync
     *
     * Query Convert Transfer (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $asset If it is blank, we will match deducted asset and target asset. (optional)
     * @param  string $account_type MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetConvertTransferQueryByPagePostAsync($start_time, $end_time, $timestamp, $signature, $tran_id = null, $asset = null, $account_type = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'][0])
    {
        return $this->sapiV1AssetConvertTransferQueryByPagePostAsyncWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id, $asset, $account_type, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetConvertTransferQueryByPagePostAsyncWithHttpInfo
     *
     * Query Convert Transfer (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $asset If it is blank, we will match deducted asset and target asset. (optional)
     * @param  string $account_type MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetConvertTransferQueryByPagePostAsyncWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id = null, $asset = null, $account_type = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetConvertTransferQueryByPagePost200Response';
        $request = $this->sapiV1AssetConvertTransferQueryByPagePostRequest($start_time, $end_time, $timestamp, $signature, $tran_id, $asset, $account_type, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetConvertTransferQueryByPagePost'
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $asset If it is blank, we will match deducted asset and target asset. (optional)
     * @param  string $account_type MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetConvertTransferQueryByPagePostRequest($start_time, $end_time, $timestamp, $signature, $tran_id = null, $asset = null, $account_type = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetConvertTransferQueryByPagePost'][0])
    {

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling sapiV1AssetConvertTransferQueryByPagePost'
            );
        }

        // verify the required parameter 'end_time' is set
        if ($end_time === null || (is_array($end_time) && count($end_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling sapiV1AssetConvertTransferQueryByPagePost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetConvertTransferQueryByPagePost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetConvertTransferQueryByPagePost'
            );
        }








        $resourcePath = '/sapi/v1/asset/convert-transfer/queryByPage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tran_id,
            'tranId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_type,
            'accountType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetDribbletGet
     *
     * DustLog(USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDribbletGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetDribbletGet($timestamp, $signature, $start_time = null, $end_time = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDribbletGet'][0])
    {
        list($response) = $this->sapiV1AssetDribbletGetWithHttpInfo($timestamp, $signature, $start_time, $end_time, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetDribbletGetWithHttpInfo
     *
     * DustLog(USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDribbletGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetDribbletGetWithHttpInfo($timestamp, $signature, $start_time = null, $end_time = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDribbletGet'][0])
    {
        $request = $this->sapiV1AssetDribbletGetRequest($timestamp, $signature, $start_time, $end_time, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetDribbletGetAsync
     *
     * DustLog(USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDribbletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDribbletGetAsync($timestamp, $signature, $start_time = null, $end_time = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDribbletGet'][0])
    {
        return $this->sapiV1AssetDribbletGetAsyncWithHttpInfo($timestamp, $signature, $start_time, $end_time, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetDribbletGetAsyncWithHttpInfo
     *
     * DustLog(USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDribbletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDribbletGetAsyncWithHttpInfo($timestamp, $signature, $start_time = null, $end_time = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDribbletGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetDribbletGet200Response';
        $request = $this->sapiV1AssetDribbletGetRequest($timestamp, $signature, $start_time, $end_time, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetDribbletGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDribbletGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetDribbletGetRequest($timestamp, $signature, $start_time = null, $end_time = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDribbletGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetDribbletGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetDribbletGet'
            );
        }





        $resourcePath = '/sapi/v1/asset/dribblet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetDustBtcPost
     *
     * Get Assets That Can Be Converted Into BNB (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustBtcPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetDustBtcPost($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustBtcPost'][0])
    {
        list($response) = $this->sapiV1AssetDustBtcPostWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetDustBtcPostWithHttpInfo
     *
     * Get Assets That Can Be Converted Into BNB (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustBtcPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetDustBtcPostWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustBtcPost'][0])
    {
        $request = $this->sapiV1AssetDustBtcPostRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetDustBtcPostAsync
     *
     * Get Assets That Can Be Converted Into BNB (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustBtcPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDustBtcPostAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustBtcPost'][0])
    {
        return $this->sapiV1AssetDustBtcPostAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetDustBtcPostAsyncWithHttpInfo
     *
     * Get Assets That Can Be Converted Into BNB (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustBtcPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDustBtcPostAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustBtcPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetDustBtcPost200Response';
        $request = $this->sapiV1AssetDustBtcPostRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetDustBtcPost'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustBtcPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetDustBtcPostRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustBtcPost'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetDustBtcPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetDustBtcPost'
            );
        }



        $resourcePath = '/sapi/v1/asset/dust-btc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetDustPost
     *
     * Dust Transfer (USER_DATA)
     *
     * @param  string[] $asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetDustPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetDustPost($asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustPost'][0])
    {
        list($response) = $this->sapiV1AssetDustPostWithHttpInfo($asset, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetDustPostWithHttpInfo
     *
     * Dust Transfer (USER_DATA)
     *
     * @param  string[] $asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetDustPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetDustPostWithHttpInfo($asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustPost'][0])
    {
        $request = $this->sapiV1AssetDustPostRequest($asset, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetDustPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetDustPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetDustPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetDustPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetDustPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetDustPostAsync
     *
     * Dust Transfer (USER_DATA)
     *
     * @param  string[] $asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDustPostAsync($asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustPost'][0])
    {
        return $this->sapiV1AssetDustPostAsyncWithHttpInfo($asset, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetDustPostAsyncWithHttpInfo
     *
     * Dust Transfer (USER_DATA)
     *
     * @param  string[] $asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetDustPostAsyncWithHttpInfo($asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetDustPost200Response';
        $request = $this->sapiV1AssetDustPostRequest($asset, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetDustPost'
     *
     * @param  string[] $asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetDustPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetDustPostRequest($asset, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetDustPost'][0])
    {

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling sapiV1AssetDustPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetDustPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetDustPost'
            );
        }



        $resourcePath = '/sapi/v1/asset/dust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetGetFundingAssetPost
     *
     * Funding Wallet (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  string $need_btc_valuation need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetGetFundingAssetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetGetFundingAssetPost($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetGetFundingAssetPost'][0])
    {
        list($response) = $this->sapiV1AssetGetFundingAssetPostWithHttpInfo($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetGetFundingAssetPostWithHttpInfo
     *
     * Funding Wallet (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetGetFundingAssetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetGetFundingAssetPostWithHttpInfo($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetGetFundingAssetPost'][0])
    {
        $request = $this->sapiV1AssetGetFundingAssetPostRequest($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetGetFundingAssetPostAsync
     *
     * Funding Wallet (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetGetFundingAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetGetFundingAssetPostAsync($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetGetFundingAssetPost'][0])
    {
        return $this->sapiV1AssetGetFundingAssetPostAsyncWithHttpInfo($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetGetFundingAssetPostAsyncWithHttpInfo
     *
     * Funding Wallet (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetGetFundingAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetGetFundingAssetPostAsyncWithHttpInfo($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetGetFundingAssetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetGetFundingAssetPost200ResponseInner[]';
        $request = $this->sapiV1AssetGetFundingAssetPostRequest($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetGetFundingAssetPost'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetGetFundingAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetGetFundingAssetPostRequest($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetGetFundingAssetPost'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetGetFundingAssetPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetGetFundingAssetPost'
            );
        }





        $resourcePath = '/sapi/v1/asset/get-funding-asset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $need_btc_valuation,
            'needBtcValuation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetLedgerTransferCloudMiningQueryByPageGet
     *
     * Get Cloud-Mining payment and refund history (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $client_tran_id The unique flag (optional)
     * @param  string $asset If it is blank, we will query all assets (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetLedgerTransferCloudMiningQueryByPageGet($start_time, $end_time, $timestamp, $signature, $tran_id = null, $client_tran_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'][0])
    {
        list($response) = $this->sapiV1AssetLedgerTransferCloudMiningQueryByPageGetWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id, $client_tran_id, $asset, $current, $size, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetLedgerTransferCloudMiningQueryByPageGetWithHttpInfo
     *
     * Get Cloud-Mining payment and refund history (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $client_tran_id The unique flag (optional)
     * @param  string $asset If it is blank, we will query all assets (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetLedgerTransferCloudMiningQueryByPageGetWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id = null, $client_tran_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'][0])
    {
        $request = $this->sapiV1AssetLedgerTransferCloudMiningQueryByPageGetRequest($start_time, $end_time, $timestamp, $signature, $tran_id, $client_tran_id, $asset, $current, $size, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetLedgerTransferCloudMiningQueryByPageGetAsync
     *
     * Get Cloud-Mining payment and refund history (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $client_tran_id The unique flag (optional)
     * @param  string $asset If it is blank, we will query all assets (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetLedgerTransferCloudMiningQueryByPageGetAsync($start_time, $end_time, $timestamp, $signature, $tran_id = null, $client_tran_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'][0])
    {
        return $this->sapiV1AssetLedgerTransferCloudMiningQueryByPageGetAsyncWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id, $client_tran_id, $asset, $current, $size, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetLedgerTransferCloudMiningQueryByPageGetAsyncWithHttpInfo
     *
     * Get Cloud-Mining payment and refund history (USER_DATA)
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $client_tran_id The unique flag (optional)
     * @param  string $asset If it is blank, we will query all assets (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetLedgerTransferCloudMiningQueryByPageGetAsyncWithHttpInfo($start_time, $end_time, $timestamp, $signature, $tran_id = null, $client_tran_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetLedgerTransferCloudMiningQueryByPageGet200Response';
        $request = $this->sapiV1AssetLedgerTransferCloudMiningQueryByPageGetRequest($start_time, $end_time, $timestamp, $signature, $tran_id, $client_tran_id, $asset, $current, $size, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'
     *
     * @param  int $start_time UTC timestamp in ms (required)
     * @param  int $end_time UTC timestamp in ms (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $tran_id The transaction id (optional)
     * @param  string $client_tran_id The unique flag (optional)
     * @param  string $asset If it is blank, we will query all assets (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetLedgerTransferCloudMiningQueryByPageGetRequest($start_time, $end_time, $timestamp, $signature, $tran_id = null, $client_tran_id = null, $asset = null, $current = null, $size = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'][0])
    {

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'
            );
        }

        // verify the required parameter 'end_time' is set
        if ($end_time === null || (is_array($end_time) && count($end_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetLedgerTransferCloudMiningQueryByPageGet'
            );
        }








        $resourcePath = '/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tran_id,
            'tranId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_tran_id,
            'clientTranId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetTradeFeeGet
     *
     * Trade Fee (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTradeFeeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetTradeFeeGet($timestamp, $signature, $symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTradeFeeGet'][0])
    {
        list($response) = $this->sapiV1AssetTradeFeeGetWithHttpInfo($timestamp, $signature, $symbol, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetTradeFeeGetWithHttpInfo
     *
     * Trade Fee (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTradeFeeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetTradeFeeGetWithHttpInfo($timestamp, $signature, $symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTradeFeeGet'][0])
    {
        $request = $this->sapiV1AssetTradeFeeGetRequest($timestamp, $signature, $symbol, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetTradeFeeGetAsync
     *
     * Trade Fee (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTradeFeeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTradeFeeGetAsync($timestamp, $signature, $symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTradeFeeGet'][0])
    {
        return $this->sapiV1AssetTradeFeeGetAsyncWithHttpInfo($timestamp, $signature, $symbol, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetTradeFeeGetAsyncWithHttpInfo
     *
     * Trade Fee (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTradeFeeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTradeFeeGetAsyncWithHttpInfo($timestamp, $signature, $symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTradeFeeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetTradeFeeGet200ResponseInner[]';
        $request = $this->sapiV1AssetTradeFeeGetRequest($timestamp, $signature, $symbol, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetTradeFeeGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $symbol Trading symbol, e.g. BNBUSDT (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTradeFeeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetTradeFeeGetRequest($timestamp, $signature, $symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTradeFeeGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetTradeFeeGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetTradeFeeGet'
            );
        }




        $resourcePath = '/sapi/v1/asset/tradeFee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetTransferGet
     *
     * Query User Universal Transfer History (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetTransferGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetTransferGet($type, $timestamp, $signature, $start_time = null, $end_time = null, $current = null, $size = null, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferGet'][0])
    {
        list($response) = $this->sapiV1AssetTransferGetWithHttpInfo($type, $timestamp, $signature, $start_time, $end_time, $current, $size, $from_symbol, $to_symbol, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetTransferGetWithHttpInfo
     *
     * Query User Universal Transfer History (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetTransferGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetTransferGetWithHttpInfo($type, $timestamp, $signature, $start_time = null, $end_time = null, $current = null, $size = null, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferGet'][0])
    {
        $request = $this->sapiV1AssetTransferGetRequest($type, $timestamp, $signature, $start_time, $end_time, $current, $size, $from_symbol, $to_symbol, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetTransferGetAsync
     *
     * Query User Universal Transfer History (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTransferGetAsync($type, $timestamp, $signature, $start_time = null, $end_time = null, $current = null, $size = null, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferGet'][0])
    {
        return $this->sapiV1AssetTransferGetAsyncWithHttpInfo($type, $timestamp, $signature, $start_time, $end_time, $current, $size, $from_symbol, $to_symbol, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetTransferGetAsyncWithHttpInfo
     *
     * Query User Universal Transfer History (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTransferGetAsyncWithHttpInfo($type, $timestamp, $signature, $start_time = null, $end_time = null, $current = null, $size = null, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetTransferGet200Response';
        $request = $this->sapiV1AssetTransferGetRequest($type, $timestamp, $signature, $start_time, $end_time, $current, $size, $from_symbol, $to_symbol, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetTransferGet'
     *
     * @param  string $type Universal transfer type (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $size Default:10 Max:100 (optional)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetTransferGetRequest($type, $timestamp, $signature, $start_time = null, $end_time = null, $current = null, $size = null, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferGet'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sapiV1AssetTransferGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetTransferGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetTransferGet'
            );
        }









        $resourcePath = '/sapi/v1/asset/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_symbol,
            'fromSymbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_symbol,
            'toSymbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1AssetTransferPost
     *
     * User Universal Transfer (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  string $asset asset (required)
     * @param  float $amount amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1AssetTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1AssetTransferPost($type, $asset, $amount, $timestamp, $signature, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferPost'][0])
    {
        list($response) = $this->sapiV1AssetTransferPostWithHttpInfo($type, $asset, $amount, $timestamp, $signature, $from_symbol, $to_symbol, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1AssetTransferPostWithHttpInfo
     *
     * User Universal Transfer (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1AssetTransferPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1AssetTransferPostWithHttpInfo($type, $asset, $amount, $timestamp, $signature, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferPost'][0])
    {
        $request = $this->sapiV1AssetTransferPostRequest($type, $asset, $amount, $timestamp, $signature, $from_symbol, $to_symbol, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1AssetTransferPostAsync
     *
     * User Universal Transfer (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTransferPostAsync($type, $asset, $amount, $timestamp, $signature, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferPost'][0])
    {
        return $this->sapiV1AssetTransferPostAsyncWithHttpInfo($type, $asset, $amount, $timestamp, $signature, $from_symbol, $to_symbol, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1AssetTransferPostAsyncWithHttpInfo
     *
     * User Universal Transfer (USER_DATA)
     *
     * @param  string $type Universal transfer type (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1AssetTransferPostAsyncWithHttpInfo($type, $asset, $amount, $timestamp, $signature, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1AssetTransferPost200Response';
        $request = $this->sapiV1AssetTransferPostRequest($type, $asset, $amount, $timestamp, $signature, $from_symbol, $to_symbol, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1AssetTransferPost'
     *
     * @param  string $type Universal transfer type (required)
     * @param  string $asset (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $from_symbol Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  string $to_symbol Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1AssetTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1AssetTransferPostRequest($type, $asset, $amount, $timestamp, $signature, $from_symbol = null, $to_symbol = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1AssetTransferPost'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sapiV1AssetTransferPost'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling sapiV1AssetTransferPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1AssetTransferPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1AssetTransferPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1AssetTransferPost'
            );
        }





        $resourcePath = '/sapi/v1/asset/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_symbol,
            'fromSymbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_symbol,
            'toSymbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1CapitalConfigGetallGet
     *
     * All Coins&#39; Information (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalConfigGetallGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1CapitalConfigGetallGet($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalConfigGetallGet'][0])
    {
        list($response) = $this->sapiV1CapitalConfigGetallGetWithHttpInfo($timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1CapitalConfigGetallGetWithHttpInfo
     *
     * All Coins&#39; Information (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalConfigGetallGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1CapitalConfigGetallGetWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalConfigGetallGet'][0])
    {
        $request = $this->sapiV1CapitalConfigGetallGetRequest($timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1CapitalConfigGetallGetAsync
     *
     * All Coins&#39; Information (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalConfigGetallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalConfigGetallGetAsync($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalConfigGetallGet'][0])
    {
        return $this->sapiV1CapitalConfigGetallGetAsyncWithHttpInfo($timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1CapitalConfigGetallGetAsyncWithHttpInfo
     *
     * All Coins&#39; Information (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalConfigGetallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalConfigGetallGetAsyncWithHttpInfo($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalConfigGetallGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1CapitalConfigGetallGet200ResponseInner[]';
        $request = $this->sapiV1CapitalConfigGetallGetRequest($timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1CapitalConfigGetallGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalConfigGetallGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1CapitalConfigGetallGetRequest($timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalConfigGetallGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1CapitalConfigGetallGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1CapitalConfigGetallGet'
            );
        }



        $resourcePath = '/sapi/v1/capital/config/getall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1CapitalDepositAddressGet
     *
     * Deposit Address (supporting network) (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $network network (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1CapitalDepositAddressGet($coin, $timestamp, $signature, $network = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositAddressGet'][0])
    {
        list($response) = $this->sapiV1CapitalDepositAddressGetWithHttpInfo($coin, $timestamp, $signature, $network, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1CapitalDepositAddressGetWithHttpInfo
     *
     * Deposit Address (supporting network) (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $network (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositAddressGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1CapitalDepositAddressGetWithHttpInfo($coin, $timestamp, $signature, $network = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositAddressGet'][0])
    {
        $request = $this->sapiV1CapitalDepositAddressGetRequest($coin, $timestamp, $signature, $network, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1CapitalDepositAddressGetAsync
     *
     * Deposit Address (supporting network) (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $network (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalDepositAddressGetAsync($coin, $timestamp, $signature, $network = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositAddressGet'][0])
    {
        return $this->sapiV1CapitalDepositAddressGetAsyncWithHttpInfo($coin, $timestamp, $signature, $network, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1CapitalDepositAddressGetAsyncWithHttpInfo
     *
     * Deposit Address (supporting network) (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $network (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalDepositAddressGetAsyncWithHttpInfo($coin, $timestamp, $signature, $network = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositAddressGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1CapitalDepositAddressGet200Response';
        $request = $this->sapiV1CapitalDepositAddressGetRequest($coin, $timestamp, $signature, $network, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1CapitalDepositAddressGet'
     *
     * @param  string $coin Coin name (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $network (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1CapitalDepositAddressGetRequest($coin, $timestamp, $signature, $network = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositAddressGet'][0])
    {

        // verify the required parameter 'coin' is set
        if ($coin === null || (is_array($coin) && count($coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coin when calling sapiV1CapitalDepositAddressGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1CapitalDepositAddressGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1CapitalDepositAddressGet'
            );
        }




        $resourcePath = '/sapi/v1/capital/deposit/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network,
            'network', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1CapitalDepositHisrecGet
     *
     * Deposit History（supporting network） (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $status * &#x60;0&#x60; - pending * &#x60;6&#x60; - credited but cannot withdraw * &#x60;1&#x60; - success (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositHisrecGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1CapitalDepositHisrecGet($timestamp, $signature, $coin = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositHisrecGet'][0])
    {
        list($response) = $this->sapiV1CapitalDepositHisrecGetWithHttpInfo($timestamp, $signature, $coin, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1CapitalDepositHisrecGetWithHttpInfo
     *
     * Deposit History（supporting network） (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $status * &#x60;0&#x60; - pending * &#x60;6&#x60; - credited but cannot withdraw * &#x60;1&#x60; - success (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositHisrecGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1CapitalDepositHisrecGetWithHttpInfo($timestamp, $signature, $coin = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositHisrecGet'][0])
    {
        $request = $this->sapiV1CapitalDepositHisrecGetRequest($timestamp, $signature, $coin, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1CapitalDepositHisrecGetAsync
     *
     * Deposit History（supporting network） (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $status * &#x60;0&#x60; - pending * &#x60;6&#x60; - credited but cannot withdraw * &#x60;1&#x60; - success (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositHisrecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalDepositHisrecGetAsync($timestamp, $signature, $coin = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositHisrecGet'][0])
    {
        return $this->sapiV1CapitalDepositHisrecGetAsyncWithHttpInfo($timestamp, $signature, $coin, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1CapitalDepositHisrecGetAsyncWithHttpInfo
     *
     * Deposit History（supporting network） (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $status * &#x60;0&#x60; - pending * &#x60;6&#x60; - credited but cannot withdraw * &#x60;1&#x60; - success (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositHisrecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalDepositHisrecGetAsyncWithHttpInfo($timestamp, $signature, $coin = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositHisrecGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1CapitalDepositHisrecGet200ResponseInner[]';
        $request = $this->sapiV1CapitalDepositHisrecGetRequest($timestamp, $signature, $coin, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1CapitalDepositHisrecGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  int $status * &#x60;0&#x60; - pending * &#x60;6&#x60; - credited but cannot withdraw * &#x60;1&#x60; - success (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalDepositHisrecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1CapitalDepositHisrecGetRequest($timestamp, $signature, $coin = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalDepositHisrecGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1CapitalDepositHisrecGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1CapitalDepositHisrecGet'
            );
        }









        $resourcePath = '/sapi/v1/capital/deposit/hisrec';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1CapitalWithdrawApplyPost
     *
     * Withdraw (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  string $address address (required)
     * @param  float $amount amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $withdraw_order_id Client id for withdraw (optional)
     * @param  string $network Get the value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param  string $address_tag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param  bool $transaction_fee_flag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account; - &#x60;false&#x60; -&gt; returning the fee back to the departure account. (optional, default to false)
     * @param  string $name name (optional)
     * @param  int $wallet_type The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawApplyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1CapitalWithdrawApplyPost($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id = null, $network = null, $address_tag = null, $transaction_fee_flag = false, $name = null, $wallet_type = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawApplyPost'][0])
    {
        list($response) = $this->sapiV1CapitalWithdrawApplyPostWithHttpInfo($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id, $network, $address_tag, $transaction_fee_flag, $name, $wallet_type, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1CapitalWithdrawApplyPostWithHttpInfo
     *
     * Withdraw (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  string $address (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $withdraw_order_id Client id for withdraw (optional)
     * @param  string $network Get the value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param  string $address_tag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param  bool $transaction_fee_flag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account; - &#x60;false&#x60; -&gt; returning the fee back to the departure account. (optional, default to false)
     * @param  string $name (optional)
     * @param  int $wallet_type The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawApplyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1CapitalWithdrawApplyPostWithHttpInfo($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id = null, $network = null, $address_tag = null, $transaction_fee_flag = false, $name = null, $wallet_type = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawApplyPost'][0])
    {
        $request = $this->sapiV1CapitalWithdrawApplyPostRequest($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id, $network, $address_tag, $transaction_fee_flag, $name, $wallet_type, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1CapitalWithdrawApplyPostAsync
     *
     * Withdraw (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  string $address (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $withdraw_order_id Client id for withdraw (optional)
     * @param  string $network Get the value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param  string $address_tag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param  bool $transaction_fee_flag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account; - &#x60;false&#x60; -&gt; returning the fee back to the departure account. (optional, default to false)
     * @param  string $name (optional)
     * @param  int $wallet_type The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawApplyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalWithdrawApplyPostAsync($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id = null, $network = null, $address_tag = null, $transaction_fee_flag = false, $name = null, $wallet_type = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawApplyPost'][0])
    {
        return $this->sapiV1CapitalWithdrawApplyPostAsyncWithHttpInfo($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id, $network, $address_tag, $transaction_fee_flag, $name, $wallet_type, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1CapitalWithdrawApplyPostAsyncWithHttpInfo
     *
     * Withdraw (USER_DATA)
     *
     * @param  string $coin Coin name (required)
     * @param  string $address (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $withdraw_order_id Client id for withdraw (optional)
     * @param  string $network Get the value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param  string $address_tag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param  bool $transaction_fee_flag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account; - &#x60;false&#x60; -&gt; returning the fee back to the departure account. (optional, default to false)
     * @param  string $name (optional)
     * @param  int $wallet_type The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawApplyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalWithdrawApplyPostAsyncWithHttpInfo($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id = null, $network = null, $address_tag = null, $transaction_fee_flag = false, $name = null, $wallet_type = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawApplyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1CapitalWithdrawApplyPost200Response';
        $request = $this->sapiV1CapitalWithdrawApplyPostRequest($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id, $network, $address_tag, $transaction_fee_flag, $name, $wallet_type, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1CapitalWithdrawApplyPost'
     *
     * @param  string $coin Coin name (required)
     * @param  string $address (required)
     * @param  float $amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $withdraw_order_id Client id for withdraw (optional)
     * @param  string $network Get the value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param  string $address_tag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param  bool $transaction_fee_flag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account; - &#x60;false&#x60; -&gt; returning the fee back to the departure account. (optional, default to false)
     * @param  string $name (optional)
     * @param  int $wallet_type The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawApplyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1CapitalWithdrawApplyPostRequest($coin, $address, $amount, $timestamp, $signature, $withdraw_order_id = null, $network = null, $address_tag = null, $transaction_fee_flag = false, $name = null, $wallet_type = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawApplyPost'][0])
    {

        // verify the required parameter 'coin' is set
        if ($coin === null || (is_array($coin) && count($coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coin when calling sapiV1CapitalWithdrawApplyPost'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling sapiV1CapitalWithdrawApplyPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1CapitalWithdrawApplyPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1CapitalWithdrawApplyPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1CapitalWithdrawApplyPost'
            );
        }









        $resourcePath = '/sapi/v1/capital/withdraw/apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $withdraw_order_id,
            'withdrawOrderId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network,
            'network', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_tag,
            'addressTag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_fee_flag,
            'transactionFeeFlag', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_type,
            'walletType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1CapitalWithdrawHistoryGet
     *
     * Withdraw History (supporting network) (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  string $withdraw_order_id withdraw_order_id (optional)
     * @param  int $status * &#x60;0&#x60; - Email Sent * &#x60;1&#x60; - Cancelled * &#x60;2&#x60; - Awaiting Approval * &#x60;3&#x60; - Rejected * &#x60;4&#x60; - Processing * &#x60;5&#x60; - Failure * &#x60;6&#x60; - Completed (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1CapitalWithdrawHistoryGet($timestamp, $signature, $coin = null, $withdraw_order_id = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawHistoryGet'][0])
    {
        list($response) = $this->sapiV1CapitalWithdrawHistoryGetWithHttpInfo($timestamp, $signature, $coin, $withdraw_order_id, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1CapitalWithdrawHistoryGetWithHttpInfo
     *
     * Withdraw History (supporting network) (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  string $withdraw_order_id (optional)
     * @param  int $status * &#x60;0&#x60; - Email Sent * &#x60;1&#x60; - Cancelled * &#x60;2&#x60; - Awaiting Approval * &#x60;3&#x60; - Rejected * &#x60;4&#x60; - Processing * &#x60;5&#x60; - Failure * &#x60;6&#x60; - Completed (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1CapitalWithdrawHistoryGetWithHttpInfo($timestamp, $signature, $coin = null, $withdraw_order_id = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawHistoryGet'][0])
    {
        $request = $this->sapiV1CapitalWithdrawHistoryGetRequest($timestamp, $signature, $coin, $withdraw_order_id, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1CapitalWithdrawHistoryGetAsync
     *
     * Withdraw History (supporting network) (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  string $withdraw_order_id (optional)
     * @param  int $status * &#x60;0&#x60; - Email Sent * &#x60;1&#x60; - Cancelled * &#x60;2&#x60; - Awaiting Approval * &#x60;3&#x60; - Rejected * &#x60;4&#x60; - Processing * &#x60;5&#x60; - Failure * &#x60;6&#x60; - Completed (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalWithdrawHistoryGetAsync($timestamp, $signature, $coin = null, $withdraw_order_id = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawHistoryGet'][0])
    {
        return $this->sapiV1CapitalWithdrawHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin, $withdraw_order_id, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1CapitalWithdrawHistoryGetAsyncWithHttpInfo
     *
     * Withdraw History (supporting network) (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  string $withdraw_order_id (optional)
     * @param  int $status * &#x60;0&#x60; - Email Sent * &#x60;1&#x60; - Cancelled * &#x60;2&#x60; - Awaiting Approval * &#x60;3&#x60; - Rejected * &#x60;4&#x60; - Processing * &#x60;5&#x60; - Failure * &#x60;6&#x60; - Completed (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1CapitalWithdrawHistoryGetAsyncWithHttpInfo($timestamp, $signature, $coin = null, $withdraw_order_id = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1CapitalWithdrawHistoryGet200ResponseInner[]';
        $request = $this->sapiV1CapitalWithdrawHistoryGetRequest($timestamp, $signature, $coin, $withdraw_order_id, $status, $start_time, $end_time, $offset, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1CapitalWithdrawHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $coin Coin name (optional)
     * @param  string $withdraw_order_id (optional)
     * @param  int $status * &#x60;0&#x60; - Email Sent * &#x60;1&#x60; - Cancelled * &#x60;2&#x60; - Awaiting Approval * &#x60;3&#x60; - Rejected * &#x60;4&#x60; - Processing * &#x60;5&#x60; - Failure * &#x60;6&#x60; - Completed (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $offset (optional)
     * @param  int $limit Default 500; max 1000. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1CapitalWithdrawHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1CapitalWithdrawHistoryGetRequest($timestamp, $signature, $coin = null, $withdraw_order_id = null, $status = null, $start_time = null, $end_time = null, $offset = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1CapitalWithdrawHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1CapitalWithdrawHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1CapitalWithdrawHistoryGet'
            );
        }










        $resourcePath = '/sapi/v1/capital/withdraw/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $withdraw_order_id,
            'withdrawOrderId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1SystemStatusGet
     *
     * System Status (System)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1SystemStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1SystemStatusGet200Response
     */
    public function sapiV1SystemStatusGet(string $contentType = self::contentTypes['sapiV1SystemStatusGet'][0])
    {
        list($response) = $this->sapiV1SystemStatusGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation sapiV1SystemStatusGetWithHttpInfo
     *
     * System Status (System)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1SystemStatusGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1SystemStatusGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1SystemStatusGetWithHttpInfo(string $contentType = self::contentTypes['sapiV1SystemStatusGet'][0])
    {
        $request = $this->sapiV1SystemStatusGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1SystemStatusGetAsync
     *
     * System Status (System)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1SystemStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1SystemStatusGetAsync(string $contentType = self::contentTypes['sapiV1SystemStatusGet'][0])
    {
        return $this->sapiV1SystemStatusGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1SystemStatusGetAsyncWithHttpInfo
     *
     * System Status (System)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1SystemStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1SystemStatusGetAsyncWithHttpInfo(string $contentType = self::contentTypes['sapiV1SystemStatusGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1SystemStatusGet200Response';
        $request = $this->sapiV1SystemStatusGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1SystemStatusGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1SystemStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1SystemStatusGetRequest(string $contentType = self::contentTypes['sapiV1SystemStatusGet'][0])
    {


        $resourcePath = '/sapi/v1/system/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV3AssetGetUserAssetPost
     *
     * User Asset (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  string $need_btc_valuation need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV3AssetGetUserAssetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV3AssetGetUserAssetPost($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV3AssetGetUserAssetPost'][0])
    {
        list($response) = $this->sapiV3AssetGetUserAssetPostWithHttpInfo($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV3AssetGetUserAssetPostWithHttpInfo
     *
     * User Asset (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV3AssetGetUserAssetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV3AssetGetUserAssetPostWithHttpInfo($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV3AssetGetUserAssetPost'][0])
    {
        $request = $this->sapiV3AssetGetUserAssetPostRequest($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV3AssetGetUserAssetPostAsync
     *
     * User Asset (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV3AssetGetUserAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV3AssetGetUserAssetPostAsync($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV3AssetGetUserAssetPost'][0])
    {
        return $this->sapiV3AssetGetUserAssetPostAsyncWithHttpInfo($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV3AssetGetUserAssetPostAsyncWithHttpInfo
     *
     * User Asset (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV3AssetGetUserAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV3AssetGetUserAssetPostAsyncWithHttpInfo($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV3AssetGetUserAssetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV3AssetGetUserAssetPost200ResponseInner[]';
        $request = $this->sapiV3AssetGetUserAssetPostRequest($timestamp, $signature, $asset, $need_btc_valuation, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV3AssetGetUserAssetPost'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $need_btc_valuation (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV3AssetGetUserAssetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV3AssetGetUserAssetPostRequest($timestamp, $signature, $asset = null, $need_btc_valuation = null, $recv_window = null, string $contentType = self::contentTypes['sapiV3AssetGetUserAssetPost'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV3AssetGetUserAssetPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV3AssetGetUserAssetPost'
            );
        }





        $resourcePath = '/sapi/v3/asset/getUserAsset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $need_btc_valuation,
            'needBtcValuation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
