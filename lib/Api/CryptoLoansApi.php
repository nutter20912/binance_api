<?php
/**
 * CryptoLoansApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CryptoLoansApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CryptoLoansApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sapiV1LoanAdjustLtvPost' => [
            'application/json',
        ],
        'sapiV1LoanBorrowHistoryGet' => [
            'application/json',
        ],
        'sapiV1LoanBorrowPost' => [
            'application/json',
        ],
        'sapiV1LoanCollateralDataGet' => [
            'application/json',
        ],
        'sapiV1LoanCustomizeMarginCallPost' => [
            'application/json',
        ],
        'sapiV1LoanIncomeGet' => [
            'application/json',
        ],
        'sapiV1LoanLoanableDataGet' => [
            'application/json',
        ],
        'sapiV1LoanLtvAdjustmentHistoryGet' => [
            'application/json',
        ],
        'sapiV1LoanOngoingOrdersGet' => [
            'application/json',
        ],
        'sapiV1LoanRepayCollateralRateGet' => [
            'application/json',
        ],
        'sapiV1LoanRepayHistoryGet' => [
            'application/json',
        ],
        'sapiV1LoanRepayPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sapiV1LoanAdjustLtvPost
     *
     * Crypto Loan Adjust LTV (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Amount (required)
     * @param  string $direction &#39;ADDITIONAL&#39;, &#39;REDUCED&#39; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanAdjustLtvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanAdjustLtvPost($order_id, $amount, $direction, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanAdjustLtvPost'][0])
    {
        list($response) = $this->sapiV1LoanAdjustLtvPostWithHttpInfo($order_id, $amount, $direction, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanAdjustLtvPostWithHttpInfo
     *
     * Crypto Loan Adjust LTV (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Amount (required)
     * @param  string $direction &#39;ADDITIONAL&#39;, &#39;REDUCED&#39; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanAdjustLtvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanAdjustLtvPostWithHttpInfo($order_id, $amount, $direction, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanAdjustLtvPost'][0])
    {
        $request = $this->sapiV1LoanAdjustLtvPostRequest($order_id, $amount, $direction, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanAdjustLtvPostAsync
     *
     * Crypto Loan Adjust LTV (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Amount (required)
     * @param  string $direction &#39;ADDITIONAL&#39;, &#39;REDUCED&#39; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanAdjustLtvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanAdjustLtvPostAsync($order_id, $amount, $direction, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanAdjustLtvPost'][0])
    {
        return $this->sapiV1LoanAdjustLtvPostAsyncWithHttpInfo($order_id, $amount, $direction, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanAdjustLtvPostAsyncWithHttpInfo
     *
     * Crypto Loan Adjust LTV (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Amount (required)
     * @param  string $direction &#39;ADDITIONAL&#39;, &#39;REDUCED&#39; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanAdjustLtvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanAdjustLtvPostAsyncWithHttpInfo($order_id, $amount, $direction, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanAdjustLtvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanAdjustLtvPost200Response';
        $request = $this->sapiV1LoanAdjustLtvPostRequest($order_id, $amount, $direction, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanAdjustLtvPost'
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Amount (required)
     * @param  string $direction &#39;ADDITIONAL&#39;, &#39;REDUCED&#39; (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanAdjustLtvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanAdjustLtvPostRequest($order_id, $amount, $direction, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanAdjustLtvPost'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling sapiV1LoanAdjustLtvPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1LoanAdjustLtvPost'
            );
        }

        // verify the required parameter 'direction' is set
        if ($direction === null || (is_array($direction) && count($direction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction when calling sapiV1LoanAdjustLtvPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanAdjustLtvPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanAdjustLtvPost'
            );
        }



        $resourcePath = '/sapi/v1/loan/adjust/ltv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanBorrowHistoryGet
     *
     * Get Crypto Loans Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanBorrowHistoryGet($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowHistoryGet'][0])
    {
        list($response) = $this->sapiV1LoanBorrowHistoryGetWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanBorrowHistoryGetWithHttpInfo
     *
     * Get Crypto Loans Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanBorrowHistoryGetWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowHistoryGet'][0])
    {
        $request = $this->sapiV1LoanBorrowHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanBorrowHistoryGetAsync
     *
     * Get Crypto Loans Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanBorrowHistoryGetAsync($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowHistoryGet'][0])
    {
        return $this->sapiV1LoanBorrowHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanBorrowHistoryGetAsyncWithHttpInfo
     *
     * Get Crypto Loans Borrow History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanBorrowHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanBorrowHistoryGet200Response';
        $request = $this->sapiV1LoanBorrowHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanBorrowHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanBorrowHistoryGetRequest($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanBorrowHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanBorrowHistoryGet'
            );
        }










        $resourcePath = '/sapi/v1/loan/borrow/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanBorrowPost
     *
     * Crypto Loan Borrow (TRADE)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  int $loan_term 7/14/30/90/180 days (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  float $loan_amount Mandatory when collateralAmount is empty (optional)
     * @param  float $collateral_amount Mandatory when loanAmount is empty (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanBorrowPost($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount = null, $collateral_amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowPost'][0])
    {
        list($response) = $this->sapiV1LoanBorrowPostWithHttpInfo($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount, $collateral_amount, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanBorrowPostWithHttpInfo
     *
     * Crypto Loan Borrow (TRADE)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  int $loan_term 7/14/30/90/180 days (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  float $loan_amount Mandatory when collateralAmount is empty (optional)
     * @param  float $collateral_amount Mandatory when loanAmount is empty (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanBorrowPostWithHttpInfo($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount = null, $collateral_amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowPost'][0])
    {
        $request = $this->sapiV1LoanBorrowPostRequest($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount, $collateral_amount, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanBorrowPostAsync
     *
     * Crypto Loan Borrow (TRADE)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  int $loan_term 7/14/30/90/180 days (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  float $loan_amount Mandatory when collateralAmount is empty (optional)
     * @param  float $collateral_amount Mandatory when loanAmount is empty (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanBorrowPostAsync($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount = null, $collateral_amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowPost'][0])
    {
        return $this->sapiV1LoanBorrowPostAsyncWithHttpInfo($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount, $collateral_amount, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanBorrowPostAsyncWithHttpInfo
     *
     * Crypto Loan Borrow (TRADE)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  int $loan_term 7/14/30/90/180 days (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  float $loan_amount Mandatory when collateralAmount is empty (optional)
     * @param  float $collateral_amount Mandatory when loanAmount is empty (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanBorrowPostAsyncWithHttpInfo($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount = null, $collateral_amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanBorrowPost200Response';
        $request = $this->sapiV1LoanBorrowPostRequest($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount, $collateral_amount, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanBorrowPost'
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  int $loan_term 7/14/30/90/180 days (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  float $loan_amount Mandatory when collateralAmount is empty (optional)
     * @param  float $collateral_amount Mandatory when loanAmount is empty (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanBorrowPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanBorrowPostRequest($loan_coin, $collateral_coin, $loan_term, $timestamp, $signature, $loan_amount = null, $collateral_amount = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanBorrowPost'][0])
    {

        // verify the required parameter 'loan_coin' is set
        if ($loan_coin === null || (is_array($loan_coin) && count($loan_coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_coin when calling sapiV1LoanBorrowPost'
            );
        }

        // verify the required parameter 'collateral_coin' is set
        if ($collateral_coin === null || (is_array($collateral_coin) && count($collateral_coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collateral_coin when calling sapiV1LoanBorrowPost'
            );
        }

        // verify the required parameter 'loan_term' is set
        if ($loan_term === null || (is_array($loan_term) && count($loan_term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_term when calling sapiV1LoanBorrowPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanBorrowPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanBorrowPost'
            );
        }





        $resourcePath = '/sapi/v1/loan/borrow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_amount,
            'loanAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_amount,
            'collateralAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_term,
            'loanTerm', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanCollateralDataGet
     *
     * Get Collateral Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCollateralDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanCollateralDataGet($timestamp, $signature, $collateral_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCollateralDataGet'][0])
    {
        list($response) = $this->sapiV1LoanCollateralDataGetWithHttpInfo($timestamp, $signature, $collateral_coin, $vip_level, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanCollateralDataGetWithHttpInfo
     *
     * Get Collateral Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCollateralDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanCollateralDataGetWithHttpInfo($timestamp, $signature, $collateral_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCollateralDataGet'][0])
    {
        $request = $this->sapiV1LoanCollateralDataGetRequest($timestamp, $signature, $collateral_coin, $vip_level, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanCollateralDataGetAsync
     *
     * Get Collateral Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCollateralDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanCollateralDataGetAsync($timestamp, $signature, $collateral_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCollateralDataGet'][0])
    {
        return $this->sapiV1LoanCollateralDataGetAsyncWithHttpInfo($timestamp, $signature, $collateral_coin, $vip_level, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanCollateralDataGetAsyncWithHttpInfo
     *
     * Get Collateral Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCollateralDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanCollateralDataGetAsyncWithHttpInfo($timestamp, $signature, $collateral_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCollateralDataGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanCollateralDataGet200Response';
        $request = $this->sapiV1LoanCollateralDataGetRequest($timestamp, $signature, $collateral_coin, $vip_level, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanCollateralDataGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCollateralDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanCollateralDataGetRequest($timestamp, $signature, $collateral_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCollateralDataGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanCollateralDataGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanCollateralDataGet'
            );
        }





        $resourcePath = '/sapi/v1/loan/collateral/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vip_level,
            'vipLevel', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanCustomizeMarginCallPost
     *
     * Crypto Loan Customize Margin Call (TRADE)
     *
     * @param  float $margin_call margin_call (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCustomizeMarginCallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanCustomizeMarginCallPost($margin_call, $timestamp, $signature, $order_id = null, $collateral_coin = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCustomizeMarginCallPost'][0])
    {
        list($response) = $this->sapiV1LoanCustomizeMarginCallPostWithHttpInfo($margin_call, $timestamp, $signature, $order_id, $collateral_coin, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanCustomizeMarginCallPostWithHttpInfo
     *
     * Crypto Loan Customize Margin Call (TRADE)
     *
     * @param  float $margin_call (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCustomizeMarginCallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanCustomizeMarginCallPostWithHttpInfo($margin_call, $timestamp, $signature, $order_id = null, $collateral_coin = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCustomizeMarginCallPost'][0])
    {
        $request = $this->sapiV1LoanCustomizeMarginCallPostRequest($margin_call, $timestamp, $signature, $order_id, $collateral_coin, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanCustomizeMarginCallPostAsync
     *
     * Crypto Loan Customize Margin Call (TRADE)
     *
     * @param  float $margin_call (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCustomizeMarginCallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanCustomizeMarginCallPostAsync($margin_call, $timestamp, $signature, $order_id = null, $collateral_coin = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCustomizeMarginCallPost'][0])
    {
        return $this->sapiV1LoanCustomizeMarginCallPostAsyncWithHttpInfo($margin_call, $timestamp, $signature, $order_id, $collateral_coin, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanCustomizeMarginCallPostAsyncWithHttpInfo
     *
     * Crypto Loan Customize Margin Call (TRADE)
     *
     * @param  float $margin_call (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCustomizeMarginCallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanCustomizeMarginCallPostAsyncWithHttpInfo($margin_call, $timestamp, $signature, $order_id = null, $collateral_coin = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCustomizeMarginCallPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanCustomizeMarginCallPost200Response';
        $request = $this->sapiV1LoanCustomizeMarginCallPostRequest($margin_call, $timestamp, $signature, $order_id, $collateral_coin, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanCustomizeMarginCallPost'
     *
     * @param  float $margin_call (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanCustomizeMarginCallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanCustomizeMarginCallPostRequest($margin_call, $timestamp, $signature, $order_id = null, $collateral_coin = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanCustomizeMarginCallPost'][0])
    {

        // verify the required parameter 'margin_call' is set
        if ($margin_call === null || (is_array($margin_call) && count($margin_call) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_call when calling sapiV1LoanCustomizeMarginCallPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanCustomizeMarginCallPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanCustomizeMarginCallPost'
            );
        }





        $resourcePath = '/sapi/v1/loan/customize/margin_call';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $margin_call,
            'marginCall', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanIncomeGet
     *
     * Get Crypto Loans Income History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset asset (optional)
     * @param  string $type All types will be returned by default. * &#x60;borrowIn&#x60; * &#x60;collateralSpent&#x60; * &#x60;repayAmount&#x60; * &#x60;collateralReturn&#x60; - Collateral return after repayment * &#x60;addCollateral&#x60; * &#x60;removeCollateral&#x60; * &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit default 20, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanIncomeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanIncomeGet($timestamp, $signature, $asset = null, $type = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanIncomeGet'][0])
    {
        list($response) = $this->sapiV1LoanIncomeGetWithHttpInfo($timestamp, $signature, $asset, $type, $start_time, $end_time, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanIncomeGetWithHttpInfo
     *
     * Get Crypto Loans Income History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $type All types will be returned by default. * &#x60;borrowIn&#x60; * &#x60;collateralSpent&#x60; * &#x60;repayAmount&#x60; * &#x60;collateralReturn&#x60; - Collateral return after repayment * &#x60;addCollateral&#x60; * &#x60;removeCollateral&#x60; * &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit default 20, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanIncomeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanIncomeGetWithHttpInfo($timestamp, $signature, $asset = null, $type = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanIncomeGet'][0])
    {
        $request = $this->sapiV1LoanIncomeGetRequest($timestamp, $signature, $asset, $type, $start_time, $end_time, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanIncomeGetAsync
     *
     * Get Crypto Loans Income History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $type All types will be returned by default. * &#x60;borrowIn&#x60; * &#x60;collateralSpent&#x60; * &#x60;repayAmount&#x60; * &#x60;collateralReturn&#x60; - Collateral return after repayment * &#x60;addCollateral&#x60; * &#x60;removeCollateral&#x60; * &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit default 20, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanIncomeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanIncomeGetAsync($timestamp, $signature, $asset = null, $type = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanIncomeGet'][0])
    {
        return $this->sapiV1LoanIncomeGetAsyncWithHttpInfo($timestamp, $signature, $asset, $type, $start_time, $end_time, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanIncomeGetAsyncWithHttpInfo
     *
     * Get Crypto Loans Income History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $type All types will be returned by default. * &#x60;borrowIn&#x60; * &#x60;collateralSpent&#x60; * &#x60;repayAmount&#x60; * &#x60;collateralReturn&#x60; - Collateral return after repayment * &#x60;addCollateral&#x60; * &#x60;removeCollateral&#x60; * &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit default 20, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanIncomeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanIncomeGetAsyncWithHttpInfo($timestamp, $signature, $asset = null, $type = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanIncomeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanIncomeGet200ResponseInner[]';
        $request = $this->sapiV1LoanIncomeGetRequest($timestamp, $signature, $asset, $type, $start_time, $end_time, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanIncomeGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $asset (optional)
     * @param  string $type All types will be returned by default. * &#x60;borrowIn&#x60; * &#x60;collateralSpent&#x60; * &#x60;repayAmount&#x60; * &#x60;collateralReturn&#x60; - Collateral return after repayment * &#x60;addCollateral&#x60; * &#x60;removeCollateral&#x60; * &#x60;collateralReturnAfterLiquidation&#x60; (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $limit default 20, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanIncomeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanIncomeGetRequest($timestamp, $signature, $asset = null, $type = null, $start_time = null, $end_time = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanIncomeGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanIncomeGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanIncomeGet'
            );
        }








        $resourcePath = '/sapi/v1/loan/income';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanLoanableDataGet
     *
     * Get Loanable Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLoanableDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanLoanableDataGet($timestamp, $signature, $loan_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLoanableDataGet'][0])
    {
        list($response) = $this->sapiV1LoanLoanableDataGetWithHttpInfo($timestamp, $signature, $loan_coin, $vip_level, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanLoanableDataGetWithHttpInfo
     *
     * Get Loanable Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLoanableDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanLoanableDataGetWithHttpInfo($timestamp, $signature, $loan_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLoanableDataGet'][0])
    {
        $request = $this->sapiV1LoanLoanableDataGetRequest($timestamp, $signature, $loan_coin, $vip_level, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanLoanableDataGetAsync
     *
     * Get Loanable Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLoanableDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanLoanableDataGetAsync($timestamp, $signature, $loan_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLoanableDataGet'][0])
    {
        return $this->sapiV1LoanLoanableDataGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin, $vip_level, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanLoanableDataGetAsyncWithHttpInfo
     *
     * Get Loanable Assets Data (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLoanableDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanLoanableDataGetAsyncWithHttpInfo($timestamp, $signature, $loan_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLoanableDataGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanLoanableDataGet200Response';
        $request = $this->sapiV1LoanLoanableDataGetRequest($timestamp, $signature, $loan_coin, $vip_level, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanLoanableDataGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  int $vip_level Defaults to user&#39;s vip level (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLoanableDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanLoanableDataGetRequest($timestamp, $signature, $loan_coin = null, $vip_level = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLoanableDataGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanLoanableDataGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanLoanableDataGet'
            );
        }





        $resourcePath = '/sapi/v1/loan/loanable/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vip_level,
            'vipLevel', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanLtvAdjustmentHistoryGet
     *
     * Get Loan LTV Adjustment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanLtvAdjustmentHistoryGet($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'][0])
    {
        list($response) = $this->sapiV1LoanLtvAdjustmentHistoryGetWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanLtvAdjustmentHistoryGetWithHttpInfo
     *
     * Get Loan LTV Adjustment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanLtvAdjustmentHistoryGetWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'][0])
    {
        $request = $this->sapiV1LoanLtvAdjustmentHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanLtvAdjustmentHistoryGetAsync
     *
     * Get Loan LTV Adjustment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanLtvAdjustmentHistoryGetAsync($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'][0])
    {
        return $this->sapiV1LoanLtvAdjustmentHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanLtvAdjustmentHistoryGetAsyncWithHttpInfo
     *
     * Get Loan LTV Adjustment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanLtvAdjustmentHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanLtvAdjustmentHistoryGet200Response';
        $request = $this->sapiV1LoanLtvAdjustmentHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanLtvAdjustmentHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanLtvAdjustmentHistoryGetRequest($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanLtvAdjustmentHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanLtvAdjustmentHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanLtvAdjustmentHistoryGet'
            );
        }










        $resourcePath = '/sapi/v1/loan/ltv/adjustment/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanOngoingOrdersGet
     *
     * Get Loan Ongoing Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $current Current querying page. Start from 1; default:1, max:1000 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanOngoingOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanOngoingOrdersGet($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanOngoingOrdersGet'][0])
    {
        list($response) = $this->sapiV1LoanOngoingOrdersGetWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $current, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanOngoingOrdersGetWithHttpInfo
     *
     * Get Loan Ongoing Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $current Current querying page. Start from 1; default:1, max:1000 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanOngoingOrdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanOngoingOrdersGetWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanOngoingOrdersGet'][0])
    {
        $request = $this->sapiV1LoanOngoingOrdersGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $current, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanOngoingOrdersGetAsync
     *
     * Get Loan Ongoing Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $current Current querying page. Start from 1; default:1, max:1000 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanOngoingOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanOngoingOrdersGetAsync($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanOngoingOrdersGet'][0])
    {
        return $this->sapiV1LoanOngoingOrdersGetAsyncWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $current, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanOngoingOrdersGetAsyncWithHttpInfo
     *
     * Get Loan Ongoing Orders (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $current Current querying page. Start from 1; default:1, max:1000 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanOngoingOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanOngoingOrdersGetAsyncWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanOngoingOrdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanOngoingOrdersGet200Response';
        $request = $this->sapiV1LoanOngoingOrdersGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $current, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanOngoingOrdersGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id orderId in POST /sapi/v1/loan/borrow (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $current Current querying page. Start from 1; default:1, max:1000 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanOngoingOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanOngoingOrdersGetRequest($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanOngoingOrdersGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanOngoingOrdersGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanOngoingOrdersGet'
            );
        }








        $resourcePath = '/sapi/v1/loan/ongoing/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanRepayCollateralRateGet
     *
     * Check Collateral Repay Rate (USER_DATA)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  float $repay_amount repay amount of loanCoin (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayCollateralRateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanRepayCollateralRateGet($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayCollateralRateGet'][0])
    {
        list($response) = $this->sapiV1LoanRepayCollateralRateGetWithHttpInfo($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanRepayCollateralRateGetWithHttpInfo
     *
     * Check Collateral Repay Rate (USER_DATA)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  float $repay_amount repay amount of loanCoin (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayCollateralRateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanRepayCollateralRateGetWithHttpInfo($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayCollateralRateGet'][0])
    {
        $request = $this->sapiV1LoanRepayCollateralRateGetRequest($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanRepayCollateralRateGetAsync
     *
     * Check Collateral Repay Rate (USER_DATA)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  float $repay_amount repay amount of loanCoin (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayCollateralRateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayCollateralRateGetAsync($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayCollateralRateGet'][0])
    {
        return $this->sapiV1LoanRepayCollateralRateGetAsyncWithHttpInfo($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanRepayCollateralRateGetAsyncWithHttpInfo
     *
     * Check Collateral Repay Rate (USER_DATA)
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  float $repay_amount repay amount of loanCoin (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayCollateralRateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayCollateralRateGetAsyncWithHttpInfo($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayCollateralRateGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayCollateralRateGet200Response';
        $request = $this->sapiV1LoanRepayCollateralRateGetRequest($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanRepayCollateralRateGet'
     *
     * @param  string $loan_coin Coin loaned (required)
     * @param  string $collateral_coin Coin used as collateral (required)
     * @param  float $repay_amount repay amount of loanCoin (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayCollateralRateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanRepayCollateralRateGetRequest($loan_coin, $collateral_coin, $repay_amount, $timestamp, $signature, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayCollateralRateGet'][0])
    {

        // verify the required parameter 'loan_coin' is set
        if ($loan_coin === null || (is_array($loan_coin) && count($loan_coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_coin when calling sapiV1LoanRepayCollateralRateGet'
            );
        }

        // verify the required parameter 'collateral_coin' is set
        if ($collateral_coin === null || (is_array($collateral_coin) && count($collateral_coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collateral_coin when calling sapiV1LoanRepayCollateralRateGet'
            );
        }

        // verify the required parameter 'repay_amount' is set
        if ($repay_amount === null || (is_array($repay_amount) && count($repay_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repay_amount when calling sapiV1LoanRepayCollateralRateGet'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanRepayCollateralRateGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanRepayCollateralRateGet'
            );
        }



        $resourcePath = '/sapi/v1/loan/repay/collateral/rate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $repay_amount,
            'repayAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanRepayHistoryGet
     *
     * Get Loan Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanRepayHistoryGet($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayHistoryGet'][0])
    {
        list($response) = $this->sapiV1LoanRepayHistoryGetWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanRepayHistoryGetWithHttpInfo
     *
     * Get Loan Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanRepayHistoryGetWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayHistoryGet'][0])
    {
        $request = $this->sapiV1LoanRepayHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanRepayHistoryGetAsync
     *
     * Get Loan Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayHistoryGetAsync($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayHistoryGet'][0])
    {
        return $this->sapiV1LoanRepayHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanRepayHistoryGetAsyncWithHttpInfo
     *
     * Get Loan Repayment History (USER_DATA)
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayHistoryGetAsyncWithHttpInfo($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayHistoryGet200Response';
        $request = $this->sapiV1LoanRepayHistoryGetRequest($timestamp, $signature, $order_id, $loan_coin, $collateral_coin, $start_time, $end_time, $current, $limit, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanRepayHistoryGet'
     *
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $order_id Order ID (optional)
     * @param  string $loan_coin Coin loaned (optional)
     * @param  string $collateral_coin Coin used as collateral (optional)
     * @param  int $start_time UTC timestamp in ms (optional)
     * @param  int $end_time UTC timestamp in ms (optional)
     * @param  int $current Current querying page. Start from 1. Default:1 (optional)
     * @param  int $limit default 10, max 100 (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanRepayHistoryGetRequest($timestamp, $signature, $order_id = null, $loan_coin = null, $collateral_coin = null, $start_time = null, $end_time = null, $current = null, $limit = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayHistoryGet'][0])
    {

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanRepayHistoryGet'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanRepayHistoryGet'
            );
        }










        $resourcePath = '/sapi/v1/loan/repay/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loan_coin,
            'loanCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_coin,
            'collateralCoin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sapiV1LoanRepayPost
     *
     * Crypto Loan Repay (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Repayment Amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $type Default: 1. 1 for &#39;repay with borrowed coin&#39;; 2 for &#39;repay with collateral&#39;. (optional)
     * @param  bool $collateral_return Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SapiV1LoanRepayPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function sapiV1LoanRepayPost($order_id, $amount, $timestamp, $signature, $type = null, $collateral_return = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayPost'][0])
    {
        list($response) = $this->sapiV1LoanRepayPostWithHttpInfo($order_id, $amount, $timestamp, $signature, $type, $collateral_return, $recv_window, $contentType);
        return $response;
    }

    /**
     * Operation sapiV1LoanRepayPostWithHttpInfo
     *
     * Crypto Loan Repay (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Repayment Amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $type Default: 1. 1 for &#39;repay with borrowed coin&#39;; 2 for &#39;repay with collateral&#39;. (optional)
     * @param  bool $collateral_return Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SapiV1LoanRepayPost200Response|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sapiV1LoanRepayPostWithHttpInfo($order_id, $amount, $timestamp, $signature, $type = null, $collateral_return = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayPost'][0])
    {
        $request = $this->sapiV1LoanRepayPostRequest($order_id, $amount, $timestamp, $signature, $type, $collateral_return, $recv_window, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sapiV1LoanRepayPostAsync
     *
     * Crypto Loan Repay (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Repayment Amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $type Default: 1. 1 for &#39;repay with borrowed coin&#39;; 2 for &#39;repay with collateral&#39;. (optional)
     * @param  bool $collateral_return Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayPostAsync($order_id, $amount, $timestamp, $signature, $type = null, $collateral_return = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayPost'][0])
    {
        return $this->sapiV1LoanRepayPostAsyncWithHttpInfo($order_id, $amount, $timestamp, $signature, $type, $collateral_return, $recv_window, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sapiV1LoanRepayPostAsyncWithHttpInfo
     *
     * Crypto Loan Repay (TRADE)
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Repayment Amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $type Default: 1. 1 for &#39;repay with borrowed coin&#39;; 2 for &#39;repay with collateral&#39;. (optional)
     * @param  bool $collateral_return Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sapiV1LoanRepayPostAsyncWithHttpInfo($order_id, $amount, $timestamp, $signature, $type = null, $collateral_return = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SapiV1LoanRepayPost200Response';
        $request = $this->sapiV1LoanRepayPostRequest($order_id, $amount, $timestamp, $signature, $type, $collateral_return, $recv_window, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sapiV1LoanRepayPost'
     *
     * @param  int $order_id Order ID (required)
     * @param  float $amount Repayment Amount (required)
     * @param  int $timestamp UTC timestamp in ms (required)
     * @param  string $signature Signature (required)
     * @param  int $type Default: 1. 1 for &#39;repay with borrowed coin&#39;; 2 for &#39;repay with collateral&#39;. (optional)
     * @param  bool $collateral_return Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. (optional)
     * @param  int $recv_window The value cannot be greater than 60000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sapiV1LoanRepayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sapiV1LoanRepayPostRequest($order_id, $amount, $timestamp, $signature, $type = null, $collateral_return = null, $recv_window = null, string $contentType = self::contentTypes['sapiV1LoanRepayPost'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling sapiV1LoanRepayPost'
            );
        }

        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling sapiV1LoanRepayPost'
            );
        }

        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling sapiV1LoanRepayPost'
            );
        }

        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling sapiV1LoanRepayPost'
            );
        }





        $resourcePath = '/sapi/v1/loan/repay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collateral_return,
            'collateralReturn', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recv_window,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timestamp,
            'timestamp', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-MBX-APIKEY');
        if ($apiKey !== null) {
            $headers['X-MBX-APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
